## Include the presentation environment;
include("jspe.js-e");

currentSlide = 1;

s1 is Slide("<h3>Welcome to the JS-EDEN Presentation Environment (JSPE)</h3><p>This has been developed during the EMILE summer project of 2012, and has been designed to operate in a similar manner to the <a href=\"http://empublic.dcs.warwick.ac.uk/projects/empeHarfield2007/\" target=\"_blank\"><b>Empirical Modelling Presentation Environment</b></a></p><p>This demo should hopefully serve as a guide on how to use the JSPE, so click the <b>Next Slide</b> button at the bottom to go to the next slide</p>");
s2 is Slide("<p>The JSPE operates using a series of Slide constructs to hold content on this portion of the screen</p><p>The Slide construct is invoked in the same manner as other Drawable construct</p><p>The Slide construct takes a single parameter, which is simply a string of HTML that is embedded into the current webpage</p><p>For a slide to appear, it first needs to be added to the <b>slideList</b> observable. The <b>slideList</b> observable is a list of al slides which are to be shown in the order of the list</p><p>Let's create a Slide, which we will then make to appear before the current one: </p><jseden>s3 is Slide(\"<p>You should go forward two slides to continue</p>\");\ninsert slideList, 1, s3;<\/jseden><p>To get these <b>execute</b> and <b>copy to clipboard</b> options to appear, you need to wrap any JS-EDEN code you want the user to interact with in &lt;jseden&gt;&lt/jseden&gt; tags, and the environment processes these tags to produce the commands</p><p>The <b>execute</b> command executes all JS-EDEN scripts contained within the jseden tags it is associated with</p><p>The <b>copy to input</b> command copies the JS-EDEN code from within the associated jseden tags and places it into the EDEN Interpreter Window, where it can be edited before being executed</p>");
s4 is Slide("<p>As you saw, executing that last of JS-EDEN to insert the new slide into the position where the slide we were currently viewing was. This is because of the <b>currentSlide</b> observable records which slide we were on was not updated, so it viewed the slide at the current position, which was 2</p><p>Inserting slides in this manner is not recommended as any change in the definition of any slide after <i>appending</i> or <i>inserting</i> a slide to the <b>slideList</b> breaks the dependency between <b>slideList</b> and the slides, so that the content on each slide then remains fixed, unless we redefine <b>slideList</b> again:<jseden>slideList is [s1,s3,s2,s4,s5,s6];</jseden></p><p>It's possible to navigate through the slides by manually incrementing and decrementing the <b>currentSlide</b> observable, and the following expression will take you back a slide: <jseden>currentSlide = 3;</jseden>");
s5 is Slide("<p>As we have seen, we can redefine observables from within the JSPE, which means we can also define constructs to appear on the canvas in a controlled manner:<jseden>c is Circle(150,150,50,\"red\",\"red\");\npicture is [c];</jseden><p>An important thing to note is that all instances of the \" character need to be escaped like \\\" to ensure that they are correctly interpreted when entered into the slide construct</p>");
s6 is Slide("<p>To make use of the JSPE, you need to include the following code in your script: <pre>\#\# Include the presentation environment\ninclude(\"jspe.jse\");\n\n\#\# Set the first slide to appear\ncurrentSlide = 1;\n\n\#\# Make a blank slide\ns1 is Slide(\"\");\n\n\#\# Make slides viewable\nslideList is [s1];</pre><h3>Enjoy!!</h3>");

slideList is [s1,s2,s4,s5,s6];
