## Auto-Generated Script of Model by JS-Eden

## Auto calculation is turned off to until the model has been fully loaded
autocalc = 0;

## Observable Assignments:
_view_picture_width = 550;
_view_picture_y = 30;
_view_html_x = 875;
_view_html_y = 30;
price1 = 0.33;
price2 = 1.64;
price3 = 0.39;
price4 = 2;
price5 = 0.29;
price6 = 0.42;
imagelocation = "models/SciFest2015/shopping/img/";
pounds = 2;
pence = 0.3;
selection0 = [7, 8, 6, 7, 3, 1, 6, 3];
selection1 = [2, 3, 4, 4, 5, 5, 6, 6];
selection2 = [4, 2, 4, 6, 7, 1, 1, 5];
scaleWidth = 50;
itemsselected = [0, 0, 0, 0, 0, 0];

## Scoped Support/Replacement Functions
sum is _sum{ i = 1 };
_sum is (i <= list#) ? list[i] + _sum{ i = i + 1 } : 0;

round is ${{ Math.round(context.lookup("number").value(scope)) }}$;

Text is ${{ new Text(
	scope.lookup("/text").value,
	scope.lookup("/x").value,
	scope.lookup("/y").value,
	scope.lookup("/size").value || 13.3,
	scope.lookup("/sizeUnits").value || "px",
	scope.lookup("/fillcolour").value || "black",
	scope.lookup("/outlinecolour").value,
	scope.lookup("/options").value) }}$;

HTMLImage is ${{ new HTMLImage(
	scope.lookup("/name").value,
	scope.lookup("/x").value,
	scope.lookup("/y").value,
	scope.lookup("/width").value,
	scope.lookup("/height").value,
	scope.lookup("/scaleFactor").value || 1,
	scope.lookup("/url").value,
	scope.lookup("/imageMap").value); }}$;

## Observable Definitions:
selection is selection0;
ix1 is selection[1];
ix2 is selection[2];
ix3 is selection[3];
ix4 is selection[4];
ix5 is selection[5];
ix6 is selection[6];
ix7 is selection[7];
ix8 is selection[8];
item1 is [ "apples", price1];
item2 is [ "grapes", price2];
item3 is [ "oranges", price3];
item4 is [ "strawberries", price4];
item5 is [ "bananas", price5];
item6 is [ "pears", price6];
forsale is [item1, item2, item3, item4, item5, item6];


basket is listitems{ onsale = forsale, chosen = itemsselected };

##basket is listitems(forsale, itemsselected);

totalcost is costitems{ onsale = forsale, chosen = itemsselected };

##totalcost is costitems(forsale, itemsselected);

coinlist is [1,2,5,10,20,50,100,200];

purse_single is coinlist[selection[i]];
purse is purse_single{ i = 1..8 };

## purse is coinlist[i]{ i in selection };
##purse is [coinlist[ix1], coinlist[ix2], coinlist[ix3], coinlist[ix4], coinlist[ix5], coinlist[ix6], coinlist[ix7], coinlist[ix8]];

spendingmoney is sum{ list = purse }/100;

haveenoughmoney is (totalcost<spendingmoney);
shortfall is (!haveenoughmoney) ? round{ number = (totalcost-spendingmoney)*100}/100 : 0;

offered is moneyinhand{ allcoins = purse, chosen = coinsselected };
##offered is moneyinhand(purse, coinsselected);

change is (offered >= totalcost) ? round{ number = (offered - totalcost)*100}/100 : 0;
items is [item1, item2, item3, item4, item5, item6];

coinpic is HTMLImage{
	name = "coin" // str(i) // "pic",
	x = (i-1)*scaleWidth,
	y = 2 * scaleWidth * coinsselected[i],
	width = scaleWidth,
	height = scaleWidth,
	url = imagelocation // coindisplay[selection[i]]
};

/*
coin1pic is coinpic{ i = 1 };
coin2pic is coinpic{ i = 2 };
coin3pic is coinpic{ i = 3 };
coin4pic is coinpic{ i = 4 };
coin5pic is coinpic{ i = 5 };
coin6pic is coinpic{ i = 6 };
coin7pic is coinpic{ i = 7 };
coin8pic is coinpic{ i = 8 };
*/

## Or do this depending on how observable you want it to be.
coinpics is coinpic{ i = 1..8 };

/*
coin1pic is HTMLImage("coin1pic",0,2*scaleWidth*coinsselected[1],scaleWidth,scaleWidth,imagelocation // coindisplay(ix1));
coin2pic is HTMLImage("coin2pic", scaleWidth,2*scaleWidth*coinsselected[2],scaleWidth,scaleWidth,imagelocation // coindisplay(ix2));
coin3pic is HTMLImage("coin3pic", scaleWidth*2,2*scaleWidth*coinsselected[3],scaleWidth,scaleWidth,imagelocation // coindisplay(ix3));
coin4pic is HTMLImage("coin4pic", scaleWidth*3,2*scaleWidth*coinsselected[4],scaleWidth,scaleWidth,imagelocation // coindisplay(ix4));
coin5pic is HTMLImage("coin5pic", scaleWidth*4,2*scaleWidth*coinsselected[5],scaleWidth,scaleWidth,imagelocation // coindisplay(ix5));
coin6pic is HTMLImage("coin6pic", scaleWidth*5,2*scaleWidth*coinsselected[6],scaleWidth,scaleWidth,imagelocation // coindisplay(ix6));
coin7pic is HTMLImage("coin7pic", scaleWidth*6,2*scaleWidth*coinsselected[7],scaleWidth,scaleWidth,imagelocation // coindisplay(ix7));
coin8pic is HTMLImage("coin8pic", scaleWidth*7,2*scaleWidth*coinsselected[8],scaleWidth,scaleWidth,imagelocation // coindisplay(ix8));
*/

itempic_positions = [0.5, 1.8, 3.1, 4.4, 5.7, 7];
itempic is HTMLImage{
	name = "item" // str(i) // "pic",
	x = scaleWidth * itempic_positions[i],
	y = 5.5 * scaleWidth - 2 * scaleWidth * itemsselected[i],
	width = scaleWidth,
	height = scaleWidth,
	url = imagelocation // itemdisplay[i]
};
itempics is itempic{ i = 1..6 };

/*
item1pic is HTMLImage("item1pic",scaleWidth*0.5,5.5*scaleWidth-2*scaleWidth*itemsselected[1],scaleWidth,scaleWidth,imagelocation // itemdisplay(1));
item2pic is HTMLImage("item2pic", scaleWidth*1.8, 5.5*scaleWidth-2*scaleWidth*itemsselected[2],scaleWidth,scaleWidth,imagelocation // itemdisplay(2));
item3pic is HTMLImage("item3pic", scaleWidth*3.1, 5.5*scaleWidth-2*scaleWidth*itemsselected[3],scaleWidth,scaleWidth,imagelocation // itemdisplay(3));
item4pic is HTMLImage("item4pic", scaleWidth*4.4, 5.5*scaleWidth-2*scaleWidth*itemsselected[4],scaleWidth,scaleWidth,imagelocation // itemdisplay(4));
item5pic is HTMLImage("item5pic", scaleWidth*5.7, 5.5*scaleWidth-2*scaleWidth*itemsselected[5],scaleWidth,scaleWidth,imagelocation // itemdisplay(5));
item6pic is HTMLImage("item6pic", scaleWidth*7, 5.5*scaleWidth-2*scaleWidth*itemsselected[6],scaleWidth,scaleWidth,imagelocation // itemdisplay(6));
*/

/*
coin1text is Text(denomdisplay(ix1), 0.2*scaleWidth,1.5*scaleWidth);
coin2text is Text(denomdisplay(ix2), 1.2*scaleWidth,1.5*scaleWidth);
coin3text is Text(denomdisplay(ix3), 2.2*scaleWidth,1.5*scaleWidth);
coin4text is Text(denomdisplay(ix4), 3.2*scaleWidth,1.5*scaleWidth);
coin5text is Text(denomdisplay(ix5), 4.2*scaleWidth,1.5*scaleWidth);
coin6text is Text(denomdisplay(ix6), 5.2*scaleWidth,1.5*scaleWidth);
coin7text is Text(denomdisplay(ix7), 6.2*scaleWidth,1.5*scaleWidth);
coin8text is Text(denomdisplay(ix8), 7.2*scaleWidth,1.5*scaleWidth);
item1text is Text(pricedisplay(1, items), 0.6*scaleWidth,5*scaleWidth);
item2text is Text(pricedisplay(2, items), 1.9*scaleWidth,5*scaleWidth);
item3text is Text(pricedisplay(3, items), 3.2*scaleWidth,5*scaleWidth);
item4text is Text(pricedisplay(4, items), 4.5*scaleWidth,5*scaleWidth);
item5text is Text(pricedisplay(5, items), 5.8*scaleWidth,5*scaleWidth);
item6text is Text(pricedisplay(6, items), 7.1*scaleWidth,5*scaleWidth);
MyCoinsText is Text("Purse", 8.3*scaleWidth,0.5*scaleWidth, "blue", 18);
CoinsOfferedText is Text("Offered", 8.3*scaleWidth,2.5*scaleWidth, "red", 18);
MyItemsText is Text("Basket", 8.3*scaleWidth,4*scaleWidth, "red", 18);
ItemsOfferedText is Text("For Sale", 8.3*scaleWidth,6*scaleWidth, "blue", 18);
*/

## Action Definitions:

##coinpic_click is ??????
##action coinpicMove when coinpic_click{ i = 1..8} do {
##	if (coinpic_click) coinsselected[i] = 1 - coinsselected[i];
##}

##coinpicMove when coinpick_click {

##};

proc coin1picMove : coin1pic_click {
	if(coin1pic_click)
		coinsselected[1] = 1 - coinsselected[1];
}

proc coin2picMove : coin2pic_click {
	if(coin2pic_click)
		coinsselected[2] = 1 - coinsselected[2];
}

proc coin3picMove : coin3pic_click {
	if(coin3pic_click)
		coinsselected[3] = 1 - coinsselected[3];
}

proc coin4picMove : coin4pic_click {
	if(coin4pic_click)
		coinsselected[4] = 1 - coinsselected[4];
}

proc coin5picMove : coin5pic_click {
	if(coin5pic_click)
		coinsselected[5] = 1 - coinsselected[5];
}

proc coin6picMove : coin6pic_click {
	if(coin6pic_click)
		coinsselected[6] = 1 - coinsselected[6];
}

proc coin7picMove : coin7pic_click {
	if(coin7pic_click)
		coinsselected[7] = 1 - coinsselected[7];
}

proc coin8picMove : coin8pic_click {
	if(coin8pic_click)
		coinsselected[8] = 1 - coinsselected[8];
}

proc item1picMove : item1pic_click {
	if(item1pic_click)
		itemsselected[1] = 1 - itemsselected[1];
}

proc item2picMove : item2pic_click {
	if(item2pic_click)
		itemsselected[2] = 1 - itemsselected[2];
}

proc item3picMove : item3pic_click {
	if(item3pic_click)
		itemsselected[3] = 1 - itemsselected[3];
}

proc item4picMove : item4pic_click {
	if(item4pic_click)
		itemsselected[4] = 1 - itemsselected[4];
}

proc item5picMove : item5pic_click {
	if(item5pic_click)
		itemsselected[5] = 1 - itemsselected[5];
}

proc item6picMove : item6pic_click {
	if(item6pic_click)
		itemsselected[6] = 1 - itemsselected[6];
}

## Scoped versions of functions
listitems_single is (chosen[i]) ? onsale[i][1] : @;
listitems is listitems_single{ i = 1..onsale# };

## Function Definitions:
/*
func listitems {
	para onsale, chosen;
	auto result, i;	
	result = [];
	for (i=1; i<=onsale#; i++)
		if (chosen[i]) result = result // [onsale[i][1]];
 return result;
}
*/

costitems_single is (chosen[i]) ? onsale[i][2] : 0;
costitems is sum{ list = costitems_single{ i = 1..onsale#} };

/*
func costitems {
	para onsale, chosen;
	auto result, i;	
	result = 0;
	for (i=1; i<=onsale#; i++)
		if (chosen[i]) result = result + onsale[i][2];
 return result;
}
*/

moneyinhand_single is (chosen[i]) ? allcoins[i] : 0;
moneyinhand is sum{ list = moneyinhand_single{ i = 1..allcoins# }} / 100;

/*
func moneyinhand {
	para allcoins, chosen;
	auto result, i;	
	result = 0;
	for (i=1; i<=allcoins#; i++)
		if (chosen[i]) result = result + allcoins[i];
 return result/100;
}
*/

coindisplay = [
"GBP-1p-tails.gif",
"GBP-2-pence-tails.gif",
"GBP-5-pence-tails.gif",
"GBP-10-pence-tails.gif",
"GBP-20-pence-tails.jpg",
"GBP-50-pence-tails.jpg",
"GBP-1-pound-tails-england.gif",
"GBP-2-pounds-tails.gif"
];

/*
func coindisplay {
	para ix;
	if (ix==1) return "GBP-1p-tails.gif";
	if (ix==2) return "GBP-2-pence-tails.gif";
	if (ix==3) return "GBP-5-pence-tails.gif";
	if (ix==4) return "GBP-10-pence-tails.gif";
	if (ix==5) return "GBP-20-pence-tails.jpg";
	if (ix==6) return "GBP-50-pence-tails.jpg";
	if (ix==7) return "GBP-1-pound-tails-england.gif";
	if (ix==8) return "GBP-2-pounds-tails.gif";
}
*/

itemdisplay = [
"apple.png",
"grapes.png",
"orange.jpg",
"strawberry.jpg",
"bananas.jpg",
"pear.jpg"
];

/*
func itemdisplay {
	para ix, scaleWidth;
	if (ix==1) return "apple.png";
	if (ix==2) return "grapes.png";
	if (ix==3) return "orange.jpg";
	if (ix==4) return "strawberry.jpg";
	if (ix==5) return "bananas.jpg";
	if (ix==6) return "pear.jpg";
}
*/

denomdisplay = [
"1p",
"2p",
"5p",
"10p",
"20p",
"50p",
decodeHTML("&pound;1"),
decodeHTML("&pound;2")
];

/*
func denomdisplay {
	para ix;
	if (ix==1) return "1p";
	if (ix==2) return "2p";
	if (ix==3) return "5p";
	if (ix==4) return "10p";
	if (ix==5) return "20p";
	if (ix==6) return "50p";
	if (ix==7) return decodeHTML("&pound;1");
	if (ix==8) return decodeHTML("&pound;2");;
}
*/

pricedisplay is displaycurrency{ amount = items[i][2] };

/*
func pricedisplay {
	para ix,items;
	return displaycurrency(items[ix][2]);
}
*/

currency_inpence is 100 * amount;
currency_pounds is int(currency_inpence / 100);
currency_pence is round{ number = currency_inpence - currency_pounds*100};
displaycurrency is decodeHTML("&pound") // ((currency_pounds>0) ? str(currency_pounds) : "0") // ((currency_pence>0) ? "-" //  str(currency_pence)  // "p" : "");

/*
func displaycurrency {
	para amount;
	auto pounds, pence;
	pence = 100*amount;
	pounds = int (pence / 100);
	pence = round(pence - pounds*100);
	return decodeHTML("&pound;") // ((pounds>0) ? str(pounds) : "0") // ((pence>0) ? "-" //  str(pence)  // "p" : "");
}
*/

##displaycurrency ~> [pricedisplay];

/*
func listcoins {
	para allcoins, chosen;
	auto result, i;	
	result = [];
	for (i=1; i<=allcoins#; i++)
		if (chosen[i]) result = result // [allcoins[i]];
 return result;
}
*/

## Picture Definition:
picture is coinpics // itempics // cointexts // itemtexts // [MyCoinsText,CoinsOfferedText,MyItemsText,ItemsOfferedText];

/*
picture is [coin1pic,coin2pic,coin3pic,coin4pic,coin5pic,coin6pic,coin7pic,coin8pic, item1pic,item2pic,item3pic,item4pic,item5pic,item6pic,
coin1text,coin2text,coin3text,coin4text,coin5text,coin6text,coin7text,coin8text,item1text,item2text,item3text,item4text,item5text,item6text,
MyCoinsText,CoinsOfferedText,MyItemsText,ItemsOfferedText];
*/

## Auto calculation is turned on and the updating is fired
autocalc = 1;

## End of Auto-Generated Script

coinsselected = [0,0,0,0,0,0,0,0];
itemsselected = [0,0,0,0,0,0];

/*
ix1 is randomInteger(1,8);
ix2 is randomInteger(1,8);
ix3 is randomInteger(1,8);
ix4 is randomInteger(1,8);
ix5 is randomInteger(1,8);
ix6 is randomInteger(1,8);
ix7 is randomInteger(1,8);
ix8 is randomInteger(1,8);
*/

selection_single is randomInteger(1,8);
selection is selection_single{ i = 1..8 };

## revising the observables that use Text() definitions
## ... and moving the text beneath the coins to be more central

scaleWidth = 50;

cointext is Text{
	text = denomdisplay[selection[i]],
	x = ((i-1)+0.4) * scaleWidth,
	y = 1.5 * scaleWidth,
	size = scaleWidth/5
};
cointexts is cointext{ i = 1..8 };

/*
coin1text is Text(denomdisplay(ix1), 0.4*scaleWidth,1.5*scaleWidth,scaleWidth/5);
coin2text is Text(denomdisplay(ix2), 1.4*scaleWidth,1.5*scaleWidth,scaleWidth/5);
coin3text is Text(denomdisplay(ix3), 2.4*scaleWidth,1.5*scaleWidth,scaleWidth/5);
coin4text is Text(denomdisplay(ix4), 3.4*scaleWidth,1.5*scaleWidth,scaleWidth/5);
coin5text is Text(denomdisplay(ix5), 4.4*scaleWidth,1.5*scaleWidth,scaleWidth/5);
coin6text is Text(denomdisplay(ix6), 5.4*scaleWidth,1.5*scaleWidth,scaleWidth/5);
coin7text is Text(denomdisplay(ix7), 6.4*scaleWidth,1.5*scaleWidth,scaleWidth/5);
coin8text is Text(denomdisplay(ix8), 7.4*scaleWidth,1.5*scaleWidth,scaleWidth/5);
*/

itemtext_positions = [0.6, 1.9, 3.2, 4.5, 5.8, 7.1];
itemtext is Text{
	text = pricedisplay,
	x = itemtext_positions[i] * scaleWidth,
	y = 5 * scaleWidth,
	size = scaleWidth/5
};
itemtexts is itemtext{ i = 1..6 };

/*
item1text is Text(pricedisplay(1, items), 0.6*scaleWidth,5*scaleWidth,scaleWidth/5);
item2text is Text(pricedisplay(2, items), 1.9*scaleWidth,5*scaleWidth,scaleWidth/5);
item3text is Text(pricedisplay(3, items), 3.2*scaleWidth,5*scaleWidth,scaleWidth/5);
item4text is Text(pricedisplay(4, items), 4.5*scaleWidth,5*scaleWidth,scaleWidth/5);
item5text is Text(pricedisplay(5, items), 5.8*scaleWidth,5*scaleWidth,scaleWidth/5);
item6text is Text(pricedisplay(6, items), 7.1*scaleWidth,5*scaleWidth,scaleWidth/5);
*/

MyCoinsText is Text{
	text = "Purse",
	x = 8.3*scaleWidth,
	y = 0.5*scaleWidth,
	size = scaleWidth/4,
	fillcolour = "blue"
};

CoinsOfferedText is Text{
	text = "Offered",
	x = 8.3*scaleWidth,
	y = 2.5*scaleWidth,
	size = scaleWidth/4,
	fillcolour = "red"
};

MyItemsText is Text{
	text = "Basket",
	x = 8.3*scaleWidth,
	y = 4*scaleWidth,
	size = scaleWidth/4,
	fillcolour = "red"
};

ItemsOfferedText is Text{
	text = "For Sale",
	x = 8.3*scaleWidth,
	y = 6*scaleWidth,
	size = scaleWidth/4,
	fillcolour = "blue"
};

