/**
 * @title Bridging HTML/CSS
 * Copyright (c) 2014, Empirical Modelling Group
 * All rights reserved.
 *
 * See LICENSE.txt
 *
 * Functions for mapping between content or styling described by EDEN observables and syntactically
 * correct HTML mark-up or CSS.
 */

##Given an EDEN list of strings, returns a string containing HTML mark-up for formatting the given
##items as an unordered (bullet point) list.
func htmlBulletList {
	para p1;
	auto items, item, result, i;
	auto argc;
	argc = ${{ arguments.length }}$;

	if (argc == 1 && isList(p1)) {
		items = p1;
	} else {
		items = ${{ arguments }}$;
	}
	
	if (items# == 0) {
		return "";
	}
	
	result = "<ul>";
	
	for (i = 1; i <= items#; i++) {
		item = items[i];
		if (item == @) {
			item = "<span style=\"color: red\">undefined</style>";
		} else {
			item = str(item);
		}
		result = result // "<li style=\"margin-bottom: 7pt\">" // item // "</li>\n";
	}
	
	result = result // "</ul>\n";
	return result;
}

##Given an EDEN list of strings, returns a string containing HTML mark-up for
##formatting the given items as an ordered (numbered) list.
func htmlNumberedList {
	para p1,p2;
	auto items, item, result, i, numberingType, start;
	auto argc;
	argc = ${{ arguments.length }}$;

	if (argc == 0) {
		return "";
	} else if (argc <= 3 && ${{ arguments[arguments.length-1] }}$ == @) {
		return "";
	} else if (argc <= 3 && isList(${{ arguments[arguments.length-1] }}$)) {
		items = ${{ arguments[arguments.length-1] }}$;
		if (isString(p1)) {
			numberingType = p1;
			if (argc == 3) {
				if (isInt(p2)) {
					start = p2;
				} else if (p2 == @) {
					numberingType = "symbols(\"?\")";
				} else {
					error("htmlNumberedList: The second argument must be an integer, not a " // type(p2));
					return "";
				}
			}
		} else if (isInt(p1) && argc == 2) {
			start = p1;
		} else if (p1 == @) {
			numberingType = "symbols(\"?\")";		
		} else if (argc > 1) {
			error("htmlNumberedList: The first argument must be a string or an integer, not a " // type(p1));
			return "";
		}
	} else {
		if (argc >= 2 && (isString(p1) || p1 == @) && (isInt(p2) || p2 == @)) {
			numberingType = p1;
			start = p2;
			items = sublist(${{arguments}}$, 3);
		} else if (argc >= 1 && (isInt(p1) || p1 == @)) {
			start = p1;
			items = sublist(${{arguments}}$, 2);
		} else {
			items = ${{arguments}}$;
		}
	}
	
	if (items# == 0) {
		return "";
	}
	
	result = "<ol";
	if (start != @) {
		result = result // " start=\"" // str(start) // "\"";
	}
	if (${{ numberingType.match(/^[1aAiI]$/) }}$) {
		result = result // " type=\"" // numberingType // "\"";
	} else if (numberingType != @) {
		result = result // " style='list-style-type: " // numberingType // "'";
	}
	result = result + ">\n";
	
	for (i = 1; i <= items#; i++) {
		item = items[i];
		if (item == @) {
			item = "<span style=\"color: red\">undefined</style>";
		} else {
			item = str(item);
		}
		result = result // "<li style=\"margin-bottom: 7pt\">" // item // "</li>\n";
	}
	
	result = result // "</ol>\n";
	return result;
}

_option_global_css = false;

##This procedure binds the value of CSS property to an EDEN observable.  Any future changes to the
##value of the observable are instantaneously reflected by corresponding changes in the styling of
##HTML content.
##
##The first parameter (which is optional) specifies a CSS ID (without the initial # symbol) in which
##to limit the scope of the styling changes.  For example, a scope of "jspe_slide" would be used to
##apply styling to the content of JSPE slides.  The second parameter specifies a CSS selector name.
##If the selector name contains a reference to a CSS ID (#something) or a CSS class name (.something)
##then the scope parameter can be omitted.  Otherwise it must be specified unless the
##_option_global_css observable has been assigned the value true.  That is, by default, global stylistic changes
##that affect, for example, all <div> tags on the screen are not permitted because this might result in
##unforeseen effects that make the JS-EDEN environment unusable.  Even omitting a scope and using
##a class name selector may cause unwanted effects if the class name happens to be used internally
##by the environment's own HTML.  Nonetheless, no attempt is currently made to prohibit such a
##situation.  However, usage of the scope parameter is strongly encouraged except when deliberately
##trying to craft CSS that affects multiple JS-EDEN views.  If the selector name is the empty string
##and a scope has been specified then the styling is applied to the scoping container itself, e.g.
## #jspe_slide
##
##The third parameter specifies the CSS property name to affect and the forth parameter specifies
##the name of the EDEN observable that will contain the value of the CSS property.
##
##Note that for the purposes of CSS precedence rules, a single property binding results in the
##creation of a small stylesheet.  Stylesheets are added to the document in the order that the
##relevant bindXXX procedure invocations were called.  Each stylesheet is added such that is becomes
##the last child of the <head> element immediately after the relevent bindXXX procedure is called.
##Binding multiple observable names to the same combination of scope, selector and property name
##is not advised and will have undesirable effects.
proc bindCSSProperty {
	${{
		var scope, selector, property, obsName;
		
		if (arguments.length == 3) {
			scope = undefined;
			selector = arguments[0];
			property = arguments[1];
			obsName = arguments[2];		
		} else if (arguments.length == 4) {
			scope = arguments[0];
			selector = arguments[1];
			property = arguments[2];
			obsName = arguments[3];
		} else {
			eden.error(new Error("bindCSSProperty: This procedure requires a minimum of 3 arguments and a maximum of 4 arguments."), "error");
			return;
		}
		
		if (typeof(property) != "string") {
			eden.error(new Error("bindCSSProperty: The CSS property name must be a string, not a " + typeof(property)), "error");
			return;
		}
		if (obsName instanceof Symbol) {
			obsName = obsName.name.slice(1);
		} else if (typeof(obsName) != "string") {
			eden.error(new Error("bindCSSProperty: The observable reference must be a string or a pointer, not a " + typeof(obsName)), "error");
			return;
		}
		
		selector = putCSSSelectorIntoScope(scope, selector);
		if (selector === undefined) {
			//Disallowed or invalid selector.
			return;
		}
		
		var stylesheet;		
		var stylesheetID = "css-dependencies-" + selector.replace(/\s+/g, "$$") + "$$" + property;
		var styleElement = document.getElementById(stylesheetID);
		if (styleElement === null) {
			styleElement = document.createElement("style");
			styleElement.id = stylesheetID;
			var headElement = document.getElementsByTagName("head")[0];
			headElement.appendChild(styleElement);
			stylesheet = styleElement.sheet;
			stylesheet.insertRule(selector + "{ }", 0);
		} else {
			stylesheet = styleElement.sheet;
		}
		
		var cssDeclarations = stylesheet.cssRules[0].style;
		var updateFunction = function (obs, value) {
			if (value === undefined) {
				cssDeclarations.cssText = "";
			} else {
				cssDeclarations.cssText = property + ": " + value + ";";
			}
		};
		var obsSym = root.lookup(obsName);
		updateFunction("/" + obsName, obsSym.value());
		obsSym.addJSObserver("bind", updateFunction);
	}}$;
}

##bindCSSNumericProperty procedure is similar to the bindCSSProperty procedure, except that instead
##of the bound observable taking on string values like "12pt" the bound observable can instead take
##on numeric values (like 12) and the associated CSS property will be set using a scale that was
##previously selected at the time of binding the observable to the CSS.  That is, when this
##procedure is called "pt" might be specified to indicate that observable records the font size in
##typographic points.
proc bindCSSNumericProperty {
	${{
		var scope, selector, property, obsName, units;
		
		if (arguments.length == 4) {
			scope = undefined;
			selector = arguments[0];
			property = arguments[1];
			obsName = arguments[2];
			units = arguments[3];
		} else if (arguments.length == 5) {
			scope = arguments[0];
			selector = arguments[1];
			property = arguments[2];
			obsName = arguments[3];
			units = arguments[4];
		} else {
			eden.error(new Error("bindCSSNumericProperty: This procedure requires a minimum of 4 arguments and a maximum of 5 arguments."), "error");
			return;
		}
		
		if (typeof(property) != "string") {
			eden.error(new Error("bindCSSNumericProperty: The CSS property name must be a string, not a " + typeof(property)), "error");
			return;
		}
		if (obsName instanceof Symbol) {
			obsName = obsName.name.slice(1);
		} else if (typeof(obsName) != "string") {
			eden.error(new Error("bindCSSNumericProperty: The observable reference must be a string or a pointer, not a " + typeof(obsName)), "error");
			return;
		}
		if (typeof(units) != "string") {
			eden.error(new Error("bindCSSNumericProperty: The unit name must be a string, not a " + typeof(units)), "error");
			return;
		}
		
		selector = putCSSSelectorIntoScope(scope, selector);
		if (selector === undefined) {
			//Disallowed or invalid selector.
			return;
		}
		
		var stylesheet;		
		var stylesheetID = "css-dependencies-" + selector.replace(/\s+/g, "$$") + "$$" + property;
		var styleElement = document.getElementById(stylesheetID);
		if (styleElement === null) {
			styleElement = document.createElement("style");
			styleElement.id = stylesheetID;
			var headElement = document.getElementsByTagName("head")[0];
			headElement.appendChild(styleElement);
			stylesheet = styleElement.sheet;
			stylesheet.insertRule(selector + "{ }", 0);
		} else {
			stylesheet = styleElement.sheet;
		}
		
		var cssDeclarations = stylesheet.cssRules[0].style;
		var updateFunction = function (obs, value) {
			if (value === undefined) {
				cssDeclarations.cssText = "";
			} else if (/[+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?/.test(value)) {
				cssDeclarations.cssText = property + ": " + value + units + ";";
			} else {
				//values like auto and inherit
				cssDeclarations.cssText = property + ": " + value + ";";			
			}
		};
		var obsSym = root.lookup(obsName);
		updateFunction("/" + obsName, obsSym.value());
		obsSym.addJSObserver("bind", updateFunction);
	}}$;
}

##bindCSSRule creates a binding where the value of an observable specifies the complete contents
##to be inserted between a pair of { and } characters in the underlying stylesheet.  For example,
##the observable might take on a string value like "font-size: 12pt; color: red".
proc bindCSSRule {
	${{
		var scope, selector, obsName;
		
		if (arguments.length == 2) {
			scope = undefined;
			selector = arguments[0];
			obsName = arguments[1];
		} else if (arguments.length == 3) {
			scope = arguments[0];
			selector = arguments[1];
			obsName = arguments[2];
		} else {
			eden.error(new Error("bindCSSRule: This procedure requires a minimum of 2 arguments and a maximum of 3 arguments."), "error");
			return;
		}
		
		if (obsName instanceof Symbol) {
			obsName = obsName.name.slice(1);
		} else if (typeof(obsName) != "string") {
			eden.error(new Error("bindCSSRule: The observable reference must be a string or a pointer, not a " + typeof(obsName)), "error");
			return;
		}
		
		selector = putCSSSelectorIntoScope(scope, selector);
		if (selector === undefined) {
			//Disallowed or invalid selector.
			return;
		}
		
		var stylesheet;		
		var stylesheetID = "css-dependencies-" + selector.replace(/\s+/g, "$$");
		var styleElement = document.getElementById(stylesheetID);
		if (styleElement === null) {
			styleElement = document.createElement("style");
			styleElement.id = stylesheetID;
			var headElement = document.getElementsByTagName("head")[0];
			headElement.appendChild(styleElement);
			stylesheet = styleElement.sheet;
			stylesheet.insertRule(selector + "{ }", 0);
		} else {
			stylesheet = styleElement.sheet;
		}
		
		var cssDeclarations = stylesheet.cssRules[0].style;
		var updateFunction = function (obs, value) {
			if (value === undefined) {
				cssDeclarations.cssText = "";
			} else if (typeof(value) == "object") {
				var capital = /([A-Z])/g;
				var jsSyntax = /^\w*[A-Z]\w*$/;
				var declarations = "";
				for (var key in value) {
					if (typeof(value[key]) == "string") {
						var property;
						if (jsSyntax.test(key)) {
							property = key.replace(capital, function (match, capitalLetter) {
								return "-" + capitalLetter.toLowerCase();
							});
						} else {
							property = key;
						}
						declarations = declarations + property + ": " + value[key] + ";\n";
					}
				}
				cssDeclarations.cssText = declarations;
			} else {
				cssDeclarations.cssText = value;
			}
		};
		var obsSym = root.lookup(obsName);
		updateFunction("/" + obsName, obsSym.value());
		obsSym.addJSObserver("bind", updateFunction);
	}}$;
}

##Removes the connection between an observable name and a CSS stylesheet.  After calling this
##procedure future updates to the value of the specified observable will no longer cause changes to
##the styling of HTML.
proc unbind {
	${{
		if (arguments.length != 1) {
			eden.error(new Error("unbind: This procedure requires exactly 1 argument."), "error");
			return;
		}
		var obsSym;
		if (arguments[0] instanceof Symbol) {
			obsSym = arguments[0];
		} else if (typeof(arguments[0]) == "string") {
			obsSym = root.lookup(arguments[0]);
		} else {
			eden.error(new Error("unbind: The argument must be a string or a pointer, not a " + typeof(arguments[0])), "error");
			return;
		}
		obsSym.removeJSObserver("bind");
	}}$;
}

${{
	putCSSSelectorIntoScope = function (scope, selector) {
		var scopeSpecified;
		if (scope === undefined) {
			scopeSpecified = false;
		} else if (typeof(scope) != "string") {
			eden.error(new Error("Scope for CSS modifications must be a string, not a " + typeof(scope)), "error");
				return undefined;
		} else {
			scopeSpecified = !(/^\s*$/.test(scope));
		}

		if (typeof(selector) != "string") {
			eden.error(new Error("CSS selector must be a string, not a " + typeof(selector)), "error");
			return undefined;
		}
		
		var regExp = /^\s*(([^",]|("[^"]*"))+)(,|$)/g
		var match, individualSelector;
		var selectors = [];
		var authoringMode = root.lookup("_option_global_css").value();
		
		while ((match = regExp.exec(selector)) !== null) {
			individualSelector = match[1];
			if (/^((:not\(([^"]|("[^"]*"))*\))|[^":.#]|(\:[^n])|("[^"]*"))*[.#]/.test(individualSelector)) {
				selectors.push(individualSelector);
			} else if (scopeSpecified) {
				selectors.push("#" + scope + " " + individualSelector);
			} else if (authoringMode) {
				selectors.push(individualSelector);
			} else {
				eden.error(new Error("Cannot alter CSS globally for selector " + individualSelector +
					" when not in tool authoring mode (_option_global_css = false).  Please specify a scope in which to restrict the changes."),
					"error");
				return undefined;
			}
		}

		if (selectors.length == 0) {
			if (scopeSpecified && selector == "") {
				return "#" + scope;
			} else {
				eden.error(new Error("Invalid CSS selector specified."), "error");
				return undefined;
			}
		} else {
			return selectors.join(", ");
		}
	}
}}$;
