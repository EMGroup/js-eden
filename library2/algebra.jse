/**
 * @title Geometry Library
 * Copyright (c) 2013, Empirical Modelling Group
 * All rights reserved.
 *
 * See LICENSE.txt
 */

func centroid {
	para p1;
	auto points, x, y, i, nx, ny;
	auto argc;
	argc = ${{ arguments.length }}$;

	if (argc == 1 && isList(p1)) {
		points = p1;
	} else {
		points = ${{ arguments }}$;
	}

	nx = 0;
	ny = 0;
	for (i = 1; i <= points#; i++) {
		if (points[i] != @) {
			if (!isPoint(points[i])) {
				error("centroid: Item " // str(i) // " must be a Point, not a " // type(points[i]));
				return @;
			}
			if (points[i]["x"] != @) {
				if (x == @) {
					x = points[i]["x"];
				} else {
					x = x + points[i]["x"];
				}
				nx++;
			}
			if (points[i]["y"] != @) {
				if (y == @) {
					y = points[i]["y"];
				} else {
					y = y + points[i]["y"];
				}
				ny++;
			}
		}
	}
	if (nx != 0) {
		x = x / nx;
	}
	if (ny != 0) {
		y = y / ny;
	}
	return Point(x, y);
}

func rotatePoint {
	para point, theta, centre;
	auto translatedX, translatedY, rotatedX, rotatedY, cosTheta, sinTheta;
	auto argc;
	argc = ${{ arguments.length }}$;
	
	if (argc < 2 || argc > 3) {
		error("rotatePoint: This function requires at least 2 arguments and at most 3 arguments.");
		return @;	
	}
	if (argc == 2) {
		centre = Point(0, 0);
	}

	if (point == @ || theta == @ || centre == @) {
		return @;
	}

	if (!isPoint(point)) {
		error("rotatePoint: The first argument must be a Point, not a " // type(point));
		return @;
	} else if (!isNumber(theta)) {
		error("rotatePoint: The second argument must be a number, not a " // type(theta));
		return @;
	} else if (!isPoint(centre)) {
		error("rotatePoint: The centre of enlargement must be a Point, not a " // type(centre));
		return @;	
	} else if (point["x"] == @ || point["y"] == @ || centre["x"] == @ || centre["y"] == @) {
		return @;
	}

	##Theta is 90 minus the original theta.
	cosTheta = cos(theta);
	sinTheta = sin(-theta);
	translatedX = point["x"] - centre["x"];
	translatedY = point["y"] - centre["y"];

	rotatedX = translatedX * cosTheta - translatedY * sinTheta + centre["x"];
	rotatedY = translatedX * sinTheta + translatedY * cosTheta + centre["y"];
	return Point(rotatedX, rotatedY);
}

func scalePoint {
	para p1,p2,p3;
	auto point, scaleX, scaleY, centre, x, y;
	auto argc;
	argc = ${{ arguments.length }}$;

	if (argc < 2 || argc > 4) {
		error("scalePoint: This function requires at least 2 arguments and at most 3 arguments.");
		return @;	
	}
	if (argc == 2) {
		point = p1;
		scaleX = p2;
		scaleY = p3;
		centre = Point(0, 0);
	} else if (argc == 3) {
		point = p1;
		scaleX = p1;
		if (isPoint(p3)) {
			scaleY = scaleX;
			centre = p3;
		} else {
			scaleY = p3;
			centre = Point(0, 0);			
		}
	}

	if (point == @ || scaleX == @ || scaleY == @ || centre == @) {
		return @;
	}

	if (!isPoint(point)) {
		error("scalePoint: The first argument must be a Point, not a " // type(point));
		return @;
	} else if (!isNumber(scaleX)) {
		error("scalePoint: The second argument must be a number, not a " // type(scaleX));
		return @;
	} else if (!isNumber(scaleY)) {
		error("scalePoint: The third argument must be a number, not a " // type(scaleY));
		return @;
	} else if (!isPoint(centre)) {
		error("scalePoint: The centre of enlargement must be a Point, not a " // type(centre));
		return @;	
	}

	if (point["x"] == @ || centre["x"] == @) {
		x = @;
	} else {
		x = (point["x"] - centre["x"]) * scaleX + centre["x"];
	}
	if (point["y"] == @ || centre["y"] == @) {
		y = @;
	} else {
		y = (point["y"] - centre["y"]) * scaleY + centre["y"];
	}
	return Point(x, y);
}
