/**
 * @title List Library
 *  Copyright (c) 2014, Empirical Modelling Group
 * All rights reserved.
 *
 * See LICENSE.txt
 *
 * Functions that operate on lists.
 */

/**
 * Generate an array of size n filled with a default value.
 *   @param n Size of array to make.
 *   @param [default] Fill it with this value.
 *   @return New array of size n.
 *   @deprecated
 *   #library
 * 
 * If the first argument is undefined then the result is undefined.
 * If more than two arguments are provided then an error is raised.
 * #library #list
 */
func array {
	${{
		if (arguments.length == 0 || arguments.length > 2) {
			eden.error(new Error("array: This function requires at least 1 argument and at most 2 arguments."), "error");
			return undefined;			
		}
		
		var n = arguments[0];

		if (n === undefined) {
			return undefined;
		} else if (typeof(n) != "number" || !Number.isInteger(n)) {
			eden.error(new Error("array: The first argument must be an int, not a " + typeof(n)), "error");
			return undefined;
		}
		
		var arr = new Array(n);
		if (arguments[1] !== undefined) {
			for (var i = 0; i < n; i++) {
				arr[i] = arguments[1];
			}
		}
		return arr;
	}}$;
}

/**
 * Returns the position of first argument in the list if it is found somewhere
 * in the list given by the second argument, zero if it's not in the list or
 * undefined if the list is undefined.
 *
 * The optional third argument allows a initial portion of the list to be omitted
 * from the search.
 *
 * If the optional forth argument is true then the list is assumed to be in
 * alphabetical order, ascending numerical order or nested list lexicographic
 * order and a binary search algorithm will be used for increased efficiency,
 * otherwise a linear search will be used.
 * #library #string #list #search
 */
func positionInList {
	${{
		if (arguments.length < 2 || arguments.length > 4) {
			eden.error(new Error("positionInList: This function requires a minimum of 2 arguments and a maximum of 4 arguments."), "error");
			return undefined;
		}
		
		var searchValue = arguments[0];
		var list = arguments[1];
		var lowerBound = arguments[2]
		var isSorted = arguments[3];
		var low, high, middle, element;

		if (list === undefined) {
			return undefined;
		} else if (!Array.isArray(list)) {
			eden.error(new Error("positionInList: The second argument must be a a list, not a " + typeof(list)), "error");
			return undefined;
		} 

		if (lowerBound === undefined) {
			low = 0;
		} else if (!Number.isInteger(lowerBound) || lowerBound < 1) {
			eden.error(new Error("positionInList: The third argument must be a positive integer, not a " + typeof(lowerBound)), "error");
			return undefined;
		} else if (lowerBound > 0) {
			low = lowerBound - 1;
		} else {
			low = 0;
		}

		if (isSorted !== undefined && typeof(isSorted) != "boolean") {
			eden.error(new Error("positionInList: The fourth argument must be a Boolean, not a " + type(isSorted)), "error");
			return undefined;
		}

		high = list.length - 1;
		if (high == -1) {
			return 0;
		}

		if (isSorted) {
			while (low <= high) {
				middle = Math.floor((low + high) / 2);
				element = list[middle];
				if (element > searchValue) {
					high = middle - 1;
				} else if (element < searchValue) {
					low = middle + 1;
				} else {
					return middle + 1;
				}
			}
		} else if (Array.isArray(searchValue)) {
			for (var i = low; i <= high; i++) {
				if (arrayCompare(searchValue, list[i])) {
					return i + 1;
				}
			}
		} else if (low == 0) {
			return list.indexOf(searchValue) + 1;
		} else {
			for (var i = low; i <= high; i++) {
				if (list[i] == searchValue) {
					return i + 1;
				}
			}
		}
		return 0;
	}}$;
}

/**
 * Reverse a list.
 *   @param list
 *   @return Reverse of the list.
 *   #library #list
 */
func reverse {
	para list;
	auto result, i;
	auto argc;
	argc = ${{ arguments.length }}$;

	if (argc != 1) {
		error("reverse: This function requires exactly one argument.");
		return @;
	}
	if (list == @) {
		return @;
	} else if (type(list) != "list") {
		error("reverse: The argument must be a list, not a " // type(list));
		return @;
	}
	
	result = array(list#, @);
	for (i = 1; i <= list#; i++) {
		result[i] = list[list# - i + 1];
	}
	return result;
}

/**
 * Search a string or a list.
 *
 * This function is identical to indexOf except:
 *
 * It takes an additional parameter that specifies a custom comparison function
 * to use instead of the built-in less than operator.
 *
 * If the first argument is a string then it is only possible to search for a
 * single character, not an arbitrary substring.
 *   @param searchValue The value to search for.
 *   @param list The list to search
 *   @param compare A function pointer to use as comparator.
 *   @param [lowerBound]
 *   @param [isSorted]
 *   @return Index of the value if found.
 *   #library #list #string
 */
func search {
	para searchValue, list, compare, lowerBound, isSorted;
	auto low, high, middle, relativeOrder, element, i, haystackType;
	auto argc;
	argc = ${{ arguments.length }}$;

	if (argc < 3 || argc > 5) {
		error("search: this function requires a minimum of 3 arguments and a maximum of 5 arguments.");
		return @;
	}

	if (list == @) {
		return @;
	}

	haystackType = type(list);
	if (haystackType == "string") {
		if (type(searchValue) != "string") {
			error("search: the first argument is a string so the second argument must also be a string and not a " // type(searchValue));
			return @;
		}
		if(searchValue# > 1) {
			error("search: search can only find a character within a string, not a string of length " // str(searchValue#));
			return @;
		}
	} else if (haystackType != "list") {
		error("indexOf: the first argument must be a string or a list, not a " // haystackType);
		return @;
	}

	high = list#;
	if (high == 0) {
		return 0;
	}

	if (lowerBound == @) {
		low = 1;
	} else {
		low = lowerBound;
	}

	if (isSorted) {
		while (low <= high) {
			middle = int((low + high) / 2);
			element = list[middle];
			relativeOrder = compare(element, searchValue);
			if (relativeOrder > 0) {
				high = middle - 1;
			} else if (relativeOrder < 0) {
				low = middle + 1;
			} else {
				return middle;
			}
		}
	} else {
		for (i = low; i <= high; i++) {
			if (compare(list[i], searchValue) == 0) {
				return i;
			}
		}
	}
	return 0;
}

/**
 * Returns the list equal to the first argument sorted according to the
 * collation order specified by the second argument.  Valid values for the
 * second parameter are:
 *
 *  * @ - Return the original list without sorting the items.
 *  * "ascending" - Sort the items in ascending order according to the values returned by
 *      JavaScript's less than (<) and greater than (>) operators.  Lists of
 *      strings will be sorted alphabetically, lists of numbers will be sorted
 *      numerically and lists of lists will be sorted lexicographically.
 *  * "descending" - Sort the items in descending order according to the values returned by
 *      JavaScript's less than (<) and greater than (>) operators.
 *  * a function - The function should take two parameters and return a positive
 *      value if the first argument should be appear after the second argument
 *      in the result list, a negative value if it should appear before and zero
 *      if the two arguments are equal.
 *
 * If the second parameter is omitted then the result is the same as if 1 was
 * specified.
 *
 * If one of the list items is undefined then the undefined value will remain in
 * in the same position in the output list and the two sublists formed by
 * considering the items before and after the undefined value will be sorted
 * separately.
 *   @param list The list to be sorted.
 *   @param [order] Change direction or sorting function.
 *   @return Sorted list.
 *   #library #list
 */
func sort {
	${{ 
		if (arguments.length == 0 || arguments.length > 2) {
			eden.error(new Error("sort: this function requires a minimum of 1 argument and a maximum of 2 arguments."), "error");
			return undefined;		
		}
		var values = arguments[0];
		var sortingSingleString;
		if (values === undefined) {
			return undefined;
		} else if (typeof(values) == "string") {
			values = values.split("");
			sortingSingleString = true;
		} else if (!Array.isArray(values)) {
			eden.error(new Error("sort: first argument must be a list or a string, not a " + typeof(values) + "."), "error");
			return undefined;
		} else {
			values = values.slice();
			sortingSingleString = false;
		}
		
		var sortFunction;
		if (arguments.length < 2) {
			sortFunction = "ascending";
		} else {
			sortFunction = arguments[1];
		}
		
		if (sortFunction === undefined) {
			return values;
		} else if (sortFunction == "ascending") {
			if (sortingSingleString) {
				sortFunction = undefined;
			} else {
				sortFunction = function (a, b) {
					if (a > b) {
						return 1;
					} else if (a < b) {
						return -1;
					} else {
						return 0;
					}
				}
			}
		} else if (sortFunction == "descending") {
			sortFunction = function (a, b) {
				if (a > b) {
					return -1;
				} else if (a < b) {
					return 1;
				} else {
					return 0;
				}
			}
		} else if (typeof(sortFunction) != "function") {
			eden.error(new Error("sort: unknown collation order " + sortFunction), "error");
			return undefined;
		}
		
		if (sortingSingleString) {
			return values.sort(sortFunction).join("");
		} else {
			var begin = 0;
			var sorted, partition;
			for (var i = 0; i < values.length; i++) {
				if (values[i] === undefined) {
					partition = values.slice(begin, i);
					partition.sort(sortFunction);
					if (sorted === undefined) {
						sorted = partition;
					} else {
						sorted = sorted.concat(partition);
					}
					sorted.push(undefined);
					begin = i + 1;
				}
			}

			partition = values.slice(begin, values.length);
			partition.sort(sortFunction);
			if (sorted === undefined) {
				sorted = partition;
			} else {
				sorted = sorted.concat(partition);
			}
			return sorted;
		}
	}}$;
}

/**
 * This function incorporates both the rules specified by the EDEN Language
 * Guide and JavaScript's rules.
 *
 * sublist(list, from, to)
 *
 * If from > to then the result is [] (from the EDEN Language Guide).
 *
 * If to is greater than the length of the list then the result is padded with
 * a required number of undefined elements (from the EDEN Language Guide).
 *
 * If list is undefined then the result is undefined, which is following what
 * I believe is a general JS-EDEN design principle.  This behaviour is
 * inconsistent with tkeden however.  Nevertheless the Language Guide doesn't
 * explicitly say that an implementation must raise an error.
 *
 * The Language Guide says that the user should not provide a from value less than 1.
 * tkeden produces an error in this case.  The Language Guide suggests that the
 * user is at fault for calling the function with an argument outside of the
 * range permitted by the specification and again the specification does not
 * explicitly demand that the interpreter produces an error message in this case.
 * If one applies a formal methods viewpoint then calling a function with an
 * unsatisfied precondition permits the function's author to handle it in any
 * way that they choose.  If from is less than zero then this implementation applies
 * the JavaScript convention that negative numbers refer to positions counted
 * backward from the end of the list, so the last element of the list can be
 * referred to using the index -1, the penultimate element as -2, etc.  If from
 * is zero and list is defined then an error is raised.  Similarly, if from is
 * negative then this implementation allows to to be negative too, with the same
 * counting back from the end of the list semantics applied to both from and to.
 *
 * If to is undefined then the end of the list is used as the limit, which is another
 * JavaScript rule.  If from is undefined then the results are the same
 * as when from is 1 except that to can be negative and have the counting back
 * from the end of the list semantics.  This is my own rule to mediate the
 * tension between JavaScript's rules and EDEN's rules.
 *
 * If to is omitted then the result is the same as when it is explicitly
 * specified as undefined.
 *
 * In conclusion this function implements EDEN's sublist function with several
 * extensions that ascribe meaningful results in cases when tkeden would baulk
 * with an error messge.
 *   @param list The source list.
 *   @param from Start index (inclusive).
 *   @param [to] Optional end, or defaults to end of list. Can be negative.
 *   @return The sublist.
 *   #library #list #string
 */
func sublist {
	${{
		if (arguments.length < 2 || arguments.length > 3) {
			eden.error(new Error("substr: this function requires a minimum of 2 arguments and a maximum of 3 arguments."), "error");
			return undefined;
		}

		var list = arguments[0];
		var from = arguments[1];
		var to = arguments[2];
		
		if (list === undefined) {
			return undefined;
		}
		if (!Array.isArray(list)) {
			eden.error(new Error("sublist: expected list but got " + typeof(list)), "error");
			return undefined;
		}
		if (from === undefined) {
			from = 1;
		} else if (from > to) {
			return [];
		}
		if (from > 0) {
			from = from - 1;
		} else if (from == 0) {
			eden.error(new Error("sublist: from cannot be 0."), "error");
			return undefined;
		}
		if (to == 0) {
			to = list.length;
		}
		
		var result = list.slice(from, to);
		
		if (to > list.length) {
			result = result.concat(new Array(to - list.length));
		}
		
		return result;
	}}$;
}

/**
 * Returns a list with the first item removed.
 *   @param list Source list
 *   @return The list minus the first item.
 *   #library #list #string
 */
func tail {
	para p1;
	auto argc;
	argc = ${{ arguments.length }}$;

	if (argc != 1) {
		error("tail: This function requires exactly 1 argument.");
		return @;
	} else if (p1 == @) {
		return @;
	} else if (!isList(p1)) {
		error("tail: The argument must be a list, not a " // type(p1));
		return @;
	} else if (p1# == 0) {
		error("tail: The empty list does not have a tail.");
		return @;
	} else {
		return sublist(p1, 2, p1#);
	}
}

/**
 * Removes duplicate values from a list
 * @param list Source list
 * @return The list with duplicate values removed
 * 
 * #library #list #duplicates
 *
 */

func unique{
	para inList;
	auto argc;
	argc = ${{ arguments.length }}$;
	if(argc != 1){
		error("tail: This function requires exactly 1 argument.");
		return @;
	}
	${{
		var inList = arguments[0];
inList = inList.filter( function( item, index, inputArray ) {
           return inputArray.indexOf(item) == index;
    });
		return inList;
	}}$;
}