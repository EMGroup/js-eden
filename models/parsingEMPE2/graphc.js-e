include("models/graphPrototype/run.js-e");
mygraph is Graph("mygraph");

func ctxy{

     para x,y,cpath;
     auto result;
     result =0;
	 
	 for(i=1;i<cpath#;i++)
	 {if ((cpath[i]==x)&&(cpath[i+1]==y)) 
		result++;
	 }
	 return result;

}

func defaultcolour{

para begin, endix,ls;
auto i, symbol,result;
for(i=1; i<=ls#; i++) {
 
 if (ls[i][3]==endix)
  {symbol = ls[i][2];
   break;
 }
}
  if ((symbol=="TABLEID")||(symbol=="ID"))
  result = "lightgreen";
 else if (symbol == "ATTRID")
  result = "violet";
 else if ((symbol=="GT")||(symbol=="LT")||(symbol=="EQ")||(symbol=="NEQ"))
  result= "lightblue";
 else if (symbol=="comparator")
 result = "pink";
 else if ((symbol=="JOIN")||(symbol=="UNION")||(symbol=="DIFF"))
 result = "red";
 else if (symbol=="boolexpr")
 result = "purple";
 else if (symbol == "expr")
 result = "blue";
 else if ((symbol =="COMMA")||(symbol=="BRA")||(symbol=="KET"))
 result = "grey";
 else if ((symbol == "attr_list")||(symbol == "VAL"))
 result = "turquoise ";
 else if (symbol == "$end")
 result ="green";
 else if ((symbol == "PROJECT")||(symbol=="func"))
 result = "gold";
 else result = "";
 
return result;
}

func midpoint{
${{
   var pt = [1/2*(arguments[0].x1+arguments[0].x2),1/2*(arguments[0].y1+arguments[0].y2)];
   return pt;

}}$;
}
func getlscomp {
  return $1[$2];
}

func strminus{
para symbol;
  if (symbol=="$end")
  return "$";
  else if (symbol=="UNION")
  return"+";
  else if (symbol=="JOIN")
  return ".";
  else if (symbol=="expr")
  return "e";
  else if (symbol=="DIFF")
  return "-";
  else if (symbol=="SELECT")
  return ":";
  else if (symbol=="PROJECT")
  return "%";
  else if (symbol=="COMMA")
  return ",";
  else if (symbol=="EQ")
  return "=";
  else if (symbol=="GT")
  return ">";
  else if (symbol=="LT")
  return "<";
  else if (symbol=="NEQ")
  return "!=";
  else if (symbol=="attr_list")
  return "l";
  else if ((symbol=="BRA")||(symbol=="LPAREN"))
  return "(";
  else if ((symbol=="KET")||(symbol=="RPAREN"))
  return ")";
  else if ((symbol=="TABLEID")||(symbol=="ID"))
  return "i";
  else if (symbol=="VAL")
  return "v";
  else if (symbol=="comparator")
  return "c";
  else if (symbol=="ATTRID")
  return "a";
  else if (symbol=="boolexpr")
  return "b";
  else if (symbol=="func")
  return "f";
  else
  return symbol;
}


func makestacktable{
	para stack;
	result="<table border=\"1\"> <tr><td style=\"height: 16px; \">  stack </td></tr>";
   for(i=1;i<=stack#;i++)
   {

   result = result//"<tr><td style=\"height: 16px; \">"//" "//stack[i]//" "//"</tr></td>"//"\n";
   }
   result = result//"</tr>"//"\n"//"</table>";
   return result;
 }
 
func makevstacktable{
	para stack;
	result="<table border=\"1\"> <tr><td style=\"height: 16px; \">  value </td></tr>";
   for(i=1;i<=stack#;i++)
   {

   result = result//"<tr><td style=\"height: 16px; \">"//" "//stack[i]//" "//"</tr></td>"//"\n";
   }
   result = result//"</tr>"//"\n"//"</table>";
   return result;
 }

func makeinputstrtable{
	para str;
	result="<table border=\"1\"> <tr><th style=\"height: 16px; \"> Input String : </th><th style=\"height: 16px; \"> "//" "// str //" </th></tr>";
	return result;
}

func makeinputtokenstable{
	para str;
	result="<table border=\"1\"> <tr><th style=\"height: 16px; \"> Input Tokens : </th><th style=\"height: 16px; \"> "// " "//str //"</th></tr>";
	return result;
}

func makenextsymboltable{
	para str;
	result="<table border=\"1\"> <tr><th style=\"height: 16px; \"> Next Symbol : </th><th style=\"height: 16px; \"> "// " "//str //"</th></tr>";
	return result;
}
edgeLabels=[];
edgeLabelStr="";
proc makeEdgeLabel{
	para n1,n2;
	auto i,symbol,strn1n2,transfound;
	i=1;
	transfound=0;
	if(n1==0)
	index=12;
	else index=n1;
	strn1n2="s"//str(n1)//"s"//str(n2);
	while ((i<=numberOfSyms)&&(!transfound)) {
         if (transitions[index][i][3]==n2) 
	       {transfound = 1;}
         else i++;
	}
	if(transfound==1)
	symbol= strminus(transitions[index][i][2]);
	execute("lab"//strn1n2//" is Text("//"\""//symbol//"\""//",getlscomp(midpoint(l"//strn1n2//"),1),getlscomp(midpoint(l"//strn1n2//"),2),col"//strn1n2//");");
	if(edgeLabelStr !="")
	execute("edgeLabelStr= edgeLabelStr"//"\//"//"\",\""//"\//"//"\"lab\""//"\//"//"\""//strn1n2//"\""//";");
	if(edgeLabelStr=="")
	execute("edgeLabelStr= edgeLabelStr"//"\//"//"\"lab\""//"\//"//"\""//strn1n2//"\""//";");
	execute("edgeLabels is ["//edgeLabelStr//"];");
}
/*
func existLabel{
para lab, lablist;
auto i,result;
result=0;
for(i=1;i<=lablist#;i++)
{
 if (lablist[i]==lab)
{
 
  result=1;
  }
}
return result;
}
*/
nodeLabels=[];
nodeLabelStr="";
proc makeNodeLabel{
	para n1;
	strn1 = "s"//str(n1);
	execute("lab"//strn1//" is Text("//"\""//strn1//"\""//",p"//strn1//"x,p"//strn1//"y,"//"\""//"black"//"\""//");");
	if(nodeLabelStr !="")
	execute("nodeLabelStr = nodeLabelStr"//"\//"//"\",\""//"\//"//"\"lab\""//"\//"//"\""//strn1//"\""//";");
	if(nodeLabelStr=="")
	execute("nodeLabelStr = nodeLabelStr"//"\//"//"\"lab\""//"\//"//"\""//strn1//"\""//";");
	execute("nodeLabels is ["//nodeLabelStr//"];");
}

proc graphScale: graphscale{
for(i=1;i<=numberOfNodes;i++){
execute("ps"//str(i)//"x = graphscale*ps"//str(i)//"x;");
execute("ps"//str(i)//"y = graphscale*ps"//str(i)//"y;");
}
}

func defaultcolour{

para begin, endix,ls;
auto i, symbol,result;
for(i=1; i<=ls#; i++) {
 
 if (ls[i][3]==endix)
  {symbol = ls[i][2];
   break;
 }
}
  if ((symbol=="TABLEID")||(symbol=="ID"))
  result = "lightgreen";
 else if (symbol == "ATTRID")
  result = "violet";
 else if ((symbol=="GT")||(symbol=="LT")||(symbol=="EQ")||(symbol=="NEQ"))
  result= "lightblue";
 else if (symbol=="comparator")
 result = "pink";
 else if ((symbol=="JOIN")||(symbol=="UNION")||(symbol=="DIFF"))
 result = "red";
 else if (symbol=="boolexpr")
 result = "purple";
 else if (symbol == "expr")
 result = "blue";
 else if ((symbol =="COMMA")||(symbol=="BRA")||(symbol=="KET")||(symbol=="LPAREN")||(symbol=="RPAREN"))
 result = "grey";
 else if ((symbol == "attr_list")||(symbol == "VAL"))
 result = "turquoise ";
 else if (symbol == "$end")
 result ="green";
 else if ((symbol == "PROJECT")||(symbol=="func"))
 result = "gold";
 else result = "";
 
return result;
}

picture is nodes//edges//nodeLabels//edgeLabels;
buttonpoint  is  [10,100];

isapply is (currrule=="")? 0:1;
rules=["","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"];
selectRules is Combobox("rule",rules,buttonpoint[1]+100,buttonpoint[2]+30,1);
applyRule is Button("apprule","Apply Rule",buttonpoint[1],buttonpoint[2]+30,isapply);
nextstep is Button("nextstep","Next Step", buttonpoint[1],buttonpoint[2],1);
showInputstr is makeinputstrtable(inputstr);
Inputstrtable is Div("Inputstrtable",10,10,1000,40,showInputstr );
Manualexe is Div("Manualexe",10,50,210,90,"<table border=\"1\"> <tr><th style=\"height: 16px; \">Manual Executions :</th></tr>");
ResetButton is Button("Reset","Reset",buttonpoint[1]+200,buttonpoint[2],1);
showInputtokens is makeinputtokenstable(InputText);

Inputtokenstable is Div("Inputtokenstable",10,buttonpoint[2]+100,1000,buttonpoint[2]+140,showInputtokens );
shownextsymbol is makenextsymboltable(nextsymbol);
nextsymboltable is Div("nextsymboltable",10,buttonpoint[2]+150,200,buttonpoint[2]+190,shownextsymbol);

showOutput is (currstate==5)? "<table border=\"1\"> <tr><th style=\"height: 16px; \"> Output : </th><th style=\"height: 16px; \"> "//inputtvals[1]//"</th></tr>" : "<table border=\"1\"> <tr><th style=\"height: 16px; \"> Output : </th></tr>";
Outputtable is Div("outputtable",10,buttonpoint[2]+200,1000,buttonpoint[2]+240,showOutput);

showvaluestack is makevstacktable(sublist(inputtvals,1,j));
showCurrstack is makestacktable(currstack);
stackTable is Div("stacktable",10,10,500,1000,showCurrstack );
valueTable is Div("valuetable",100,10,500,1000,showvaluestack);

func makegrammartable{
	para prules;
	result="<table border=\"1\"> <tr><td> Grammar Rules </td></tr>";
  for(i=1;i<=prules#;i++)
   {

   result = result//"<tr><td>"//" "//prules[i]//" "//"</tr></td>"//"\n";
   }
   result = result//"</tr>"//"\n"//"</table>";
   return result;
 }
grammartable is Div("grammartable",10,10,500,1000,makegrammartable(parsingrules));

picture3=[];
proc drawPicture3: picture3 {
	CanvasHTML5_DrawPicture("view_3","picture3");


}
picture3 is [grammartable];


picture4 =[];
proc drawPicture4: picture4 {
	CanvasHTML5_DrawPicture("view_4","picture4");


}
picture4 is [stackTable,valueTable];
picture5 =[];
proc drawPicture5: picture5 {
	CanvasHTML5_DrawPicture("view_5","picture5");


}
picture5 is [selectRules,applyRule,Manualexe,Inputstrtable,Inputtokenstable,nextstep,Outputtable,ResetButton,nextsymboltable];
_view_inputwindow_x=10;
_view_inputwindow_y=130;
_view_inputwindow_width=350;
_view_inputwindow_height=200;
_view_view_4_x=10;
_view_view_4_y=550;
_view_view_4_width=200;
_view_view_4_height=400;

_view_view_5_x=400;
_view_view_5_y=780;
_view_view_5_height=400;
_view_view_5_width=380;
_view_view_3_x=800;
_view_view_3_y=780;
_view_view_3_height=400;
_view_view_3_width=200;