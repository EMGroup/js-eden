graphscale=1.0;
mygraph is Graph("mygraph");






addNode(mygraph,"s0");
addNode(mygraph,"s1");
addNode(mygraph,"s2");
addNode(mygraph,"s3");
addNode(mygraph,"s4");
addNode(mygraph,"s5");
addNode(mygraph,"s6");
addNode(mygraph,"s7");
addNode(mygraph,"s8");
addNode(mygraph,"s9");
addNode(mygraph,"s10");
addNode(mygraph,"s11");
addNode(mygraph,"s12");
addNode(mygraph,"s13");
addNode(mygraph,"s14");
addNode(mygraph,"s15");
addNode(mygraph,"s16");
addNode(mygraph,"s17");
addNode(mygraph,"s18");
addNode(mygraph,"s19");
addNode(mygraph,"s20");
addNode(mygraph,"s21");
addNode(mygraph,"s22");
addNode(mygraph,"s23");
addNode(mygraph,"s24");
addNode(mygraph,"s25");
addNode(mygraph,"s26");
addNode(mygraph,"s27");
addNode(mygraph,"s28");
addNode(mygraph,"s29");

addEdge(mygraph,"s0","s3");
addEdge(mygraph,"s0","s2"); 
addEdge(mygraph,"s0","s1"); 
addEdge(mygraph,"s26","s29"); 
addEdge(mygraph,"s25","s28"); 
addEdge(mygraph,"s20","s27"); 
addEdge(mygraph,"s18","s10"); 
addEdge(mygraph,"s17","s10"); 
addEdge(mygraph,"s17","s9"); 
addEdge(mygraph,"s16","s26"); 
addEdge(mygraph,"s13","s25"); 
addEdge(mygraph,"s13","s24"); 
addEdge(mygraph,"s13","s22"); 
addEdge(mygraph,"s13","s23"); 
addEdge(mygraph,"s13","s21"); 
addEdge(mygraph,"s12","s20"); 
addEdge(mygraph,"s12","s13"); 
addEdge(mygraph,"s12","s12"); 
addEdge(mygraph,"s10","s19"); 
addEdge(mygraph,"s10","s2"); 
addEdge(mygraph,"s10","s1"); 
addEdge(mygraph,"s9","s18"); 
addEdge(mygraph,"s9","s2"); 
addEdge(mygraph,"s9","s1"); 
addEdge(mygraph,"s8","s17"); 
addEdge(mygraph,"s8","s2"); 
addEdge(mygraph,"s8","s1"); 
addEdge(mygraph,"s7","s16"); 
addEdge(mygraph,"s7","s15"); 
addEdge(mygraph,"s6","s14"); 
addEdge(mygraph,"s6","s13");
addEdge(mygraph,"s6","s12"); 
addEdge(mygraph,"s4","s10"); 
addEdge(mygraph,"s4","s9");
addEdge(mygraph,"s4","s8"); 
addEdge(mygraph,"s4","s7"); 
addEdge(mygraph,"s4","s6"); 
addEdge(mygraph,"s4","s11");
addEdge(mygraph,"s3","s10");
addEdge(mygraph,"s3","s9"); 
addEdge(mygraph,"s3","s8"); 
addEdge(mygraph,"s3","s7"); 
addEdge(mygraph,"s3","s6"); 
addEdge(mygraph,"s3","s5"); 
addEdge(mygraph,"s1","s4"); 
addEdge(mygraph,"s1","s2"); 
addEdge(mygraph,"s1","s1");


func ctxy{

     para x,y,cpath;
     auto result;
     result =0;
	 
	 for(i=1;i<cpath#;i++)
	 {if ((cpath[i]==x)&&(cpath[i+1]==y)) 
		result++;
	 }
	 return result;

}


cts0s1 is ctxy(0,1,currpath);
cts0s2 is ctxy(0,2,currpath);
cts0s3 is ctxy(0,3,currpath);
cts26s29 is ctxy(26,29,currpath);
cts25s28 is ctxy(25,28,currpath);
cts20s27 is ctxy(20,27,currpath);
cts18s10 is ctxy(18,10,currpath);
cts17s10 is ctxy(17,10,currpath);
cts17s9 is ctxy(17,9,currpath);
cts16s26 is ctxy(16,26,currpath);
cts13s25 is ctxy(13,25,currpath);
cts13s24 is ctxy(13,24,currpath);
cts13s22 is ctxy(13,22,currpath);
cts13s21 is ctxy(13,21,currpath);
cts13s23 is ctxy(13,23,currpath);
cts12s20 is ctxy(12,20,currpath);
cts12s13 is ctxy(12,13,currpath);
cts10s11 is ctxy(10,11,currpath);
cts12s12 is ctxy(12,12,currpath);
cts10s19 is ctxy(10,19,currpath);
cts10s2 is ctxy(10,2,currpath);
cts10s1 is ctxy(10,1,currpath);
cts9s18 is ctxy(9,18,currpath);
cts9s2 is ctxy(9,2,currpath);
cts9s1 is ctxy(9,1,currpath);
cts8s17  is ctxy(8,17,currpath);
cts8s2 is ctxy(8,2,currpath);
cts8s1 is ctxy(8,1,currpath);
cts7s16 is ctxy(7,16,currpath);
cts7s15 is ctxy(7,15,currpath);
cts6s14 is ctxy(6,14,currpath);
cts6s13 is ctxy(6,13,currpath);
cts6s12 is ctxy(6,12,currpath);
cts4s10 is ctxy(4,10,currpath);
cts4s9 is ctxy(4,9,currpath);
cts4s8 is ctxy(4,8,currpath);
cts4s7 is ctxy(4,7,currpath);
cts4s6 is ctxy(4,6,currpath);
cts4s11 is ctxy(4,11,currpath);
cts3s10 is ctxy(3,10,currpath);
cts3s9 is ctxy(3,9,currpath);
cts3s8  is ctxy(3,8,currpath);
cts3s7 is ctxy(3,7,currpath);
cts3s6 is ctxy(3,6,currpath);
cts3s5 is ctxy(3,5,currpath);
cts1s4 is ctxy(1,4,currpath);
cts1s2 is ctxy(1,2,currpath);
cts1s1 is ctxy(1,1,currpath);

func defaultcolour{

para begin, endix,ls;
auto i, symbol,result;
for(i=1; i<=ls#; i++) {
 
 if (ls[i][3]==endix)
  {symbol = ls[i][2];
   break;
 }
}
  if (symbol=="TABLEID")
  result = "lightgreen";
 else if (symbol == "ATTRID")
  result = "violet";
 else if ((symbol=="GT")||(symbol=="LT")||(symbol=="EQ")||(symbol=="NEQ"))
  result= "lightblue";
 else if (symbol=="comparator")
 result = "pink";
 else if ((symbol=="JOIN")||(symbol=="UNION")||(symbol=="DIFF"))
 result = "red";
 else if (symbol=="boolexpr")
 result = "purple";
 else if (symbol == "expr")
 result = "blue";
 else if ((symbol =="COMMA")||(symbol=="BRA")||(symbol=="KET"))
 result = "grey";
 else if ((symbol == "attr_list")||(symbol == "VAL"))
 result = "turquoise ";
 else if (symbol == "$end")
 result ="green";
 else if (symbol == "PROJECT")
 result = "gold";
 else result = "";
 
return result;
}


cols0s3 is cts0s3>0 ? "black": defaultcolour(0,3,transitions[30]);
cols0s2 is cts0s2>0 ? "black": defaultcolour(0,2,transitions[30]);
cols26s29 is cts26s29>0 ? "black": defaultcolour(26,29,transitions[26]);
cols0s1 is cts0s1>0 ? "black": defaultcolour(0,1,transitions[30]);
cols25s28 is cts25s28>0 ? "black": defaultcolour(25,28,transitions[25]);
cols20s27 is cts20s27>0 ? "black": defaultcolour(20,27,transitions[20]);
cols18s10 is cts18s10>0 ? "black": defaultcolour(18,10,transitions[18]);
cols17s10 is cts17s10>0 ? "black": defaultcolour(17,10,transitions[17]);
cols17s9 is cts17s9>0 ? "black": defaultcolour(17,9,transitions[17]);
cols16s26 is cts16s26>0 ? "black": defaultcolour(16,26,transitions[16]);
cols13s25 is cts13s25>0 ? "black": defaultcolour(13,25,transitions[13]);
cols13s24 is cts13s24>0 ? "black": defaultcolour(13,24,transitions[13]);
cols13s22 is cts13s22>0 ? "black": defaultcolour(13,22,transitions[13]);
cols13s23 is cts13s23>0 ? "black": defaultcolour(13,23,transitions[13]);
cols13s21 is cts13s21>0 ? "black": defaultcolour(13,21,transitions[13]);
cols12s20 is cts12s20>0 ? "black": defaultcolour(12,20,transitions[12]);
cols12s13 is cts12s13>0 ? "black": defaultcolour(12,13,transitions[12]);
cols12s12 is cts12s12>0 ? "black": defaultcolour(12,12,transitions[12]);
cols10s19 is cts10s19>0 ? "black": defaultcolour(10,19,transitions[10]);
cols10s2 is cts10s2>0 ? "black": defaultcolour(10,2,transitions[10]);
cols10s1 is cts10s1>0 ? "black": defaultcolour(10,1,transitions[10]);
cols9s18 is cts9s18>0 ? "black": defaultcolour(9,18,transitions[9]);
cols9s2 is cts9s2>0 ? "black": defaultcolour(9,2,transitions[9]);
cols9s1 is cts9s1>0 ? "black": defaultcolour(9,1,transitions[9]);
cols8s2 is cts8s2>0 ? "black": defaultcolour(8,2,transitions[8]);
cols8s1 is cts8s1>0 ? "black": defaultcolour(8,1,transitions[8]);
cols8s17 is cts8s17>0 ? "black": defaultcolour(8,17,transitions[8]);
cols7s16 is cts7s16>0 ? "black": defaultcolour(7,16,transitions[7]);
cols7s15 is cts7s15>0 ? "black": defaultcolour(7,15,transitions[7]);
cols6s14 is cts6s14>0 ? "black": defaultcolour(6,14,transitions[6]);
cols6s13 is cts6s13>0 ? "black": defaultcolour(6,13,transitions[6]);
cols6s12 is cts6s12>0 ? "black": defaultcolour(6,12,transitions[6]);
cols4s10 is cts4s10>0 ? "black": defaultcolour(4,10,transitions[4]);
cols4s9 is cts4s9>0 ? "black": defaultcolour(4,9,transitions[4]);
cols4s8 is cts4s8>0 ? "black": defaultcolour(4,8,transitions[4]);
cols4s7 is cts4s7>0 ? "black": defaultcolour(4,7,transitions[4]);
cols4s6 is cts4s6>0 ? "black": defaultcolour(4,6,transitions[4]);
cols4s11 is cts4s11>0 ? "black": defaultcolour(4,11,transitions[4]);
cols3s10 is cts3s10>0 ? "black": defaultcolour(3,10,transitions[3]);
cols3s9 is cts3s9>0 ? "black": defaultcolour(3,9,transitions[3]);
cols3s8 is cts3s8>0 ? "black": defaultcolour(3,8,transitions[3]);
cols3s7 is cts3s7>0 ? "black": defaultcolour(3,7,transitions[3]);
cols3s6 is cts3s6>0 ? "black": defaultcolour(3,6,transitions[3]);
cols3s5 is cts3s5>0 ? "black": defaultcolour(3,5,transitions[3]);
cols1s4 is cts1s4>0 ? "black": defaultcolour(1,4,transitions[1]);
cols1s2 is cts1s2>0 ? "black": defaultcolour(1,2,transitions[1]);
cols1s1 is cts1s1>0 ? "black": defaultcolour(1,1,transitions[1]);

cols1="grey";
cols2="lightgreen";
cols3="blue";
cols4="blue";
cols5="green";
cols6="red";
cols7="red";
cols8="red";
cols9="red";
cols10="red";
cols11="grey";
cols12="grey";
cols13="violet";
cols14="purple";
cols15="violet";
cols16="turquoise";
cols17="blue";
cols18="blue";
cols19="blue";
cols20="purple";
cols21="lightblue";
cols22="lightblue";
cols23="lightblue";
cols24="lightblue";
cols25="pink";
cols26="grey";
cols27="grey";
cols28="turquoise";
cols29="violet";



proc mouseMove_s0: mousePressed {
if(((mouseX-ps0x)*(mouseX-ps0x)<100 )&&((mouseY-ps0y)*(mouseY-ps0y)<100))
{
	if(mousePressed)
	{
	  ps0x is mouseX;
	  ps0y is mouseY;
	}
    else{
      ps0x = mouseX;
      ps0y = mouseY;
    }
   }
}
proc mouseMove_s1: mousePressed {
if(((mouseX-ps1x)*(mouseX-ps1x)<100 )&&((mouseY-ps1y)*(mouseY-ps1y)<100))
{
	if(mousePressed)
	{
	  ps1x is mouseX;
	  ps1y is mouseY;
	}
    else{
      ps1x = mouseX;
      ps1y = mouseY;
    }
   }
}
proc mouseMove_s2: mousePressed {
if(((mouseX-ps2x)*(mouseX-ps2x)<100 )&&((mouseY-ps2y)*(mouseY-ps2y)<100))
{
	if(mousePressed)
	{
	  ps2x is mouseX;
	  ps2y is mouseY;
	}
    else{
      ps2x = mouseX;
      ps2y = mouseY;
    }
   }
}
proc mouseMove_s3: mousePressed {
if(((mouseX-ps3x)*(mouseX-ps3x)<100 )&&((mouseY-ps3y)*(mouseY-ps3y)<100))
{
	if(mousePressed)
	{
	  ps3x is mouseX;
	  ps3y is mouseY;
	}
    else{
      ps3x = mouseX;
      ps3y = mouseY;
    }
   }
}
proc mouseMove_s4: mousePressed {
if(((mouseX-ps4x)*(mouseX-ps4x)<100 )&&((mouseY-ps4y)*(mouseY-ps4y)<100))
{
	if(mousePressed)
	{
	  ps4x is mouseX;
	  ps4y is mouseY;
	}
    else{
      ps4x = mouseX;
      ps4y = mouseY;
    }
   }
}
proc mouseMove_s5: mousePressed {
if(((mouseX-ps5x)*(mouseX-ps5x)<100 )&&((mouseY-ps5y)*(mouseY-ps5y)<100))
{
	if(mousePressed)
	{
	  ps5x is mouseX;
	  ps5y is mouseY;
	}
    else{
      ps5x = mouseX;
      ps5y = mouseY;
    }
   }
}
proc mouseMove_s6: mousePressed {
if(((mouseX-ps6x)*(mouseX-ps6x)<100 )&&((mouseY-ps6y)*(mouseY-ps6y)<100))
{
	if(mousePressed)
	{
	  ps6x is mouseX;
	  ps6y is mouseY;
	}
    else{
      ps6x = mouseX;
      ps6y = mouseY;
    }
   }
}
proc mouseMove_s7: mousePressed {
if(((mouseX-ps7x)*(mouseX-ps7x)<100 )&&((mouseY-ps7y)*(mouseY-ps7y)<100))
{
	if(mousePressed)
	{
	  ps7x is mouseX;
	  ps7y is mouseY;
	}
    else{
      ps7x = mouseX;
      ps7y = mouseY;
    }
   }
}
proc mouseMove_s8: mousePressed {
if(((mouseX-ps8x)*(mouseX-ps8x)<100 )&&((mouseY-ps8y)*(mouseY-ps8y)<100))
{
	if(mousePressed)
	{
	  ps8x is mouseX;
	  ps8y is mouseY;
	}
    else{
      ps8x = mouseX;
      ps8y = mouseY;
    }
   }
}
proc mouseMove_s9: mousePressed {
if(((mouseX-ps9x)*(mouseX-ps9x)<100 )&&((mouseY-ps9y)*(mouseY-ps9y)<100))
{
	if(mousePressed)
	{
	  ps9x is mouseX;
	  ps9y is mouseY;
	}
    else{
      ps9x = mouseX;
      ps9y = mouseY;
    }
   }
}
proc mouseMove_s10: mousePressed {
if(((mouseX-ps10x)*(mouseX-ps10x)<100 )&&((mouseY-ps10y)*(mouseY-ps10y)<100))
{
	if(mousePressed)
	{
	  ps10x is mouseX;
	  ps10y is mouseY;
	}
    else{
      ps10x = mouseX;
      ps10y = mouseY;
    }
   }
}
proc mouseMove_s11: mousePressed {
if(((mouseX-ps11x)*(mouseX-ps11x)<100 )&&((mouseY-ps11y)*(mouseY-ps11y)<100))
{
	if(mousePressed)
	{
	  ps11x is mouseX;
	  ps11y is mouseY;
	}
    else{
      ps11x = mouseX;
      ps11y = mouseY;
    }
   }
}
proc mouseMove_s12: mousePressed {
if(((mouseX-ps12x)*(mouseX-ps12x)<100 )&&((mouseY-ps12y)*(mouseY-ps12y)<100))
{
	if(mousePressed)
	{
	  ps12x is mouseX;
	  ps12y is mouseY;
	}
    else{
      ps12x = mouseX;
      ps12y = mouseY;
    }
   }
}
proc mouseMove_s13: mousePressed {
if(((mouseX-ps13x)*(mouseX-ps13x)<100 )&&((mouseY-ps13y)*(mouseY-ps13y)<100))
{
	if(mousePressed)
	{
	  ps13x is mouseX;
	  ps13y is mouseY;
	}
    else{
      ps13x = mouseX;
      ps13y = mouseY;
    }
   }
}
proc mouseMove_s14: mousePressed {
if(((mouseX-ps14x)*(mouseX-ps14x)<100 )&&((mouseY-ps14y)*(mouseY-ps14y)<100))
{
	if(mousePressed)
	{
	  ps14x is mouseX;
	  ps14y is mouseY;
	}
    else{
      ps14x = mouseX;
      ps14y = mouseY;
    }
   }
}
proc mouseMove_s15: mousePressed {
if(((mouseX-ps15x)*(mouseX-ps15x)<100 )&&((mouseY-ps15y)*(mouseY-ps15y)<100))
{
	if(mousePressed)
	{
	  ps15x is mouseX;
	  ps15y is mouseY;
	}
    else{
      ps15x = mouseX;
      ps15y = mouseY;
    }
   }
}
proc mouseMove_s16: mousePressed {
if(((mouseX-ps16x)*(mouseX-ps16x)<100 )&&((mouseY-ps16y)*(mouseY-ps16y)<100))
{
	if(mousePressed)
	{
	  ps16x is mouseX;
	  ps16y is mouseY;
	}
    else{
      ps16x = mouseX;
      ps16y = mouseY;
    }
   }
}
proc mouseMove_s17: mousePressed {
if(((mouseX-ps17x)*(mouseX-ps17x)<100 )&&((mouseY-ps17y)*(mouseY-ps17y)<100))
{
	if(mousePressed)
	{
	  ps17x is mouseX;
	  ps17y is mouseY;
	}
    else{
      ps17x = mouseX;
      ps17y = mouseY;
    }
   }
}
proc mouseMove_s18: mousePressed {
if(((mouseX-ps18x)*(mouseX-ps18x)<100 )&&((mouseY-ps18y)*(mouseY-ps18y)<100))
{
	if(mousePressed)
	{
	  ps18x is mouseX;
	  ps18y is mouseY;
	}
    else{
      ps18x = mouseX;
      ps18y = mouseY;
    }
   }
}
proc mouseMove_s19: mousePressed {
if(((mouseX-ps19x)*(mouseX-ps19x)<100 )&&((mouseY-ps19y)*(mouseY-ps19y)<100))
{
	if(mousePressed)
	{
	  ps19x is mouseX;
	  ps19y is mouseY;
	}
    else{
      ps19x = mouseX;
      ps19y = mouseY;
    }
   }
}
proc mouseMove_s20: mousePressed {
if(((mouseX-ps20x)*(mouseX-ps20x)<100 )&&((mouseY-ps20y)*(mouseY-ps20y)<100))
{
	if(mousePressed)
	{
	  ps20x is mouseX;
	  ps20y is mouseY;
	}
    else{
      ps20x = mouseX;
      ps20y = mouseY;
    }
   }
}
proc mouseMove_s21: mousePressed {
if(((mouseX-ps21x)*(mouseX-ps21x)<100 )&&((mouseY-ps21y)*(mouseY-ps21y)<100))
{
	if(mousePressed)
	{
	  ps21x is mouseX;
	  ps21y is mouseY;
	}
    else{
      ps21x = mouseX;
      ps21y = mouseY;
    }
   }
}
proc mouseMove_s22: mousePressed {
if(((mouseX-ps22x)*(mouseX-ps22x)<100 )&&((mouseY-ps22y)*(mouseY-ps22y)<100))
{
	if(mousePressed)
	{
	  ps22x is mouseX;
	  ps22y is mouseY;
	}
    else{
      ps22x = mouseX;
      ps22y = mouseY;
    }
   }
}
proc mouseMove_s23: mousePressed {
if(((mouseX-ps23x)*(mouseX-ps23x)<100 )&&((mouseY-ps23y)*(mouseY-ps23y)<100))
{
	if(mousePressed)
	{
	  ps23x is mouseX;
	  ps23y is mouseY;
	}
    else{
      ps23x = mouseX;
      ps23y = mouseY;
    }
   }
}
proc mouseMove_s24: mousePressed {
if(((mouseX-ps24x)*(mouseX-ps24x)<100 )&&((mouseY-ps24y)*(mouseY-ps24y)<100))
{
	if(mousePressed)
	{
	  ps24x is mouseX;
	  ps24y is mouseY;
	}
    else{
      ps24x = mouseX;
      ps24y = mouseY;
    }
   }
}
proc mouseMove_s25: mousePressed {
if(((mouseX-ps25x)*(mouseX-ps25x)<100 )&&((mouseY-ps25y)*(mouseY-ps25y)<100))
{
	if(mousePressed)
	{
	  ps25x is mouseX;
	  ps25y is mouseY;
	}
    else{
      ps25x = mouseX;
      ps25y = mouseY;
    }
   }
}
proc mouseMove_s26: mousePressed {
if(((mouseX-ps26x)*(mouseX-ps26x)<100 )&&((mouseY-ps26y)*(mouseY-ps26y)<100))
{
	if(mousePressed)
	{
	  ps26x is mouseX;
	  ps26y is mouseY;
	}
    else{
      ps26x = mouseX;
      ps26y = mouseY;
    }
   }
}
proc mouseMove_s27: mousePressed {
if(((mouseX-ps27x)*(mouseX-ps27x)<100 )&&((mouseY-ps27y)*(mouseY-ps27y)<100))
{
	if(mousePressed)
	{
	  ps27x is mouseX;
	  ps27y is mouseY;
	}
    else{
      ps27x = mouseX;
      ps27y = mouseY;
    }
   }
}
proc mouseMove_s28: mousePressed {
if(((mouseX-ps28x)*(mouseX-ps28x)<100 )&&((mouseY-ps28y)*(mouseY-ps28y)<100))
{
	if(mousePressed)
	{
	  ps28x is mouseX;
	  ps28y is mouseY;
	}
    else{
      ps28x = mouseX;
      ps28y = mouseY;
    }
   }
}
proc mouseMove_s29: mousePressed {
if(((mouseX-ps29x)*(mouseX-ps29x)<100 )&&((mouseY-ps29y)*(mouseY-ps29y)<100))
{
	if(mousePressed)
	{
	  ps29x is mouseX;
	  ps29y is mouseY;
	}
    else{
      ps29x = mouseX;
      ps29y = mouseY;
    }
   }
}

ps0x is graphscale*1380;
ps0y is graphscale* 138;
ps1x is graphscale* 1448;
ps1y is graphscale* 738;
ps2x is graphscale* 1298;
ps2y is graphscale* 240;
ps3x is graphscale* 886;
ps3y is graphscale* 74;
ps4x is graphscale* 724;
ps4y is graphscale* 637;
ps5x is graphscale* 1188;
ps5y is graphscale* 14;
ps6x is graphscale* 463;
ps6y is graphscale* 814;
ps7x is graphscale* 350;
ps7y is graphscale* 24;
ps8x is graphscale* 1153;
ps8y is graphscale* 634;
ps9x is graphscale* 1076;
ps9y is graphscale* 192;
ps10x is graphscale* 895;
ps10y is graphscale* 806;
ps11x is graphscale* 717;
ps11y is graphscale* 735;
ps12x is graphscale* 246;
ps12y is graphscale* 566;
ps13x is graphscale* 384;
ps13y is graphscale* 336;
ps14x is graphscale* 237;
ps14y is graphscale* 762;
ps15x is graphscale* 320;
ps15y is graphscale* 90;
ps16x is graphscale* 150;
ps16y is graphscale* 190;
ps17x is graphscale* 619;
ps17y is graphscale* 116;
ps18x is graphscale* 1060;
ps18y is graphscale* 348;
ps19x is graphscale* 755;
ps19y is graphscale* 822;
ps20x is graphscale* 232.52126981969923;
ps20y is graphscale* 140;
ps21x is graphscale* 564;
ps21y is graphscale* 208;
ps22x is graphscale* 553;
ps22y is graphscale* 356;
ps23x is graphscale* 315;
ps23y is graphscale* 256;
ps24x is graphscale* 491;
ps24y is graphscale* 464;
ps25x is graphscale* 423;
ps25y is graphscale* 189;
ps26x is graphscale* 140;
ps26y is graphscale* 649;
ps27x is graphscale* 220;
ps27y is graphscale* 220;
ps28x is graphscale* 345;
ps28y is graphscale* 136;
ps29x is graphscale* 264;
ps29y is graphscale*696;


labs0 is Text("s0",ps0x,ps0y,"black");
labs1 is Text("s1",ps1x,ps1y,"black");
labs2 is Text("s2",ps2x,ps2y,"black");
labs3 is Text("s3",ps3x,ps3y,"black");
labs4 is Text("s4",ps4x,ps4y,"black");
labs5 is Text("s5 accept",ps5x,ps5y,"black");
labs6 is Text("s6",ps6x,ps6y,"black");
labs7 is Text("s7",ps7x,ps7y,"black");
labs8 is Text("s8",ps8x,ps8y,"black");
labs9 is Text("s9",ps9x,ps9y,"black");
labs10 is Text("s10",ps10x,ps10y,"black");
labs11 is Text("s11",ps11x,ps11y,"black");
labs12 is Text("s12",ps12x,ps12y,"black");
labs13 is Text("s13",ps13x,ps13y,"black");
labs14 is Text("s14",ps14x,ps14y,"black");
labs15 is Text("s15",ps15x,ps15y,"black");
labs16 is Text("s16",ps16x,ps16y,"black");
labs17 is Text("s17",ps17x,ps17y,"black");
labs18 is Text("s18",ps18x,ps18y,"black");
labs19 is Text("s19",ps19x,ps19y,"black");
labs20 is Text("s20",ps20x,ps20y,"black");
labs21 is Text("s21",ps21x,ps21y,"black");
labs22 is Text("s22",ps22x,ps22y,"black");
labs23 is Text("s23",ps23x,ps23y,"black");
labs24 is Text("s24",ps24x,ps24y,"black");
labs25 is Text("s25",ps25x,ps25y,"black");
labs26 is Text("s26",ps26x,ps26y,"black");
labs27 is Text("s27",ps27x,ps27y,"black");
labs28 is Text("s28",ps28x,ps28y,"black");
labs29 is Text("s29",ps29x,ps29y,"black");

func midpoint{
${{
   var pt = [1/2*(arguments[0].x1+arguments[0].x2),1/2*(arguments[0].y1+arguments[0].y2)];
   return pt;

}}$;
}
func getlscomp {
  return $1[$2];
}
/*
cols0s1="purple";
cols0s2="blue";
cols0s3 = "yellow";
cols1s2 ="grey";
cols1s4 ="pink";
cols3s5 ="orange";
cols3s6 ="brown";
cols3s7 ="black";
cols3s8 ="gold";
cols3s9 = "silver";
cols3s10="violet";
cols4s11="beige";

cols4s6 
cols4s7 
cols4s8 
cols4s9 
cols4s10 
cols6s12 
cols6s13 
cols7s15 
cols7s16 
cols8s1 
cols8s2 
cols8s17 
cols9s1 
cols9s2 
cols9s18 
cols10s1 
cols10s2 
cols10s19 
cols12s13 
cols12s20 
cols13s21 
cols13s22 
cols13s23
cols13s24 
cols16s26 
cols17s9 
cols17s10 
cols18s10 
cols20s27 
cols25s28 
cols26s29 
*/






labs0s1 is Text("(",getlscomp(midpoint(ls0s1),1),getlscomp(midpoint(ls0s1),2),cols0s1);
labs0s2 is Text("i",getlscomp(midpoint(ls0s2),1),getlscomp(midpoint(ls0s2),2),cols0s2);
labs0s3 is Text("e",getlscomp(midpoint(ls0s3),1),getlscomp(midpoint(ls0s3),2),cols0s3);
labs1s2 is Text("i",getlscomp(midpoint(ls1s2),1),getlscomp(midpoint(ls1s2),2),cols1s2);
labs1s4 is Text("e",getlscomp(midpoint(ls1s4),1),getlscomp(midpoint(ls1s4),2),cols1s4);
labs3s5 is Text("$",getlscomp(midpoint(ls3s5),1),getlscomp(midpoint(ls3s5),2),cols3s5);
labs3s6 is Text(":",getlscomp(midpoint(ls3s6),1),getlscomp(midpoint(ls3s6),2),cols3s6);
labs3s7 is Text("%",getlscomp(midpoint(ls3s7),1),getlscomp(midpoint(ls3s7),2),cols3s7);
labs3s8 is Text("-",getlscomp(midpoint(ls3s8),1),getlscomp(midpoint(ls3s8),2),cols3s8);
labs3s9 is Text("+",getlscomp(midpoint(ls3s9),1),getlscomp(midpoint(ls3s9),2),cols3s9);
labs3s10 is Text(".",getlscomp(midpoint(ls3s10),1),getlscomp(midpoint(ls3s10),2),cols3s10);
labs4s11 is Text(")",getlscomp(midpoint(ls4s11),1),getlscomp(midpoint(ls4s11),2),cols4s11);
labs4s6 is Text(":",getlscomp(midpoint(ls4s6),1),getlscomp(midpoint(ls4s6),2),cols4s6);
labs4s7 is Text("%",getlscomp(midpoint(ls4s7),1),getlscomp(midpoint(ls4s7),2),cols4s7);
labs4s8 is Text("-",getlscomp(midpoint(ls4s8),1),getlscomp(midpoint(ls4s8),2),cols4s8);
labs4s9 is Text("+",getlscomp(midpoint(ls4s9),1),getlscomp(midpoint(ls4s9),2),cols4s9);
labs4s10 is Text(".",getlscomp(midpoint(ls4s10),1),getlscomp(midpoint(ls4s10),2),cols4s10);
labs6s12 is Text("(",getlscomp(midpoint(ls6s12),1),getlscomp(midpoint(ls6s12),2),cols6s12);
labs6s13 is Text("a",getlscomp(midpoint(ls6s13),1),getlscomp(midpoint(ls6s13),2),cols6s13);
labs7s15 is Text("a",getlscomp(midpoint(ls7s15),1),getlscomp(midpoint(ls7s15),2),cols7s15);
labs7s16 is Text("l",getlscomp(midpoint(ls7s16),1),getlscomp(midpoint(ls7s16),2),cols7s16);
labs8s1 is Text("(",getlscomp(midpoint(ls8s1),1),getlscomp(midpoint(ls8s1),2),cols8s1);
labs8s2 is Text("i",getlscomp(midpoint(ls8s2),1),getlscomp(midpoint(ls8s2),2),cols8s2);
labs8s17 is Text("e",getlscomp(midpoint(ls8s17),1),getlscomp(midpoint(ls8s17),2),cols8s17);
labs9s1 is Text("(",getlscomp(midpoint(ls9s1),1),getlscomp(midpoint(ls9s1),2),cols9s1);
labs9s2 is Text("i",getlscomp(midpoint(ls9s2),1),getlscomp(midpoint(ls9s2),2),cols9s2);
labs9s18 is Text("e",getlscomp(midpoint(ls9s18),1),getlscomp(midpoint(ls9s18),2),cols9s18);
labs10s1 is Text("(",getlscomp(midpoint(ls10s1),1),getlscomp(midpoint(ls10s1),2),cols10s1);
labs10s2 is Text("i",getlscomp(midpoint(ls10s2),1),getlscomp(midpoint(ls10s2),2),cols10s2);
labs10s19 is Text("e",getlscomp(midpoint(ls10s19),1),getlscomp(midpoint(ls10s19),2),cols10s19);
labs12s13 is Text("a",getlscomp(midpoint(ls12s13),1),getlscomp(midpoint(ls12s13),2),cols12s13);
labs12s20 is Text("boolexpr",getlscomp(midpoint(ls12s20),1),getlscomp(midpoint(ls12s20),2),cols12s20);
labs13s21 is Text("=",getlscomp(midpoint(ls13s21),1),getlscomp(midpoint(ls13s21),2),cols13s21);
labs13s22 is Text(">",getlscomp(midpoint(ls13s22),1),getlscomp(midpoint(ls13s22),2),cols13s22);
labs13s23 is Text("<",getlscomp(midpoint(ls13s23),1),getlscomp(midpoint(ls13s23),2),cols13s23);
labs13s24 is Text("!=",getlscomp(midpoint(ls13s24),1),getlscomp(midpoint(ls13s24),2),cols13s24);
labs16s26 is Text(",",getlscomp(midpoint(ls16s26),1),getlscomp(midpoint(ls16s26),2),cols16s26);
labs17s9 is Text("+",getlscomp(midpoint(ls17s9),1),getlscomp(midpoint(ls17s9),2),cols17s9);
labs17s10 is Text(".",getlscomp(midpoint(ls17s10),1),getlscomp(midpoint(ls17s10),2),cols17s10);
labs18s10 is Text(".",getlscomp(midpoint(ls18s10),1),getlscomp(midpoint(ls18s10),2),cols18s10);
labs20s27 is Text(")",getlscomp(midpoint(ls20s27),1),getlscomp(midpoint(ls20s27),2),cols20s27);
labs25s28 is Text("v",getlscomp(midpoint(ls25s28),1),getlscomp(midpoint(ls25s28),2),cols25s28);
labs26s29 is Text("a",getlscomp(midpoint(ls26s29),1),getlscomp(midpoint(ls26s29),2),cols26s29);


func makestacktable{
para stack;
result="<table border=\"1\"> <tr><td style=\"height: 16px; \">  stack </td></tr>";
   for(i=1;i<=stack#;i++)
   {

   result = result//"<tr><td style=\"height: 16px; \">"//" "//stack[i]//" "//"</tr></td>"//"\n";
   }
   result = result//"</tr>"//"\n"//"</table>";
   return result;
 }
 
func makevstacktable{
para stack;
result="<table border=\"1\"> <tr><td style=\"height: 16px; \">  value </td></tr>";
   for(i=1;i<=stack#;i++)
   {

   result = result//"<tr><td style=\"height: 16px; \">"//" "//stack[i]//" "//"</tr></td>"//"\n";
   }
   result = result//"</tr>"//"\n"//"</table>";
   return result;
 }

func makeinputstrtable{
 para str;
 result="<table border=\"1\"> <tr><th style=\"height: 16px; \"> Input String : </th><th style=\"height: 16px; \"> "//" "// str //" </th></tr>";
return result;
}

func makeinputtokenstable{
 para str;
 result="<table border=\"1\"> <tr><th style=\"height: 16px; \"> Input Tokens : </th><th style=\"height: 16px; \"> "// " "//str //"</th></tr>";
return result;
}
func makenextsymboltable{
 para str;
 result="<table border=\"1\"> <tr><th style=\"height: 16px; \"> Next Symbol : </th><th style=\"height: 16px; \"> "// " "//str //"</th></tr>";
return result;
}
isapply is (currrule=="")? 0:1;
buttonpoint  is  [10,100];
selectRules is Combobox("rule",["","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"],buttonpoint[1]+100,buttonpoint[2]+30,1);
applyRule is Button("apprule","Apply Rule",buttonpoint[1],buttonpoint[2]+30,isapply);
nextstep is Button("nextstep","Next Step", buttonpoint[1],buttonpoint[2],1);
showInputstr is makeinputstrtable(inputstr);
Inputstrtable is Div("Inputstrtable",10,10,1000,40,showInputstr );
Manualexe is Div("Manualexe",10,50,210,90,"<table border=\"1\"> <tr><th style=\"height: 16px; \">Manual Executions :</th></tr>");
ResetButton is Button("Reset","Reset",buttonpoint[1]+200,buttonpoint[2],1);
showInputtokens is makeinputtokenstable(InputText);

Inputtokenstable is Div("Inputtokenstable",10,buttonpoint[2]+100,1000,buttonpoint[2]+140,showInputtokens );
shownextsymbol is makenextsymboltable(nextsymbol);
nextsymboltable is Div("nextsymboltable",10,buttonpoint[2]+150,200,buttonpoint[2]+190,shownextsymbol);

showOutput is (currstate==5)? "<table border=\"1\"> <tr><th style=\"height: 16px; \"> Output : </th><th style=\"height: 16px; \"> "//inputtvals[1]//"</th></tr>" : "<table border=\"1\"> <tr><th style=\"height: 16px; \"> Output : </th></tr>";
Outputtable is Div("outputtable",10,buttonpoint[2]+200,1000,buttonpoint[2]+240,showOutput);

showvaluestack is makevstacktable(sublist(inputtvals,1,j));
showCurrstack is makestacktable(currstack);
stackTable is Div("stacktable",10,10,500,1000,showCurrstack );
valueTable is Div("valuetable",100,10,500,1000,showvaluestack);

picture is nodes//edges//[labs0,labs1,labs2,labs3,labs4,labs5,labs6,labs7,labs8,labs9,labs10,labs11,labs12,labs13,labs14,labs15,labs16,labs17,labs18,labs19,labs20,labs21,labs22,labs23,labs24,labs25,labs26,labs27,labs28,labs29]//[labs0s1,labs0s2,labs0s3,labs1s2,labs1s4,labs3s5,labs3s6,labs3s7,labs3s8,labs3s9,labs3s10,labs4s11,labs4s6 ,labs4s7,labs4s8,labs4s9,
labs4s10,labs6s12,labs6s13,labs7s15,labs7s16,labs8s1,labs8s2,labs8s17,labs9s1,labs9s2,labs9s18,labs10s1,labs10s2,labs10s19,labs12s13,labs12s20,labs13s21,labs13s22,labs13s23,labs13s24,labs16s26,labs17s9,labs17s10,labs18s10,labs20s27,labs25s28,labs26s29];


picture2=[];
proc drawPicture2: picture2 {
	CanvasHTML5_DrawPicture("view_2","picture2");


}
func makegrammartable{
 para prules;
 result="<table border=\"1\"> <tr><td> Grammar Rules </td></tr>";
  for(i=1;i<=prules#;i++)
   {

   result = result//"<tr><td>"//" "//prules[i]//" "//"</tr></td>"//"\n";
   }
   result = result//"</tr>"//"\n"//"</table>";
   return result;
 }



parsingrules is [line1,line2,line3,line4,line5,line6,line7,line8,line9,line10,line11,line12,line13,line14,line15,line16];

line1 = "  $accept: 	 expr       $end";
line2 = "1  expr:          TABLEID";
line3 = "2 	      	| BRA 	     expr 	    KET";
line4 = "3 	        | expr 	     UNION 	    expr";
line5 = "4               | expr       JOIN 	    expr";
line6 = "5	      	| expr 	     DIFF 	    expr";
line7 = "6	        | expr 	     SELECT     boolexpr";
line8 = "7	        | expr 	     PROJECT   attr_list";
line9 = "8  attr_list:     ATTRID		";
line10 ="9	    	| attr_list  COMMA  	  ATTRID";
line11= "10 comparator:   EQ"; 
line12=	"11	        | GT"; 
line13=	"12	        | LT"; 
line14=	"13	        | NEQ";
line15= "14 boolexpr:     BRA 	     boolexpr     KET";
line16= "15              | ATTRID     comparator   VAL {}";
grammartable is Div("grammartable",10,10,500,1000,makegrammartable(parsingrules));
picture2 is [grammartable];

picture3=[];
proc drawPicture3: picture3 {
	CanvasHTML5_DrawPicture("view_3","picture3");


}

picture3 is [stackTable,valueTable];

picture4 =[];
proc drawPicture4: picture4 {
	CanvasHTML5_DrawPicture("view_4","picture4");


}
picture4 is [selectRules,applyRule,Manualexe,Inputstrtable,Inputtokenstable,nextstep,Outputtable,ResetButton,nextsymboltable];
_view_inputwindow_x=10;
_view_inputwindow_y=130;
_view_inputwindow_width=350;
_view_inputwindow_height=200;
_view_view_3_x=10;
_view_view_3_y=550;
_view_view_3_width=200;
_view_view_3_height=400;
_view_default_x=400;
_view_default_y=20;
_view_default_height=410;
_view_default_width=680;
_view_view_4_x=400;
_view_view_4_y=780;
_view_view_4_height=400;
_view_view_4_width=380;
_view_view_2_x=800;
_view_view_2_y=780;
_view_view_2_height=400;
_view_view_2_width=200;