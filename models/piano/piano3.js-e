##This version avoids a problem present in piano2.js-e whereby a fast mouse
##click can result in the highlighting feature being applied and withdrawn
##again so fast that the user never sees any highlighting being displayed.
##It implements a time delay that keeps the highlighting displayed until a
##preset number of milliseconds after the user has released the mouse button.
##(The delay is supposed to be measured in milliseconds but it isn't
##particularly accuarate because JavaScript isn't a multithreaded language.)

##It relies on using ${{ }}$ to make function and procedure calls to bits of
##code that are located inside the JS-EDEN translator.  This work should
##really be located inside JS-EDEN rather than in a model (in case the
##internal workings of JS-EDEN change, causing this model to break) but
##nonetheless it's basically the beginnings of implementing an edenclocks
##type of functionality in JS-EDEN.

##Items of interest: compile, createTimer_js, playNoteWhenClicked, backupHighlightedKeys

##=============================================================================
##Include these lines first.

##Include JavaScript import library.
include("library/include_js.js-e");

##Include the JavaScript sound library.
include("http://www.dcs.warwick.ac.uk/~wmb/PianoJS/audio.js");

##=============================================================================
##Built-in EDEN functions not yet built into JS-EDEN.

## TODO: These are in draft form and might produce results inconsistent with
## EDEN for edge cases.

proc error {
	${{
		eden.error(new Error(arguments[0]));
	}}$;
}

func substr {
	${{
		return arguments[0].slice(arguments[1] - 1, arguments[2]);
	}}$;
}

proc createTimer_js {
	${{
		window.setTimeout("eval(\"" + arguments[0].replace(/"/g, "\\\"").replace(/\n/g, "") + "\");", arguments[1]);
	}}$;
}

##=============================================================================
##Useful functions for lists.

##Returns true if the second argument is found somewhere in the list given by
##the first argument.
func inList {
	para list, item;
	auto i;
	for (i = 1; i <= list#; i++) {
		if (list[i] == item) {
			return true;
		}
	}
	return false;
}

##=============================================================================
##Useful functions for strings.

##Returns the string formed by replacing the first instance of the second
##argument with the string given by the third argument in the strin the string
##given by the first argument (or all instances if the second argument is a
##regular expression of the form /.../g instead of a plain string.
func replace {
	${{
		return arguments[0].replace(arguments[1], arguments[2]);
	}}$;
}

##=============================================================================
##Functions and procedures for assisting with the creation and comprehension of
##definitions created dynamically at runtime from strings.

##Create an aditional JS-EDEN view that logs each definition, function or procedure
##just after it has been successfully declared using the "execute" procedure.
##The resulting window displays a script that can be used as a tool for
##comprending the procedural code that created the definitions.  In simple
##cases of using "execute" to create many similar definitions the contents of
##this window could be directly substituted for the procedural code.
createView("Dynamically_Created_Definitions", "PlainHTML");
generatedDefinitions = "";

##A drop-in replacement for "execute" that "execute"s its argument and logs the
##(re-)definition to the log window.
proc createDefinition {
	para definition;
	auto definitionHTML;
	execute(definition);
	definitionHTML = definition;
	definitionHTML = replace(definitionHTML, "<", "&lt;");
	definitionHTML = replace(definitionHTML, ">", "&gt;");
	generatedDefinitions = generatedDefinitions // "<div>" // definitionHTML // "</div>\n";
	html("Dynamically_Created_Definitions", generatedDefinitions);
}

##This function is the reverse of execute/createDefinition.  Given a string
##that names an observable it returns the code used to define that
##observable.
func definitionOf {
	${{
		function edenCodeForValue(value) {
			var code = "";
			if (typeof(value) == "undefined") {
				code = "@";
			} else if (typeof(value) == "string") {
				code = "\"" + value + "\"";
			} else if (value == null) {
				code = "@";
			} else if (Array.isArray(value)) {
				code = "[";
				for (var i = 0; i < value.length - 1; i++) {
					code = code + edenCodeForValue(value[i]) + ", ";
				}
				if (value.length > 0) {
					code = code + edenCodeForValue(value[value.length - 1]);
				}
				code = code + "]";
			} else {
				code = value.toString();
			}
			return code;
		}

		var name = arguments[0];
		var symbol = root.lookup(name);
		if (symbol.eden_definition != null) {
			return symbol.eden_definition + ";";
		} else {
			return name + " = " + edenCodeForValue(symbol.cached_value) + ";";
		}
	}}$;
}

##Executes a string observable containing JavaScript code.
proc execute_js {
	${{
		eval(arguments[0].replace(/\n/g, ""));
	}}$;
}

##Returns a string containing the JavaScript code that would be executed if the
##given EDEN code were submitted.
func compile {
	${{
		return eden.translateToJavaScript(arguments[0]);
	}}$;
}

##=============================================================================
##Piano

##Map the JavaScript sound library onto some observables.
${{
	declare_jse("toneGenerator");
	var toneGenerator = DataGenerator;
}}$;

##Convert a music note to its piano key number.  E.g. A4 -> 49
##Not currently called from anywhere in the model.
func keyNumber {
	para noteName;
	auto noteNameWithoutOctave, octave, keyNumber;
	if (noteName[2] == "#") {
		noteNameWithoutOctave = substr(noteName, 1, 2);
		octave = int(substr(noteName, 3, noteName#));
	} else {
		noteNameWithoutOctave = noteName[1];
		octave = int(substr(noteName, 2, noteName#));	
	}
	switch (noteNameWithoutOctave) {
	case "A":
		keyNumber = 1;
		break;
	case "A#":
		keyNumber = 2;
		break;
	case "B":
		keyNumber = 3;
		break;
	case "C":
		keyNumber = 4;
		break;
	case "C#":
		keyNumber = 5;
		break;
	case "D":
		keyNumber = 6;
		break;
	case "D#":
		keyNumber = 7;
		break;
	case "E":
		keyNumber = 8;
		break;
	case "F":
		keyNumber = 9;
		break;
	case "F#":
		keyNumber = 10;
		break;
	case "G":
		keyNumber = 11;
		break;
	case "G#":
		keyNumber = 12;
		break;
	default:
		error("Unknown note " // noteName);
	}
	
	if (keyNumber < 4) {
		keyNumber = keyNumber + octave * 12;
	} else {
		keyNumber = keyNumber + (octave - 1) * 12;
	}
	return keyNumber;
}

##Convert a piano key number into the name of the note.  E.g. 50 -> A#4
func noteName {
	para keyNumber;
	auto octave, keyNumberInFirstOctave;
	keyNumberInFirstOctave = keyNumber % 12;
	octave = int(keyNumber / 12) + 1;
	if (keyNumberInFirstOctave < 4) {
		octave--;
	}
	
	switch (keyNumberInFirstOctave) {
	case 0:
		return "G#" // octave;
	case 1:
		return "A" // octave;
	case 2:
		return "A#" // octave;
	case 3:
		return "B" // octave;
	case 4:
		return "C" // octave;
	case 5:
		return "C#" // octave;
	case 6:
		return "D" // octave;
	case 7:
		return "D#" // octave;
	case 8:
		return "E" // octave;
	case 9:
		return "F" // octave;
	case 10:
		return "F#" // octave;
	case 11:
		return "G" // octave;
	}
}

##Piano key dimensions are taken from:
## http://www.quadibloc.com/other/cnv05.htm
## http://shusterpiano.com/blog/how-key-length-affects-you/
pianoPositionX = 0;
pianoPositionY = 0;
naturalKeyWidth = 20;
naturalKeyLength is (5 + 3/8) / (0.864 * 1.066) * naturalKeyWidth;
sharpKeyWidth is 20 / 35 * naturalKeyWidth;
sharpKeyLength is 3.5 / 5.5 * naturalKeyLength; ##Measured from Meurig's keyboard.

##Returns a Drawable that represents the piano key corresponding to a given piano key number.
func keyVisual {
	para keyNumber, xOffset, yOffset, whiteKeyWidth, whiteKeyLen, blackKeyWidth, blackKeyLen, highlightColour;
	auto xPos, keyWidth, keyHeight, colour;
	xPos = xOffset + int((keyNumber - 1) / 12) * 7 * whiteKeyWidth;
	switch ((keyNumber - 1) % 12) {
	case 0: ## A
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = "white";
		break;
	case 1: ## A#
		xPos = xPos - 2 * whiteKeyWidth + 5 * blackKeyWidth;
		keyWidth = blackKeyWidth;
		keyHeight = blackKeyLen;
		colour = "black";
		break;
	case 2: ## B
		xPos = xPos + whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = "white";
		break;
	case 3: ## C
		xPos = xPos +  2 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = "white";
		break;
	case 4: ## C#
		xPos = xPos +  2 * whiteKeyWidth + blackKeyWidth * 21/20;
		keyWidth = blackKeyWidth * 21/20;
		keyHeight = blackKeyLen;
		colour = "black";
		break;
	case 5: ## D
		xPos = xPos +  3 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = "white";
		break;
	case 6: ## D#
		xPos = xPos +  2 * whiteKeyWidth + 3 * blackKeyWidth * 21/20;
		keyWidth = blackKeyWidth * 21/20;
		keyHeight = blackKeyLen;
		colour = "black";
		break;
	case 7: ## E
		xPos = xPos +  4 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = "white";
		break;
	case 8: ## F
		xPos = xPos +  5 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = "white";
		break;
	case 9: ## F#
		xPos = xPos +  5 * whiteKeyWidth + blackKeyWidth;
		keyWidth = blackKeyWidth;
		keyHeight = blackKeyLen;
		colour = "black";
		break;
	case 10: ## G
		xPos = xPos +  6 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = "white";
		break;
	case 11: ## G#
		xPos = xPos +  5 * whiteKeyWidth + 3 * blackKeyWidth;
		keyWidth = blackKeyWidth;
		keyHeight = blackKeyLen;
		colour = "black";
		break;
	}
	if (highlightColour != @) {
		colour = highlightColour;
	}
	return Rectangle(xPos, yOffset, keyWidth, keyHeight, colour);
}

## The keys currently highlighted on the keyboard are the key names in this list.
## E.g. highlightedKeys = ["A0"];
highlightedKeys = [];

## The keys currently highlighted could be shaded in any number of ways.  The
## function keyHighlight determines how the colours are chosen.  The default shading
## scheme uses two colours, one for the natural notes and another for the sharps and
## flats.

##Change these observables to change the highlighting colours.
naturalHighlightColour = "green";
sharpHighlightColour = "lime";

##This is the default highlighting function that determines that all highlighted
##naturals are highlighted in naturalHighlightColour and all highlighted sharps are
##highlighted in sharpHighlightColour.

func twoToneHighlight {
	para highlighted, note;
	if (inList(highlighted, note)) {
		if (substr(note, 2, 2) == "#") {
			return sharpHighlightColour;
		} else {
			return naturalHighlightColour;
		}
	} else {
		return @;
	}
}

##The observable keyHighlight determines the actual highlighting function used.
##Reassign this observable to implement more complex highlighting schemes
##(e.g. different colours for keys pressed with the left hand as compared to those
##pressed with the right).

keyHighlight = twoToneHighlight;

##This is a fudge.
proc changeHighlightColour : naturalHighlightColour, sharpHighlightColour {
	keyHighlight = keyHighlight;
}

func pianoSound {
	${{
		return new Audio(Notes.getDataURI(arguments[0] - 40));
	}}$;
}

proc buildKey {
	para keyNumber;
	auto note, keyDefinition;
	note = noteName(keyNumber);
	note = replace(note, "#", "Sharp");

	keyDefinition = "key" // note // " is keyVisual(" // keyNumber;
	keyDefinition = keyDefinition // ", pianoPositionX, pianoPositionY, naturalKeyWidth, naturalKeyLength, sharpKeyWidth, sharpKeyLength, keyHighlight(highlightedKeys, \"" // noteName(keyNumber) // "\"));";
	createDefinition(keyDefinition);
}

proc buildKeys {
	auto keyNumber, octave, keyboardDef, keysListed;
	
	##Define each individual key.
	for (keyNumber = 1; keyNumber <= 88; keyNumber++) {
		buildKey(keyNumber);
	}
	
	##Define the order to draw the keys in and the mappings between the drawing order
	##and piano key number order.
	keyboardDef = "keyboard is [keyA0, keyB0";
	pianoKeyNumToDrawOrder = [1, @, 2, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @, @];
	keysListed = 2;
	drawOrderToPianoKeyNum = [1, 3];
	for (octave = 1; octave <= 7; octave++) {
		keyboardDef = keyboardDef // ", keyC" // octave;
		keyboardDef = keyboardDef // ", keyD" // octave;
		keyboardDef = keyboardDef // ", keyE" // octave;
		keyboardDef = keyboardDef // ", keyF" // octave;
		keyboardDef = keyboardDef // ", keyG" // octave;
		keyboardDef = keyboardDef // ", keyA" // octave;
		keyboardDef = keyboardDef // ", keyB" // octave;

		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 4] = keysListed + 1;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 6] = keysListed + 2;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 8] = keysListed + 3;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 9] = keysListed + 4;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 11] = keysListed + 5;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 13] = keysListed + 6;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 15] = keysListed + 7;
		keysListed = keysListed + 7;
		
		drawOrderToPianoKeyNum = drawOrderToPianoKeyNum // [
			(octave - 1) * 12 + 4,  ## C
			(octave - 1) * 12 + 6,  ## D
			(octave - 1) * 12 + 8,  ## E
			(octave - 1) * 12 + 9,  ## F
			(octave - 1) * 12 + 11, ## G
			(octave - 1) * 12 + 13, ## A
			(octave - 1) * 12 + 15  ## B
		];
		
	}
	
	keyboardDef = keyboardDef // ", keyC8, keyASharp0";
	pianoKeyNumToDrawOrder[88] = keysListed + 1;
	keysListed = keysListed + 1;
	numberOfNaturals = keysListed;
	pianoKeyNumToDrawOrder[2] = keysListed + 1;
	keysListed = keysListed + 1;
	drawOrderToPianoKeyNum = drawOrderToPianoKeyNum // [88, 2];
	
	for (octave = 1; octave <= 7; octave++) {
		keyboardDef = keyboardDef // ", keyCSharp" // octave;
		keyboardDef = keyboardDef // ", keyDSharp" // octave;
		keyboardDef = keyboardDef // ", keyFSharp" // octave;
		keyboardDef = keyboardDef // ", keyGSharp" // octave;
		keyboardDef = keyboardDef // ", keyASharp" // octave;

		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 5] = keysListed + 1;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 7] = keysListed + 2;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 10] = keysListed + 3;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 12] = keysListed + 4;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 14] = keysListed + 5;
		keysListed = keysListed + 5;

		##The drawing order of the sharps isn't currently used anywhere in the model.
		drawOrderToPianoKeyNum = drawOrderToPianoKeyNum // [
			(octave - 1) * 12 + 5,  ## C#
			(octave - 1) * 12 + 7,  ## D#
			(octave - 1) * 12 + 10, ## F#
			(octave - 1) * 12 + 12, ## G#
			(octave - 1) * 12 + 14  ## A#
		];
	}
	keyboardDef = keyboardDef // "];";
	createDefinition(keyboardDef);	
}

proc buildSound {
	para keyNumber;
	auto note, soundDefinition;
	note = noteName(keyNumber);
	note = replace(note, "#", "Sharp");

	soundDefinition = note // "Sound = pianoSound(" // keyNumber;
	soundDefinition = soundDefinition // ");";
	createDefinition(soundDefinition);
}

proc buildSounds {
	auto keyNumber, octave, soundsDef;

	##Define the sound of each key.
	for (keyNumber = 1; keyNumber <= 88; keyNumber++) {
		buildSound(keyNumber);
	}
	
	##A define a list of sounds in piano key order.
	soundsDef = "pianoKeySounds is [A0Sound, ASharp0Sound, B0";
	for (octave = 1; octave <= 7; octave++) {
		soundsDef = soundsDef // "Sound, C" // octave;
		soundsDef = soundsDef // "Sound, CSharp" // octave;
		soundsDef = soundsDef // "Sound, D" // octave;
		soundsDef = soundsDef // "Sound, DSharp" // octave;
		soundsDef = soundsDef // "Sound, E" // octave;
		soundsDef = soundsDef // "Sound, F" // octave;
		soundsDef = soundsDef // "Sound, FSharp" // octave;
		soundsDef = soundsDef // "Sound, G" // octave;
		soundsDef = soundsDef // "Sound, GSharp" // octave;
		soundsDef = soundsDef // "Sound, A" // octave;
		soundsDef = soundsDef // "Sound, ASharp" // octave;
		soundsDef = soundsDef // "Sound, B" // octave;
	}
	soundsDef = soundsDef // "Sound, C8Sound];";
	createDefinition(soundsDef);
}

buildKeys();
buildSounds();

picture is keyboard;

##The keys will be highlighted for highlightDecay milliseconds (approximately)
##after the mouse button is released.
highlightDecay = 100;

proc playNoteWhenClicked : mousePressed {
	auto middleKeyDrawOrder, middleKeyNum, leftKeyRect, rightKeyRect, pianoKeyHit;
	if (mousePressed) {
		if (mouseX >= pianoPositionX && mouseX < pianoPositionX + numberOfNaturals * naturalKeyWidth &&
		 mouseY >= pianoPositionY && mouseY < pianoPositionY + naturalKeyLength) {			
			
			##Find out which piano key has been clicked.  We first locate the white key
			##whose zone the mouse pointer is within.  The user might actually have
			##clicked on one of the black keys that are located on either side, so we
			##check the bounds of the rectangle representing the key that is one piano
			##key number lower than our initial guess (irrespective of whether the key
			##to the left is black or white, though the check is unnecessary if it is in
			##fact white) and similarly for the rectangle representing the key that
			##is one piano key number higher than the initial guess.  If we haven't
			##clicked on a sharp key that's slightly to the left or slightly to the right
			##of our initial guess then our initially guessed white key was the key that
			##was actually clicked.
			
			middleKeyDrawOrder = int((mouseX - pianoPositionX) / naturalKeyWidth) + 1;
			middleKeyNum = drawOrderToPianoKeyNum[middleKeyDrawOrder];
			pianoKeyHit = @;
			
			if (middleKeyNum > 1) {
				leftKeyRect = keyboard[pianoKeyNumToDrawOrder[middleKeyNum - 1]];
				if (mouseX >= leftKeyRect.x1 && mouseX < leftKeyRect.x1 + leftKeyRect.x2 && mouseY >= leftKeyRect.y1 && mouseY < leftKeyRect.y1 + leftKeyRect.y2) {
					pianoKeyHit = middleKeyNum - 1;
				}
			}
			
			if (middleKeyDrawOrder < numberOfNaturals) {
				rightKeyRect = keyboard[pianoKeyNumToDrawOrder[middleKeyNum + 1]];
				if (mouseX >= rightKeyRect.x1 && mouseX < rightKeyRect.x1 + rightKeyRect.x2 && mouseY >= rightKeyRect.y1 && mouseY < rightKeyRect.y1 + rightKeyRect.y2) {
					pianoKeyHit = middleKeyNum + 1;
				}				
			}
			
			if (pianoKeyHit == @) {
				pianoKeyHit = middleKeyNum;
			}
			
			saveKeyHighlightChanges = 0;
			highlightedKeys = [noteName(pianoKeyHit)];
			saveKeyHighlightChanges = 1;
			pianoKeySounds[pianoKeyHit].play();
		}
	} else {
		createTimer_js(highlightedKeysCDef, highlightDecay);
	}
}

proc backupHighlightedKeys : highlightedKeys {
	if (saveKeyHighlightChanges) {
		highlightedKeysCDef = compile("saveKeyHighlightChanges = 0; " // definitionOf("highlightedKeys") // " saveKeyHighlightChanges = 1;");
	}
}

saveKeyHighlightChanges = 1;
backupHighlightedKeys();
