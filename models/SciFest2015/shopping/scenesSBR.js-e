
include("models/jspe/run.e");

## turning Scenes into slides ...

SBR1a is Slide("
<h2>Steve's shopping construal starts here ...</h2>
<hr>
<p>
<h4>Scene 1 </h4> <em> . . . in which observables make their first appearance</em>
</p>
<p>
Along with the 'Introduction' window (which you are reading) you will see a 'Canvas' window with coins and fruit. Try and arrange these windows so you can read this Introduction and see some coins and fruit in the Canvas. Click on a coin and it moves into the 'Offered' position. Click on a fruit and it moves into the 'Basket'. Click on them again and you've changed your mind! The Canvas is visualising (part of) your mind while at the fruit shop. </p>
");

SBR1b is Slide("
<p>
<h4>Scene 1 </h4> <em> . . . in which observables make their first appearance</em>
<p> The basic concepts of observables, dependencies and agency are our building blocks for any construal. Simple observables here, for example, are: <b>purse</b>, <b>basket</b>, <b>totalcost</b>. Under the menu 'New' (top left) choose Observable List. In the window that appears scroll down, about half-way, and find the observable 'basket' in green. Don't click on it yet!  Click on some fruits on the Canvas and check that as they move in or out of the visual basket, at the same time, they move in or out of the list after 'basket = ' on the Observable List. 
</p>
<hr>
");

SBR1 is Slide("
<h2>Steve's shopping construal starts here ...</h2>
<hr>
<p>
<h4>Scene 1 </h4> <em> . . . in which observables make their first appearance</em>
</p>
<p>
Along with the 'Introduction' window (which you are reading) you will see a 'Canvas' window with coins and fruit. Try and arrange these windows so you can read this Introduction and see some coins and fruit in the Canvas. Click on a coin and it moves into the 'Offered' position. Click on a fruit and it moves into the 'Basket'. Click on them again and you've changed your mind! The Canvas is visualising (part of) your mind while at the fruit shop. </p>
<p>
<p> The basic concepts of observables, dependencies and agency are our building blocks for any construal. Simple observables here, for example, are: <b>purse</b>, <b>basket</b>, <b>totalcost</b>. Under the menu 'New' (top left) choose Observable List. In the window that appears scroll down, about half-way, and find the observable 'basket' in green. Don't click on it yet!  Click on some fruits on the Canvas and check that as they move in or out of the visual basket, at the same time, they move in or out of the list after 'basket = ' on the Observable List. 
</p>
<hr>
");

SBR2a is Slide("
<hr>
<h4>Scene 2 </h4> <em> . . .  why being green is so important - even when it comes to observables!</em>
<p>
You will have noticed that in the Observable List some observable names are in black and some are in green. Place your cursor over a green name (but without clicking). A box appears with the 'definition' of the observable on the left-hand side, it's written using the keyword 'is'.  Can you figure out why the box contents are usually not quite the same as what's in the Observable List? It's an important difference! Now click on the green observable you have chosen. An input box appears together with the definition which you clicked - this is ready for you to change it but not yet - use the top-right button to close the Input box.
</p>
");

SBR2b is Slide("
<h4>Scene 2 </h4> <em> . . .  why being green is so important - even when it comes to observables!</em>
<p>An observable in green is a dependency: its value depends on the observables on the right-hand side. And - like a formula in a spreadsheet - it is self-maintaining. Choose 'haveenoughmoney is (totalcost < spendingmoney)'. Probably it has the value 'true' and that may be because you have not chosen any items to buy! Click on some fruits and, as in real life, soon the 'totalcost' will no longer be less than the 'spendingmoney'. Probably you can make 'haveenoughmoney' go false because it is being maintained by the environment. What if you had exactly the right money? Can you correct the definition? </p> 
<hr>
");

SBR2 is Slide("
<hr>
<h4>Scene 2 </h4> <em> . . .  why being green is so important - even when it comes to observables!</em>
<p>An observable in green is a dependency: its value depends on the observables on the right-hand side. And - like a formula in a spreadsheet - it is self-maintaining. Choose 'haveenoughmoney is (totalcost < spendingmoney)'. Probably it has the value 'true' and that may be because you have not chosen any items to buy! Click on some fruits and, as in real life, soon the 'totalcost' will no longer be less than the 'spendingmoney'. Probably you can make 'haveenoughmoney' go false because it is being maintained by the environment. What if you had exactly the right money? Can you correct the definition? </p> 
<p>
You will have noticed that in the Observable List some observable names are in black and some are in green. Place your cursor over a green name (but without clicking). A box appears with the 'definition' of the observable on the left-hand side, it's written using the keyword 'is'.  Can you figure out why the box contents are usually not quite the same as what's in the Observable List? It's an important difference! Now click on the green observable you have chosen. An input box appears together with the definition which you clicked - this is ready for you to change it but not yet - use the top-right button to close the Input box.
</p>
<hr>
");

SBR3 is Slide("
<hr>
<h4>Scene 3 </h4> <em> These guys are just all over the place! Values and Lists </em>
<p> Click on one of the black observables - you will see its definition written with an '=' and a value on the right-hand side which might be a number, a string of characters with inverted commas around it, a list of such values, or a list of lists. Click on 'itemsselected': a list of 0's and 1's, change some of them, note what happens on the canvas. Look at the value of 'forsale': a list containing other lists which contain strings and numbers. Click on 'spendingmoney'and click on 'purse'. The observable 'purse[3]' means the 3rd item in the list for purse. By exploring the values of the observables check that the value of 'spendingmoney' is correct. </p>
<p>
Observables shown here in black, whose values do not depend on other values, are called base observables. Their definitions are called assignments. </p>
<hr>
");

SBR4 is Slide("
<h4>Scene 4 </h4> <em> Here we meet the functions - they are a kind of undercover processing agent </em>
<p>
In the shop, and in your head if you are good at mental arithmetic, you probably add up the cost of items you want - so as to make 'totalcost'. If so, you have just evaluated a function! Close Observable List now and under Lists choose Function List - near the bottom you will find 'costitems', click and scroll down in the Input window to see the whole function. This is a little program in itself. The second line (beginning para) has two variable names which are just 'pretend' variables showing us what the function will do. 'onsale' will be a list of lists, so the ith item in onsale is a list and the function is going to add up the second item (price) within the ith item that we have chosen. Look now at the definition of observable 'totalcost' and figure out for yourself how this is working. 
</p>
<p>
Typically we pass observables to functions which then do useful things to them and give us back the result. We have to give names to functions (so we know what they will do)  - here it has been 'costitems()', and it's important we know how many things, and what type of things, we pass to the function. So in the case of costitems() it was important that 'forsale' was a list of little lists each of which was exactly two items long.
</p>
");

SBR5 is Slide("
<h4>Scene 5</h4> <em> At last we get some action, and it's the agents that do it! </em>

<p> Have you figured out how this construal makes the coins or the fruits to change their positions? It's quite tricky to work this out. </p>
<p>
In everyday life we often <b>do</b> things because some observable <b>changes</b>. Your phone rings, you feel hungry, you see a car coming, or your bus coming, etc and these observables 'trigger' your actions. It's the same in these visualisations of imagined actions in a construal. By clicking on the image of an orange you are changing the value of 'item3pic_click' (check that by finding that observable and observing it as you click - it only flickers! - but you should be able to register the 'true'). Why does it move? 
Choose Agent List under Lists and find near the end 'item3picMove'. You should see how the 'click' changes the 3rd item (the orange) in the itemsselected list. Now look at 'picture' among Observables, check out 'HTMLImage()' among the Functions and you should be able to figure it all out. </p>
<p>
We sometimes call these actions 'triggered actions' for obvious reasons. They are like procedures in programming (hence the 'proc' you saw in the Agent List. </p>

<p> If you have got to this point and done everything on the way, well done! You have mastered the three basic components of making a construal.</p>
");

SBR6 is Slide("
<p>
<b>Acknowledgements:</b> The images and presentation of coins were adapted from these websites:
<pre>
http://projectbritain.com/money/coins.htm
http://www.mathsisfun.com/money/currency.html
</pre>
</p>
<hr>
");

