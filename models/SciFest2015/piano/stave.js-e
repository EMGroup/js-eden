##Model of two musical staves built from a music theory perspective.
##
##Include library.js-e before running this script.
##Include abstractMusicTheory.js-e before running this script.

##Positions on a stave can be described verbally or textually as, "first line",
##through to, "fifth line" (https://en.wikipedia.org/wiki/Staff_(music)), and
##it is these terms on which this model is primarily based.  In order to
##construct a model of the whole stave the notion of individual stave lines has
##been extended in various ways that are intuitive but nonetheless seemingly
##have no name in formal music theory terminology.
##(1) The model contains observables, local variables and function and procedure
##    parameters that take the values 1, 2,... rather than the English words,
##    "first", "second", etc.
##(2) The model allows "line" numbers 1.5, 2.5,... to represent the positions
##    on the stave that are formed from the spaces between two successive lines.
##(3) Line numbers less than 1 represent positions below first line, i.e. ledger
##    lines and the spaces between them.  Line 0 against a treble clef
##    represents middle C.
##(4) Line numbers greater than 5 represent positions above fifth line.

##For reference purposes.
trebleLines = ["E4", "G4", "B4", "D5", "F5"];
bassLines = ["G2", "B2", "D3", "F3", "A3"];

##Clefs
##https://en.wikipedia.org/wiki/Clef
trebleClef = ["G4", 2];  ##G4 is represented by notes on the second stave line.
bassClef = ["F3", 4];    ##(The convention is that the bottom line is referred to as "first line".)
altoClef = ["C4", 3];
tenorClef = ["C4", 4];
suboctaveTrebleClef = ["G3", 2];
superoctaveTrebleClef = ["G5", 2];
frenchViolinClef = ["G4", 1];	##No longer used.  For example use and old music only.
##...there are more and a C, F or G symbol in any position is valid, including
##clefs positioned on the spaces, but they're very rare.

##Transforms a line number on a stave into the name of the notes on that line,
##in scientific notation.
func staveLineToNote {
	para staveLine, optionalAccidentalAnnotation, clef, keySignature;
	auto diatonicStepsFromC0, octave, basicNote, noteInCMajorKey;
	diatonicStepsFromC0 = clef[1][2] * 7 + diatonicStepsFromC(clef[1][1]) + (staveLine - clef[2]) * 2;
	octave = int(diatonicStepsFromC0 / 7);
	basicNote = diatonicStepsFromCToLetter(diatonicStepsFromC0) // octave;
	noteInCMajorKey = noteName(pianoKeyNumber(basicNote) + keyOrAccidentalAdjustment(basicNote, optionalAccidentalAnnotation, keySignature));
	return noteInCMajorKey;
}

##Transforms a note (in scientific notation) into a line number on the stave
##where that note would appear and, if the result is an accidental, the pitch
##adjustment symbol needed.  The function returns a list containing the two
##values.
func noteToStaveLine {
	para note, clef, keySignature;
	auto staveLine, accidental, letter, adjustment, octave, diatonicStepsFromC0, nextLetterUp, nextLetterDown;

	letter = substr(note, 1, 1);
	adjustment = semitoneAdjustment(substr(note, 2, note# - 1));
	octave = note[note#];

	diatonicStepsFromC0 = octave * 7 + diatonicStepsFromC(letter);
	staveLine = (diatonicStepsFromC0 - (clef[1][2] * 7 + diatonicStepsFromC(clef[1][1]))) / 2 + clef[2];
	
	nextLetterUp = diatonicIncrement(letter, 1);
	nextLetterDown = diatonicIncrement(letter, 6);
	
	if (adjustment == -1 && inKeySignature(keySignature, letter // flatSymbol)) {
		##Our note matches the key signature for this line or space.
		accidental = @;
	} else if (adjustment == 1 && inKeySignature(keySignature, letter // sharpSymbol)) {
		##Our note matches the key signature for this line or space.
		accidental = @;
	} else if (adjustment == -1 && inKeySignature(keySignature, nextLetterDown // sharpSymbol)) {
		##Our note is labelled as a flat but the line or space immediately below
		##this one is annotated with a sharp in the key signature, so we
		##change the note to its enharmonic equivalent by shifting down one
		##position on the stave and avoid the need for an accidental.
		letter = nextLetterDown;
		accidental = @;
		if (nextLetterDown == "B") {
			octave--;
		}
	} else if (adjustment == 1 && inKeySignature(keySignature, nextLetterUp // flatSymbol)) {
		letter = nextLetterUp;
		accidental = @;
		if (nextLetterUp == "C") {
			octave++;
		}
	}
	
##TODO Do a first pass to decide if we need to use accidental notation.
## if <second two cases above but check for accidentals already in effect on those adjacent lines>
##   ...
## } else if an accidental is already in effect on the current line {
##		check if we fall under the same accidental or need a new one
## } else {
##		inspect the key signature to find which accidental to use
##     (or, no accidental: first 2 cases above plus when there's nothing in the signature and the note is natural)
## }

##Later on (outside of this function) it would be a good idea to analyze the
##whole bar with a view to minimizing the number of accidentals by possibly
##turning some single accidentals into double accidentals or vice versa.

	return [staveLine, accidental];
}

staveLineInLessonColour = "black";
staveLineNotInLessonColour = "grey";
staveBackgroundColour = "transparent";

staveColours is [staveLineInLessonColour, staveLineNotInLessonColour, staveBackgroundColour];

func staveLineOrSpaceColour {
	para colours, linesInLesson, staveHighlights, lineNum;
	auto i;
	for (i = 1; i <= staveHighlights#; i++) {
		if (staveHighlights[i][1] == lineNum) {
			return staveHighlights[i][2];
		}
	}
	
	if ((lineNum * 2) % 2 == 0) {
		if (indexOf(lineNum, linesInLesson) != 0) {
			return colours[1]; ##staveLineInLessonColour
		} else {
			return colours[2]; ##staveLineNotInLessonColour
		}
	} else {
		return colours[3]; ##staveBackgroundColour
	}
}

func mapStaveHighlightsToKeyHighlights {
	para staveHighlights, clef, keySignature;
	auto keyHighlights, i;
	keyHighlights = [];
	for (i = 1; i <= staveHighlights#; i++) {
		append keyHighlights, [staveLineToNote(staveHighlights[i][1], @, clef, keySignature), staveHighlights[i][2]];
	}
	return keyHighlights;
}


##Returns a list of Drawables corresponding to the five lines of a stave, ordered
##from first line through to fifth line.
func staveLines {
	para position, length, spaceWidth, colours, linesInLesson, staveHighlights;
	return [
		Line(position.x, position.y + 4 * spaceWidth + 4, position.x + length, position.y + 4 * spaceWidth + 4,
			staveLineOrSpaceColour(colours, linesInLesson, staveHighlights, 1)),
		Line(position.x, position.y + 3 * spaceWidth + 3, position.x + length, position.y + 3 * spaceWidth + 3,
			staveLineOrSpaceColour(colours, linesInLesson, staveHighlights, 2)),
		Line(position.x, position.y + 2 * spaceWidth + 2, position.x + length, position.y + 2 * spaceWidth + 2,
			staveLineOrSpaceColour(colours, linesInLesson, staveHighlights, 3)),
		Line(position.x, position.y + spaceWidth + 1, position.x + length, position.y + spaceWidth + 1,
			staveLineOrSpaceColour(colours, linesInLesson, staveHighlights, 4)),
		Line(position.x, position.y, position.x + length, position.y,
			staveLineOrSpaceColour(colours, linesInLesson, staveHighlights, 5))
	];
}

func staveSpaces {
	para position, length, spaceWidth, colourScheme, staveHighlights;
	auto colours;
	colours = [
		staveLineOrSpaceColour(colourScheme, [], staveHighlights, 0.5),
		staveLineOrSpaceColour(colourScheme, [], staveHighlights, 1.5),
		staveLineOrSpaceColour(colourScheme, [], staveHighlights, 2.5),
		staveLineOrSpaceColour(colourScheme, [], staveHighlights, 3.5),
		staveLineOrSpaceColour(colourScheme, [], staveHighlights, 4.5),
		staveLineOrSpaceColour(colourScheme, [], staveHighlights, 5.5)
	];
	
	return [
		colours[1] == "transparent"? @ : Rectangle(position.x, position.y + 4 * spaceWidth + 4, length, spaceWidth + 1, colours[1], colours[1]),
		colours[2] == "transparent"? @ : Rectangle(position.x, position.y + 3 * spaceWidth + 3, length, spaceWidth + 2, colours[2], colours[2]),
		colours[3] == "transparent"? @ : Rectangle(position.x, position.y + 2 * spaceWidth + 2, length, spaceWidth + 2, colours[3], colours[3]),
		colours[4] == "transparent"? @ : Rectangle(position.x, position.y + 1 * spaceWidth + 1, length, spaceWidth + 2, colours[4], colours[4]),
		colours[5] == "transparent"? @ : Rectangle(position.x, position.y, length, spaceWidth + 2, colours[5], colours[5]),
		colours[6] == "transparent"? @ : Rectangle(position.x, position.y - spaceWidth, length, spaceWidth + 1, colours[6], colours[6])
	];
}

func clefImage {
	para stavePosition, clef, spaceWidth;
	auto xOffset, url, imageWidth, imageHeight, scale, anchorPoint;
	xOffset = spaceWidth;
	switch (clef[1][1]) {
	case "G":
		url = "http://www.dcs.warwick.ac.uk/~wmb/Treble_Clef_Pin.PNG";
		imageWidth = 642;
		imageHeight = 680;
		anchorPoint = {196, 422};
		scale = (2.5 * spaceWidth + 1) / (646 - anchorPoint.y);
		break;
	case "F":
		url = "http://www.dcs.warwick.ac.uk/~wmb/bass_clef.png";
		imageWidth = 339;
		imageHeight = 400;
		anchorPoint = {10, 120.5};
		scale = (spaceWidth + 0.5) / anchorPoint.y;
		break;
	case "C":
		error("No alto/tenor clef image available.");
		break;
	default:
		error("Unknown clef: " // clef[1]);
	}
	return Image(stavePosition.x + xOffset - anchorPoint.x * scale, stavePosition.y + 5 + 4 * spaceWidth - (clef[2] - 1) * spaceWidth - int(clef[2]) - anchorPoint.y * scale, imageWidth * scale, imageHeight * scale, url);
}

##Create the grand stave.
staveOrigin = {20, 30};
staveSpaceWidth = 11;
staveNoteRadius is staveSpaceWidth / 2;
staveLength = 400;
gapBetweenStaves is max(55, 2 * staveSpaceWidth + 1);

stave1LinesInLesson = [1, 3, 5];
stave2LinesInLesson = [1, 3, 5];
stave1Highlights = [];
stave2Highlights = [];

keySignature is cMajorKS;
stave1Clef is trebleClef;
stave1KeySignature is keySignature;
stave1Position is staveOrigin;
stave1Spaces is staveSpaces(stave1Position, staveLength, staveSpaceWidth, staveColours, stave1Highlights);
stave1Lines is staveLines(stave1Position, staveLength, staveSpaceWidth, staveColours, stave1LinesInLesson, stave1Highlights);
stave1ClefImage is clefImage(stave1Position, stave1Clef, staveSpaceWidth);

stave2Clef is bassClef;
stave2KeySignature is keySignature;
stave2Position is {staveOrigin.x, staveOrigin.y + 4 * staveSpaceWidth + 5 + gapBetweenStaves};
stave2Spaces is staveSpaces(stave2Position, staveLength, staveSpaceWidth, staveColours, stave2Highlights);
stave2Lines is staveLines(stave2Position, staveLength, staveSpaceWidth, staveColours, stave2LinesInLesson, stave2Highlights);
stave2ClefImage is clefImage(stave2Position, stave2Clef, staveSpaceWidth);

##Representation of musical notation on a stave:
##A list where each index represents a horizontal position on the stave, left to right.
##The content represents the markings on the stave at that horizontal position.
##
##Each element of the list is itself a list of the one or more markings present at a
##particular horizontal position.
##
##Each marking is described by a list with two, three or four elements.
##The general format is [lineNumber, colour, noteLength, listOfAnnotationsDrawnToTheLeftOrRight]
##
## Notes: [3, "black", "crotchet"] (crotchet on line 3)
## Rests: ["rest", "black", "crotchet"]
## With annotations: [3, "black", "crotchet", ["#"]] (an accidental)
## Annotation without a length of time: ["fff", "black"] (dynamics)

stave1Markings = [];
stave2Markings = [];

testNotesColour = "cyan";

proc generateRandomCrotchet {
	auto randomNumber;
	randomNumber = randomInteger(1, stave1LinesInLesson# + stave2LinesInLesson#);

	if (randomNumber <= stave1LinesInLesson#) {
		stave1Markings is [[[stave1LinesInLesson[randomNumber], testNotesColour, 1/4]]];
		stave2Markings is [];
	} else {
		stave1Markings is [];
		stave2Markings is [[[stave2LinesInLesson[randomNumber - stave1LinesInLesson#], testNotesColour, 1/4]]];
	}
}

##According to https://www.finalemusic.com/UserManuals/Finale2014Win/Content/Finale/Music_spacing.htm
##music is normally typeset using horizontal gaps between notes determined using a look up table of
##spacings allocated to different note lengths.
noteSpacing = 30;  ## Basic unit of spacing.
maximaWidth is 1 * noteSpacing;
longaWidth is 1 * noteSpacing;
breveWidth is 1 * noteSpacing;
semibreveWidth is 1 * noteSpacing;
minimWidth is 1 * noteSpacing;
crotchetWidth is 1 * noteSpacing;
quaverWidth is 3/4 * noteSpacing;
semiquaverWidth is 3/4 * noteSpacing;
thirtySecondNoteWidth is 3/4 * noteSpacing;
sixtyFourthNoteWidth is 3/4 * noteSpacing;
hundredTwentyEighthNoteWidth is 3/4 * noteSpacing;
twoHundredFiftySixthNoteWidth is 3/4 * noteSpacing;

func drawablesForStaveMarkings {
	para startPosition, spaceWidth, radius, staveMarkings, stemDirection;
	auto drawables, xPosition, leftToRightIndex, markNumber, marking;
	drawables = [];
	xPosition = startPosition.x;
	
	for (leftToRightIndex = 1; leftToRightIndex <= staveMarkings#; leftToRightIndex++) {
		
		for (markNumber = 1; markNumber <= staveMarkings[leftToRightIndex]#; markNumber++) {
			marking = staveMarkings[leftToRightIndex][markNumber];
			if (type(marking[1]) == "string") {
			
			} else {
				switch (marking[3]) {
				case "crotchet":
				
				default:
					error("Unsupported note length: " // marking[3]);
				}
			}
		} ##end for each marking in the given horizontal position
	} ##end for each horizontal position
	return drawables;
}

proc highlightWholeStave {
	para staveNum, lineColour, spaceColour;
	auto highlights;
	highlights = [[1, lineColour], [1.5, spaceColour], [2, lineColour], [2.5, spaceColour], [3, lineColour], [3.5, spaceColour], [4, lineColour], [4.5, spaceColour], [5, lineColour]];
	switch (staveNum) {
	case 1:
		stave1Highlights = highlights;
		break;
	case 2:
		stave2Highlights = highlights;
		break;
	default:
		error("Unknown stave number: " // staveNum);
	}
}

fingerFrameSpaceLineGap = 3;

func fingerFrame {
	para x, staveY, baseLine, spaceWidth, frameWidth, frameColour, fingerColours, isLeftHand;
	auto paintedFrame, colours;
	paintedFrame = (frameColour != @);
	if (isLeftHand) {
		colours = reverse(fingerColours);
	} else {
		colours = fingerColours;
	}
	if (baseLine == int(baseLine)) {
		##Starting on a line.
		return [
			##Lower space
			Rectangle(
				x,
				staveY + (5 - baseLine - 1) * (spaceWidth + 1),
				frameWidth,
				2 + spaceWidth,
				colours[2],
				paintedFrame? frameColour : colours[2]
			),
			
			##Upper space
			Rectangle(
				x,
				staveY + (5 - baseLine - 2) * (spaceWidth + 1),
				frameWidth,
				2 + spaceWidth,
				colours[4],
				paintedFrame? frameColour : colours[4]
			),
			
			##Base line
			Rectangle(
				x + (paintedFrame? 1 : 0),
				staveY + (5 - baseLine) * (spaceWidth + 1) - 1,
				frameWidth - (paintedFrame? 2 : 0),
				2,
				colours[1], colours[1]
			),

			##Middle line
			Rectangle(
				x + (paintedFrame? 1 : 0),
				staveY + (5 - baseLine - 1) * (spaceWidth + 1),
				frameWidth - (paintedFrame? 2 : 0),
				2,
				colours[3], colours[3]
			),

			##Top line
			Rectangle(
				x + (paintedFrame? 1 : 0),
				staveY + (5 - baseLine - 2) * (spaceWidth + 1),
				frameWidth - (paintedFrame? 2 : 0),
				2,
				colours[5], colours[5]
			)
		];
	} else {
		##Starting on a space.
		return [
			##Lower space
			Rectangle(
				x,
				staveY + (5 - baseLine - 0.5) * (spaceWidth + 1),
				frameWidth,
				1 + spaceWidth - fingerFrameSpaceLineGap,
				colours[1],
				paintedFrame? frameColour : colours[1]
			),
			
			##Middle space
			Rectangle(
				x,
				staveY + (5 - baseLine - 1.5) * (spaceWidth + 1),
				frameWidth,
				2 + spaceWidth,
				colours[3],
				paintedFrame? frameColour : colours[3]
			),
			
			##Upper space
			Rectangle(
				x,
				staveY + (5 - baseLine - 2.5) * (spaceWidth + 1) + fingerFrameSpaceLineGap,
				frameWidth,
				2 + spaceWidth - fingerFrameSpaceLineGap,
				colours[5],
				paintedFrame? frameColour : colours[5]
			),

			##Lower Middle line
			Rectangle(
				x + (paintedFrame? 1 : 0),
				staveY + (5 - baseLine - 0.5) * (spaceWidth + 1) - 1,
				frameWidth - (paintedFrame? 2 : 0),
				2,
				colours[2], colours[2]
			),

			##Upper Middle line
			Rectangle(
				x + (paintedFrame? 1 : 0),
				staveY + (5 - baseLine - 1.5) * (spaceWidth + 1) - 1,
				frameWidth - (paintedFrame? 2 : 0),
				2,
				colours[4], colours[4]
			)		
		];
	}
}

fingerFrameWidth = 30;
stave1FingerFrameX is staveOrigin.x + staveLength - 45 - fingerFrameWidth;
stave2FingerFrameX is stave1FingerFrameX;
fingerFrameBorderColour = "blue";
thumbColour = "red";
indexFingerColour = "yellow";
middleFingerColour = "#FF0080";
ringFingerColour = "#FFFF80";
littleFingerColour = "magenta";
stave1FingerFrameBaseline = 2;
stave2FingerFrameBaseline = 2;

func staveLineToDiatonicStepsFromA0 {
	para staveLine, clef;
	return clef[1][2] * 7 + diatonicStepsFromC(clef[1][1]) + (staveLine - clef[2]) * 2 - 5;
}

stave2PlayedWithLeftHand is (pianoKeyNumber(stave2Clef[1]) - stave2Clef[2] * 2 <= pianoKeyNumber(stave1Clef[1])  - stave1Clef[2] * 2);

##The following is a more pedantic version of the above.
##stave2PlayedWithLeftHand is (staveLineToDiatonicStepsFromA0(stave2FingerFrameBaseline, stave2Clef) <= staveLineToDiatonicStepsFromA0(stave1FingerFrameBaseline, stave1Clef));

stave1FingerFrame is fingerFrame(stave1FingerFrameX, stave1Position.y, stave1FingerFrameBaseline, staveSpaceWidth, fingerFrameWidth, fingerFrameBorderColour, [thumbColour, indexFingerColour, middleFingerColour, ringFingerColour, littleFingerColour], !stave2PlayedWithLeftHand);

stave2FingerFrame is fingerFrame(stave2FingerFrameX, stave2Position.y, stave2FingerFrameBaseline, staveSpaceWidth, fingerFrameWidth, fingerFrameBorderColour, [thumbColour, indexFingerColour, middleFingerColour, ringFingerColour, littleFingerColour], stave2PlayedWithLeftHand);

stave1FingerFrameUIX is stave1FingerFrameX + fingerFrameWidth + 15;
stave2FingerFrameUIX is stave2FingerFrameX + fingerFrameWidth + 15;
fingerFrameUIYOffset is 6 + 2 * staveSpaceWidth;

stave1FingerFrameDownButton is Button("stave1FingerFrameDownButton", "\u25BC",  stave1FingerFrameUIX, stave1Position.y + fingerFrameUIYOffset, true);
stave1FingerFrameUpButton is Button("stave1FingerFrameUpButton", "\u25B2", stave1FingerFrameDownButton.x, stave1FingerFrameDownButton.y - 19 , true);

stave2FingerFrameDownButton is Button("stave2FingerFrameDownButton", "\u25BC",  stave2FingerFrameUIX, stave2Position.y + fingerFrameUIYOffset, true);
stave2FingerFrameUpButton is Button("stave2FingerFrameUpButton", "\u25B2", stave2FingerFrameDownButton.x, stave2FingerFrameDownButton.y - 19 , true);

stave1FingerFrameUI is [stave1FingerFrameUpButton, stave1FingerFrameDownButton];
stave2FingerFrameUI is [stave2FingerFrameUpButton, stave2FingerFrameDownButton];

proc stave1MoveFingerFrameUp : stave1FingerFrameUpButton_clicked {
	if (stave1FingerFrameUpButton_clicked) {
		stave1FingerFrameBaseline = stave1FingerFrameBaseline + 0.5;
	}
}

proc stave2MoveFingerFrameUp : stave2FingerFrameUpButton_clicked {
	if (stave2FingerFrameUpButton_clicked) {
		stave2FingerFrameBaseline = stave2FingerFrameBaseline + 0.5;
	}
}

proc stave1MoveFingerFrameDown : stave1FingerFrameDownButton_clicked {
	if (stave1FingerFrameDownButton_clicked) {
		stave1FingerFrameBaseline = stave1FingerFrameBaseline - 0.5;
	}
}

proc stave2MoveFingerFrameDown : stave2FingerFrameDownButton_clicked {
	if (stave2FingerFrameDownButton_clicked) {
		stave2FingerFrameBaseline = stave2FingerFrameBaseline - 0.5;
	}
}

stavePicture is stave1Spaces // stave1Lines // stave2Spaces // stave2Lines // [stave1ClefImage, stave2ClefImage] // stave1FingerFrame // stave1FingerFrameUI // stave2FingerFrame // stave2FingerFrameUI;

##=============================================================================
##These definitions link the stave model to the piano model.

staveToPianoGap = 55;
pianoPosition is {10, max(stave1Position.y, stave2Position.y) + 4 * staveSpaceWidth + 5 + max(staveToPianoGap, staveSpaceWidth + 1 + staveNoteRadius)};

staveToControlsGap = 40;
pianoControlsPosition is {staveOrigin.x + staveLength + staveToControlsGap, staveOrigin.y - staveSpaceWidth / 2};

proc highlightKeysForHighlightedStaveLines {
	keyHighlights is mapStaveHighlightsToKeyHighlights(stave1Highlights, stave1Clef, stave1KeySignature) //
		mapStaveHighlightsToKeyHighlights(stave2Highlights, stave2Clef, stave2KeySignature);
}

highlightStaveLinesChoice = "Highlighted Stave Lines";
if (keyHighlightChoices != @) {
	tempIndex = indexOf(highlightStaveLinesChoice, keyHighlightChoices);
	if (tempIndex == 0) {
		append keyHighlightChoices, highlightStaveLinesChoice;
		tempIndex = keyHighlightChoices#;
	}
	keyHighlightProcedures[tempIndex] = &highlightKeysForHighlightedStaveLines;
	forget("tempIndex");
} else {
	keyHighlightChoices = [highlightStaveLinesChoice];
	keyHighlightProcedures = [&highlightKeysForHighlightedStaveLines];
}
after (50) {
	keyHighlightingChooser_value = highlightStaveLinesChoice;
}

leftThumbDiatonicStepsFromA0 is stave2PlayedWithLeftHand?
	staveLineToDiatonicStepsFromA0(stave2FingerFrameBaseline, stave2Clef) + 4 :
	staveLineToDiatonicStepsFromA0(stave1FingerFrameBaseline, stave1Clef) + 4;
noteUnderLeftThumb is diatonicStepsFromA0ToNote(leftThumbDiatonicStepsFromA0);

rightThumbDiatonicStepsFromA0 is stave2PlayedWithLeftHand?
	staveLineToDiatonicStepsFromA0(stave1FingerFrameBaseline, stave1Clef) :
	staveLineToDiatonicStepsFromA0(stave2FingerFrameBaseline, stave2Clef);
noteUnderRightThumb is diatonicStepsFromA0ToNote(rightThumbDiatonicStepsFromA0);

leftHandInKeyOf is stave2PlayedWithLeftHand? stave2KeySignature : stave1KeySignature;
rightHandInKeyOf is stave2PlayedWithLeftHand? stave1KeySignature : stave2KeySignature;


if (pianoPicture == @) {
	pianoPicture = [];
	pianoControlsPicture = [];
}

picture is pianoPicture // pianoControlsPicture // stavePicture;
