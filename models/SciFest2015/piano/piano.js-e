##Model of a piano
##
##Include abstractMusicTheory.js-e before running this script.
##
##Outstanding bugs:
##Notes from F#7 onwards don't sound as high as they should.  The default sampling
##rate is 11025, which becomes less than 4 samples per cycle for these high notes,
##which is probably insufficient.  Need to delve into the audio library more deeply
##and learn how to override the default.

##All names of notes use the English naming convention A..G unless stated
##otherwise.  Where it is use useful to distinguish between two notes an
##octave apart the scientific naming convention is used, giving names for
##the keys on a standard piano keyboard in the sequence A0..C8.

##Include the JavaScript sound library
##include("models/SciFest2015/piano/audio.js-e");

##Map JavaScript variables onto EDEN observables.
${{
	declare_jse("toneGenerator");
	toneGenerator = DataGenerator;
}}$;

##Returns the sound wave object corresponding to a given piano key number.
##At the moment the sound is very unrealistic because it only includes a
##single fundamental frequency and no harmonics.
func pianoSound {
	${{
		var pianoKeyNumber = arguments[0];
		var audioObj = new Audio(Notes.getDataURI(pianoKeyNumber - 40));
		audioObj.getEdenCode = function () {
			return "pianoSound(" + pianoKeyNumber + ")";
		};
		audioObj.toString = audioObj.getEdenCode;
		return audioObj;
	}}$;
}

##Defines an observable (e.g. ASharp0Sound) representing the sound of a given
##piano key number.
proc buildSound {
	para keyNumber;
	auto note, soundDefinition;
	note = noteName(keyNumber);
	note = replaceFirst(note, sharpSymbol, symbolToIdentifier(sharpSymbol));

	soundDefinition = note // "Sound = pianoSound(" // str(keyNumber) // ");";
	createDefinition("buildSounds()", soundDefinition);
}

##Defines the complete range of piano sounds (or the ones currently supported
##by the model anyway!).
##A0Sound..C8Sound and ASharp0Sound..GSharp7Sound are obserables, each
##representing the sound of a single piano key played for a fixed duration.
##sounds is a list of all of the sounds in piano key order.
proc buildSounds {
	auto keyNumber, octave, octaveStr, soundsDef;

	##Define the sound of each key.
	for (keyNumber = 1; keyNumber <= 88; keyNumber++) {
		buildSound(keyNumber);
	}
	
	##A define a list of sounds in piano key order.
	soundsDef = "pianoKeySounds is [A0Sound, ASharp0Sound, B0";
	for (octave = 1; octave <= 7; octave++) {
		octaveStr = str(octave);
		soundsDef = soundsDef // "Sound, C" // octaveStr;
		soundsDef = soundsDef // "Sound, CSharp" // octaveStr;
		soundsDef = soundsDef // "Sound, D" // octaveStr;
		soundsDef = soundsDef // "Sound, DSharp" // octaveStr;
		soundsDef = soundsDef // "Sound, E" // octaveStr;
		soundsDef = soundsDef // "Sound, F" // octaveStr;
		soundsDef = soundsDef // "Sound, FSharp" // octaveStr;
		soundsDef = soundsDef // "Sound, G" // octaveStr;
		soundsDef = soundsDef // "Sound, GSharp" // octaveStr;
		soundsDef = soundsDef // "Sound, A" // octaveStr;
		soundsDef = soundsDef // "Sound, ASharp" // octaveStr;
		soundsDef = soundsDef // "Sound, B" // octaveStr;
	}
	soundsDef = soundsDef // "Sound, C8Sound];";
	createDefinition("buildSounds()", soundsDef);
}

buildSounds();

if (picture# == 0) {
	picture is pianoPicture // pianoControlsPicture;
}

if (pianoControlsPosition == @) {
	pianoControlsPosition = {10, 5};
}
if (pianoPosition == @) {
	pianoPosition = {pianoControlsPosition.x, pianoControlsPosition.y + 25};
}

##Piano key dimensions are taken from:
## http://www.quadibloc.com/other/cnv05.htm
naturalKeyWidth = 20;
naturalKeyLength is (5 + 3/8) / (0.864 * 1.066) * naturalKeyWidth;
sharpKeyWidth is 20 / 35 * naturalKeyWidth;
sharpKeyLength is 3.5 / 5.5 * naturalKeyLength; ##Measured from Meurig's keyboard.
naturalKeyColour = "white";
sharpKeyColour = "black";

##Returns a Drawable that represents the piano key corresponding to a given piano key number.
func keyVisual {
	para keyNumber, xOffset, yOffset, whiteKeyWidth, whiteKeyLen, blackKeyWidth, blackKeyLen, highlightColour;
	auto xPos, keyWidth, keyHeight, colour;
	xPos = xOffset + int((keyNumber - 1) / 12) * 7 * whiteKeyWidth;
	switch ((keyNumber - 1) % 12) {
	case 0: ## A
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = naturalKeyColour;
		break;
	case 1: ## A#
		xPos = xPos - 2 * whiteKeyWidth + 5 * blackKeyWidth;
		keyWidth = blackKeyWidth;
		keyHeight = blackKeyLen;
		colour = sharpKeyColour;
		break;
	case 2: ## B
		xPos = xPos + whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = naturalKeyColour;
		break;
	case 3: ## C
		xPos = xPos +  2 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = naturalKeyColour;
		break;
	case 4: ## C#
		xPos = xPos +  2 * whiteKeyWidth + blackKeyWidth * 21/20;
		keyWidth = blackKeyWidth * 21/20;
		keyHeight = blackKeyLen;
		colour = sharpKeyColour;
		break;
	case 5: ## D
		xPos = xPos +  3 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = naturalKeyColour;
		break;
	case 6: ## D#
		xPos = xPos +  2 * whiteKeyWidth + 3 * blackKeyWidth * 21/20;
		keyWidth = blackKeyWidth * 21/20;
		keyHeight = blackKeyLen;
		colour = sharpKeyColour;
		break;
	case 7: ## E
		xPos = xPos +  4 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = naturalKeyColour;
		break;
	case 8: ## F
		xPos = xPos +  5 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = naturalKeyColour;
		break;
	case 9: ## F#
		xPos = xPos +  5 * whiteKeyWidth + blackKeyWidth;
		keyWidth = blackKeyWidth;
		keyHeight = blackKeyLen;
		colour = sharpKeyColour;
		break;
	case 10: ## G
		xPos = xPos +  6 * whiteKeyWidth;
		keyWidth = whiteKeyWidth;
		keyHeight = whiteKeyLen;
		colour = naturalKeyColour;
		break;
	case 11: ## G#
		xPos = xPos +  5 * whiteKeyWidth + 3 * blackKeyWidth;
		keyWidth = blackKeyWidth;
		keyHeight = blackKeyLen;
		colour = sharpKeyColour;
		break;
	}
	if (highlightColour != @) {
		colour = highlightColour;
	}
	return Rectangle(xPos, yOffset, keyWidth, keyHeight, colour, "black");
}

## The keys currently highlighted on the keyboard are the key names in this list.
## They are paired with the corresponding highlight colour.
## E.g. keyHighlights = [["A0", "red"]];

##These colours serve as the user's preferred default highlighting colours
##available for agents and definitions to make use of if they wish.
defaultNaturalKeyHighlightColour = "green";
defaultSharpKeyHighlightColour = "lime";

func twoToneKeyHighlighting {
	para highlightedKeys, naturalHighlightColour, sharpHighlightColour;
	auto i, symbol, result;
	result = [];
	for (i = 1; i <= highlightedKeys#; i++) {
		symbol = substr(highlightedKeys[i], 2, highlightedKeys[i]# - 1);
		if (symbol == sharpSymbol || symbol == flatSymbol) {
			append result, [highlightedKeys[i], sharpHighlightColour];
		} else {
			append result, [highlightedKeys[i], naturalHighlightColour];
		}
	}
	return result;
}

##For a higher level of control than keyHighlights set the observable highlightedKeys
##to the list of key names that you wanted highlighted on the keyboard and they'll be
##highlighted in the default colours.
## E.g. highlightedKeys = ["A0"];
proc highlightHighlightedKeys {
	keyHighlights is twoToneKeyHighlighting(highlightedKeys, defaultNaturalKeyHighlightColour, defaultSharpKeyHighlightColour);
}

func transposeKeyHighlights {
	para highlights;
	auto result, i, letter, symbol, octaveText;
	result = [];
	for (i = 1; i <= highlights#; i++) {
		symbol = substr(highlights[i][1], 2, highlights[i][1]# - 1);
		if (symbol == "" || symbol == sharpSymbol) {
			append result, highlights[i];
		} else {
			letter = highlights[i][1][1];
			octaveText = highlights[i][1][highlights[i][1]#];
			
			if (symbol == flatSymbol) {
				if (letter == "C") {
					letter = "B";
					symbol = "";
					octaveText = str(int(octaveText) - 1);
				} else if (letter == "F") {
					letter = "E";
					symbol = "";
				} else {
					letter = diatonicIncrement(letter, 6);
					symbol = sharpSymbol;
				}

			} else if (symbol == naturalSymbol) {
				symbol = "";

			} else if (symbol == doubleFlatSymbol) {
				if (letter == "C") {
					letter = "A";
					symbol = sharpSymbol;
					octaveText = str(int(octaveText) - 1);
				} else if (letter == "F") {
					letter = "D";
					symbol = sharpSymbol;
				} else {
					letter = diatonicIncrement(letter, 6);
					symbol = "";
				}
				
			} else if (symbol == doubleSharpSymbol) {
				if (letter == "B") {
					letter = "C";
					symbol = sharpSymbol;
					octaveText = str(int(octaveText) + 1);					
				} else if (letter == "E") {
					letter = "F";
					symbol = sharpSymbol;				
				} else {
					letter = diatonicIncrement(letter, 1);
					symbol = "";
				}

			}
			
			append result, [letter // symbol // octaveText, highlights[i][2]];
		}
	}
	return result;
}


sortedKeyHighlights is sort(transposeKeyHighlights(keyHighlights));

if (keyHighlights == @) {
	highlightedKeys = [];
	highlightHighlightedKeys();
}

func keyHighlight {
	para highlighted, note;
	auto index;
	index = search(note, highlighted, firstElementComparison, 1, true);
	if (index == 0) {
		return @;
	} else {
		return highlighted[index][2];
	}
}

##Defines an observable (e.g. keyASharp0) for the visual representation of a
##single piano key, given its piano key number.
proc buildKey {
	para keyNumber;
	auto note, keyDefinition;
	note = noteName(keyNumber);
	note = replaceFirst(note, sharpSymbol, symbolToIdentifier(sharpSymbol));

	keyDefinition = "key" // note // " is keyVisual(" // str(keyNumber);
	keyDefinition = keyDefinition // ", pianoPosition.x, pianoPosition.y, naturalKeyWidth, naturalKeyLength, sharpKeyWidth, sharpKeyLength, ";
	keyDefinition = keyDefinition // "keyHighlight(sortedKeyHighlights, " // edenCode(noteName(keyNumber)) // "));";
	createDefinition("buildKeys()", keyDefinition);
}

##Defines observables for the visual representation of a complete piano keyboard.
##keyA0..keyC8 and keyASharp0..keyGSharp7 are Drawable observables representing
##	the individual keys.
##keyboard is the list containing each of the keyXX observables in the order that
##	they are painted onto the screen, all of the natural notes first, then the
##	sharps.
##pianoKeyNumToDrawOrder is a list in piano key order whose elements are the
##	index numbers where the corresponding piano key can be found in the
##	keyboard observable.
##drawOrderToPianoKeyNum is the reverse transformation from screen painting
##	order to piano key number.
proc buildKeys {
	auto keyNumber, octave, octaveStr, keyboardDef, keysListed;
	
	##Define each individual key.
	for (keyNumber = 1; keyNumber <= 88; keyNumber++) {
		buildKey(keyNumber);
	}
	
	##Define the order to draw the keys in and the mappings between the drawing order
	##and piano key number order.
	keyboardDef = "keyboard is [keyA0, keyB0";
	pianoKeyNumToDrawOrder = array(88, @);
	pianoKeyNumToDrawOrder[1] = 1;
	pianoKeyNumToDrawOrder[3] = 2;
	drawOrderToPianoKeyNum = [1, 3];
	keysListed = 2;

	for (octave = 1; octave <= 7; octave++) {
		octaveStr = str(octave);
		keyboardDef = keyboardDef // ", keyC" // octaveStr;
		keyboardDef = keyboardDef // ", keyD" // octaveStr;
		keyboardDef = keyboardDef // ", keyE" // octaveStr;
		keyboardDef = keyboardDef // ", keyF" // octaveStr;
		keyboardDef = keyboardDef // ", keyG" // octaveStr;
		keyboardDef = keyboardDef // ", keyA" // octaveStr;
		keyboardDef = keyboardDef // ", keyB" // octaveStr;

		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 4] = keysListed + 1;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 6] = keysListed + 2;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 8] = keysListed + 3;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 9] = keysListed + 4;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 11] = keysListed + 5;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 13] = keysListed + 6;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 15] = keysListed + 7;
		keysListed = keysListed + 7;
		
		drawOrderToPianoKeyNum = drawOrderToPianoKeyNum // [
			(octave - 1) * 12 + 4,  ## C
			(octave - 1) * 12 + 6,  ## D
			(octave - 1) * 12 + 8,  ## E
			(octave - 1) * 12 + 9,  ## F
			(octave - 1) * 12 + 11, ## G
			(octave - 1) * 12 + 13, ## A
			(octave - 1) * 12 + 15  ## B
		];
		
	}
	
	keyboardDef = keyboardDef // ", keyC8, keyASharp0";
	pianoKeyNumToDrawOrder[88] = keysListed + 1;
	keysListed = keysListed + 1;
	numberOfNaturals = keysListed;
	pianoKeyNumToDrawOrder[2] = keysListed + 1;
	keysListed = keysListed + 1;
	append drawOrderToPianoKeyNum, 88;
	append drawOrderToPianoKeyNum, 2;
	
	for (octave = 1; octave <= 7; octave++) {
		octaveStr = str(octave);
		keyboardDef = keyboardDef // ", keyCSharp" // octaveStr;
		keyboardDef = keyboardDef // ", keyDSharp" // octaveStr;
		keyboardDef = keyboardDef // ", keyFSharp" // octaveStr;
		keyboardDef = keyboardDef // ", keyGSharp" // octaveStr;
		keyboardDef = keyboardDef // ", keyASharp" // octaveStr;

		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 5] = keysListed + 1;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 7] = keysListed + 2;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 10] = keysListed + 3;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 12] = keysListed + 4;
		pianoKeyNumToDrawOrder[(octave - 1) * 12 + 14] = keysListed + 5;
		keysListed = keysListed + 5;

		##The drawing order of the sharps isn't currently used anywhere in the
		##model but it's calculated here for completeness.
		drawOrderToPianoKeyNum = drawOrderToPianoKeyNum // [
			(octave - 1) * 12 + 5,  ## C#
			(octave - 1) * 12 + 7,  ## D#
			(octave - 1) * 12 + 10, ## F#
			(octave - 1) * 12 + 12, ## G#
			(octave - 1) * 12 + 14  ## A#
		];
	}
	keyboardDef = keyboardDef // "];";
	createDefinition("buildKeys()", keyboardDef);	
}

buildKeys();

##The model contains automated agents that temporarily highlight some keys and
##then restore keyHighlights back to its previous definition when the agents'
##work is done.

##When this observable has the value 1 then a dependency is maintained to ensure
##that the observable keyHighlightsDef always holds the text of the EDEN definition
##last used to change keyHighlights.  When saveKeyHighlightChanges is 0 then
##keyHighlights is in the process of being temporarily changed by an automated
##agent and the new temporary definition is not saved.

saveKeyHighlightChanges = 1;

proc backupKeyHighlights : keyHighlights {
	if (saveKeyHighlightChanges) {
		keyHighlightsDef = definitionOf("keyHighlights");
	}
}

##Synchronize keyHighlightsDef with whatever definition of keyHighlights is already in effect.
backupKeyHighlights();

func findPianoKeyFromPixelPosition {
	para position;
	auto x, y, middleKeyDrawOrder, middleKeyNum, leftKeyRect, rightKeyRect, pianoKeyOver;
	x = position.x;
	y = position.y;

	if (x >= pianoPosition.x && x < rightmostPianoCoordinate &&
	 y >= pianoPosition.y && y < pianoPosition.y + naturalKeyLength) {			
		
		##Find out which piano key the mouse pointer is above.  We first locate the
		##white key whose zone the mouse pointer is within.  The pointer might actually
		##be above one of the black keys that are located on either side, so we
		##check the bounds of the rectangle representing the key that is one piano
		##key number lower than our initial guess (irrespective of whether the key
		##to the left is black or white, though the check is unnecessary if it is in
		##fact white) and similarly for the rectangle representing the key that
		##is one piano key number higher than the initial guess.  If we're not positioned
		##above a sharp key that's slightly to the left or slightly to the right
		##of our initial guess then our initially guessed white key was the key that
		##the mouse is actually over.
		
		middleKeyDrawOrder = int((x - pianoPosition.x) / naturalKeyWidth) + 1;
		middleKeyNum = drawOrderToPianoKeyNum[middleKeyDrawOrder];
		pianoKeyOver = @;
		
		if (middleKeyNum > 1) {
			leftKeyRect = keyboard[pianoKeyNumToDrawOrder[middleKeyNum - 1]];
			if (x >= leftKeyRect.x && x < leftKeyRect.x + leftKeyRect.width && y >= leftKeyRect.y && y < leftKeyRect.y + leftKeyRect.height) {
				pianoKeyOver = middleKeyNum - 1;
			}
		}
		
		if (middleKeyDrawOrder < numberOfNaturals) {
			rightKeyRect = keyboard[pianoKeyNumToDrawOrder[middleKeyNum + 1]];
			if (x >= rightKeyRect.x && x < rightKeyRect.x + rightKeyRect.width && y >= rightKeyRect.y && y < rightKeyRect.y + rightKeyRect.height) {
				pianoKeyOver = middleKeyNum + 1;
			}				
		}
		
		if (pianoKeyOver == @) {
			pianoKeyOver = middleKeyNum;
		}
		return pianoKeyOver;
	} else {
		##Mouse pointer not positioned above the piano.
		return @;
	}
}

proc showPianoKeyUnderMousePointer {
	pianoKeyUnderMousePointer is findPianoKeyFromPixelPosition(mousePosition);
	noteUnderMousePointer is pianoKeyUnderMousePointer == @? @ : noteName(pianoKeyUnderMousePointer);
	showObservables("pianoKeyUnderMousePointer|noteUnderMousePointer");
}

keyHighlightLag = 50;

##This procedure is an automated agent that temporarily modifies the highlighting.
proc playNoteWhenClicked : mousePressed {
	auto savingKeyHighlightChanges, pianoKeyHit, noteHit;
	if (mousePressed) {
			if (pianoKeyUnderMousePointer != @) {
				pianoKeyHit = pianoKeyUnderMousePointer;
			} else {
				pianoKeyHit = findPianoKeyFromPixelPosition(mousePosition);
			}
			if (noteUnderMousePointer != @) {
				noteHit = noteUnderMousePointer;
			} else if (pianoKeyHit != @) {
				noteHit = noteName(pianoKeyHit);
			} else {
				noteHit = @;
			}
			
			if (noteHit != @) {
				savingKeyHighlightChanges = saveKeyHighlightChanges;
				saveKeyHighlightChanges = 0;
				keyHighlights = twoToneKeyHighlighting([noteHit], defaultNaturalKeyHighlightColour, defaultSharpKeyHighlightColour);
				pianoKeySounds[pianoKeyHit].play();
				saveKeyHighlightChanges = savingKeyHighlightChanges;
			}
	} else {
		after (keyHighlightLag) {
			savingKeyHighlightChanges = saveKeyHighlightChanges;
			saveKeyHighlightChanges = 0;
			execute(keyHighlightsDef);
			saveKeyHighlightChanges = savingKeyHighlightChanges;
		}
	}
}

fingerLabelFontSizeInPx is naturalKeyWidth / 2;
fingerLabelPadding = 1;
fingerLabelNaturalTextColour = "red";
fingerLabelNaturalBGColour = "white";
fingerLabelSharpTextColour = "white";
fingerLabelSharpBGColour = "black";
fingerLabelSharpBorderColour = "aqua";

fingerLabelWidth is fingerLabelFontSizeInPx + 2 * fingerLabelPadding;
fingerLabelHeight is (fingerLabelFontSizeInPx + 2 * max(2, fingerLabelPadding)) * 1.6;
fingerLabelYPos is naturalKeyLength + 5;
fingerLabelSharpOffset = 0;

fingerLabelStyle is
		"text-align: center; font-weight: bold;" //
		(naturalKeyWidth - fingerLabelWidth >= 1? " border-radius: 4px;" : "") //
		" font-size: " // str(fingerLabelFontSizeInPx) // "px;" //
		" padding-top: " // str((fingerLabelHeight - fingerLabelFontSizeInPx) / 2 + 1) // "px;";

fingerLabelNaturalStyle is fingerLabelStyle //
	" color: " // fingerLabelNaturalTextColour // 
	"; background: " // fingerLabelNaturalBGColour //
	(naturalKeyWidth - fingerLabelWidth >= 1? "; border: 1px solid " // fingerLabelNaturalTextColour : "") // ";";

fingerLabelSharpStyle is fingerLabelStyle //
	" color: " // fingerLabelSharpTextColour // 
	"; background: " // fingerLabelSharpBGColour //
	(naturalKeyWidth - fingerLabelWidth >= 1? "; border: 1px solid " // fingerLabelSharpBorderColour : "") // ";";

func fingerLabel {
	para hand, label, numDiatonicStepsFromA0, optionalAccidentalSymbol, keySignature, keyWidth, boxWidth, boxHeight, origin, yOffset, sharpYOffset, naturalStyle, sharpStyle;
	auto semitoneAdjustment;

	semitoneAdjustment = keyOrAccidentalAdjustment(diatonicStepsFromCToLetter(numDiatonicStepsFromA0 + 5), optionalAccidentalSymbol, keySignature);

	return Div(
		label,
		origin.x + keyWidth * (numDiatonicStepsFromA0 + 0.5) - boxWidth / 2 + semitoneAdjustment * 0.5 * keyWidth,
		origin.y + yOffset + (semitoneAdjustment != 0? -sharpYOffset : 0),
		boxWidth,
		boxHeight,
		semitoneAdjustment == 0? naturalStyle : sharpStyle
	);
}

numberedFingerLabelText = ["1", "2", "3", "4", "5"];
solfegeFingerLabelText = ["Do", "Re", "Mi", "Fa", "Sol"];
fingerLabelText is numberedFingerLabelText;
thumbsLabelledSame = true;
rightHandFingerLabelText is fingerLabelText;
leftHandFingerLabelText is thumbsLabelledSame? rightHandFingerLabelText : reverse(rightHandFingerLabelText);

if (leftThumbDiatonicStepsFromA0 == @) {
	noteUnderLeftThumb = "C3";
	leftThumbDiatonicStepsFromA0 is diatonicStepsFromA0(noteUnderLeftThumb);
}
leftIndexFingerDiatonicStepsFromA0 is leftThumbDiatonicStepsFromA0 - 1;
leftMiddleFingerDiatonicStepsFromA0 is leftThumbDiatonicStepsFromA0 - 2;
leftRingFingerDiatonicStepsFromA0 is leftThumbDiatonicStepsFromA0 - 3;
leftLittleFingerDiatonicStepsFromA0 is leftThumbDiatonicStepsFromA0 - 4;
leftThumbAccidental is substr(noteUnderLeftThumb, 2, noteUnderLeftThumb# - 1);
leftIndexFingerAccidental = @;
leftMiddleFingerAccidental = @;
leftRingFingerAccidental = @;
leftLittleFingerAccidental = @;

if (rightThumbDiatonicStepsFromA0 == @) {
	noteUnderRightThumb = "C4";
	rightThumbDiatonicStepsFromA0 is diatonicStepsFromA0(noteUnderRightThumb);
}
rightIndexFingerDiatonicStepsFromA0 is rightThumbDiatonicStepsFromA0 + 1;
rightMiddleFingerDiatonicStepsFromA0 is rightThumbDiatonicStepsFromA0 + 2;
rightRingFingerDiatonicStepsFromA0 is rightThumbDiatonicStepsFromA0 + 3;
rightLittleFingerDiatonicStepsFromA0 is rightThumbDiatonicStepsFromA0 + 4;
rightThumbAccidental is substr(noteUnderRightThumb, 2, noteUnderRightThumb# - 1);
rightIndexFingerAccidental = @;
rightMiddleFingerAccidental = @;
rightRingFingerAccidental = @;
rightLittleFingerAccidental = @;

if (leftHandInKeyOf == @) {
	leftHandInKeyOf is cMajorKS;
}
if (rightHandInKeyOf == @) {
	rightHandInKeyOf is cMajorKS;
}

fingerLabelsShown = true;
leftThumbFingerLabelShown is fingerLabelsShown;
leftIndexFingerLabelShown is fingerLabelsShown;
leftMiddleFingerLabelShown is fingerLabelsShown;
leftRingFingerLabelShown is fingerLabelsShown;
leftLittleFingerLabelShown is fingerLabelsShown;
rightThumbFingerLabelShown is fingerLabelsShown;
rightIndexFingerLabelShown is fingerLabelsShown;
rightMiddleFingerLabelShown is fingerLabelsShown;
rightRingFingerLabelShown is fingerLabelsShown;
rightLittleFingerLabelShown is fingerLabelsShown;

leftThumbFingerLabel is leftThumbFingerLabelShown? fingerLabel(
	"left", leftHandFingerLabelText[1],
	leftThumbDiatonicStepsFromA0, leftThumbAccidental, leftHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

leftIndexFingerLabel is leftIndexFingerLabelShown? fingerLabel(
	"left", leftHandFingerLabelText[2],
	leftIndexFingerDiatonicStepsFromA0, leftIndexFingerAccidental, leftHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

leftMiddleFingerLabel is leftMiddleFingerLabelShown? fingerLabel(
	"left", leftHandFingerLabelText[3],
	leftMiddleFingerDiatonicStepsFromA0, leftMiddleFingerAccidental, leftHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

leftRingFingerLabel is leftRingFingerLabelShown? fingerLabel(
	"left", leftHandFingerLabelText[4],
	leftRingFingerDiatonicStepsFromA0, leftRingFingerAccidental, leftHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

leftLittleFingerLabel is leftLittleFingerLabelShown? fingerLabel(
	"left", leftHandFingerLabelText[5],
	leftLittleFingerDiatonicStepsFromA0, leftLittleFingerAccidental, leftHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

rightThumbFingerLabel is rightThumbFingerLabelShown? fingerLabel(
	"right", rightHandFingerLabelText[1],
	rightThumbDiatonicStepsFromA0, rightThumbAccidental, rightHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

rightIndexFingerLabel is rightIndexFingerLabelShown? fingerLabel(
	"right", rightHandFingerLabelText[2],
	rightIndexFingerDiatonicStepsFromA0, rightIndexFingerAccidental, rightHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

rightMiddleFingerLabel is rightMiddleFingerLabelShown? fingerLabel(
	"right", rightHandFingerLabelText[3],
	rightMiddleFingerDiatonicStepsFromA0, rightMiddleFingerAccidental, rightHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

rightRingFingerLabel is rightRingFingerLabelShown? fingerLabel(
	"right", rightHandFingerLabelText[4],
	rightRingFingerDiatonicStepsFromA0, rightRingFingerAccidental, rightHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

rightLittleFingerLabel is rightLittleFingerLabelShown? fingerLabel(
	"right", rightHandFingerLabelText[5],
	rightLittleFingerDiatonicStepsFromA0, rightLittleFingerAccidental, rightHandInKeyOf,
	naturalKeyWidth, fingerLabelWidth, fingerLabelHeight, pianoPosition, fingerLabelYPos, fingerLabelSharpOffset,
	fingerLabelNaturalStyle, fingerLabelSharpStyle
) : @;

leftHandFingerLabels is [leftThumbFingerLabel, leftIndexFingerLabel, leftMiddleFingerLabel, leftRingFingerLabel, leftLittleFingerLabel];
rightHandFingerLabels is [rightThumbFingerLabel, rightIndexFingerLabel, rightMiddleFingerLabel, rightRingFingerLabel, rightLittleFingerLabel];

pianoPicture is keyboard // leftHandFingerLabels // rightHandFingerLabels;

handSplitStartingPoint = 3;

leftHandOctave is int((leftThumbDiatonicStepsFromA0 + 5) / 7);
rightHandOctave is int((rightThumbDiatonicStepsFromA0 + 5) / 7);
handSplit is leftHandOctave < rightHandOctave?
	min(max(handSplitStartingPoint, leftHandOctave + 1), rightHandOctave) :
	int((max(leftThumbDiatonicStepsFromA0 + 1, rightThumbDiatonicStepsFromA0) + 5) / 7 + 0.5);

leftHandNaturalHighlightColor = "#CC6699";
leftHandSharpHighlightColor = "#F800F8";
rightHandNaturalHighlightColor = "#5588CC";
rightHandSharpHighlightColor = "#0000F8";

proc highlightKeysInKey {
	keyHighlights is 
		twoToneKeyHighlighting(keysInKey(leftHandInKeyOf, 0, handSplit - 1), leftHandNaturalHighlightColor, leftHandSharpHighlightColor) //
		twoToneKeyHighlighting(keysInKey(rightHandInKeyOf, handSplit, 8), rightHandNaturalHighlightColor, rightHandSharpHighlightColor);
}

highlightKeyListChoice = "Chosen Keys";
highlightNotesInKeyChoice = "Key Signature";
if (keyHighlightChoices != @) {
	tempIndex = indexOf(highlightKeyListChoice, keyHighlightChoices);
	if (tempIndex == 0) {
		append keyHighlightChoices, highlightKeyListChoice;
		tempIndex = keyHighlightChoices#;
	}
	keyHighlightProcedures[tempIndex] = &highlightHighlightedKeys;

	tempIndex = indexOf(highlightNotesInKeyChoice, keyHighlightChoices);
	if (tempIndex == 0) {
		append keyHighlightChoices, highlightNotesInKeyChoice;
		tempIndex = keyHighlightChoices#;
	}
	keyHighlightProcedures[tempIndex] = &highlightKeysInKey;
	forget("tempIndex");
} else {
	keyHighlightChoices = [highlightKeyListChoice, highlightNotesInKeyChoice];
	keyHighlightProcedures = [&highlightHighlightedKeys, &highlightKeysInKey];
}

keyHighlightingUIPos is pianoControlsPosition;
keyHighlightingChooser is Combobox("keyHighlightingChooser", keyHighlightChoices, keyHighlightingUIPos.x + 105, keyHighlightingUIPos.y);
keyHighlightingLabel is Text("Key Highlighting:", keyHighlightingUIPos.x, keyHighlightingUIPos.y + 3);
keyHighlightingUI is [keyHighlightingLabel, keyHighlightingChooser];

proc changeKeyHighlighting : keyHighlightingChooser_value {
	auto i;
	for (i = 1; i <= keyHighlightChoices#; i++) {
		if (keyHighlightingChooser_value == keyHighlightChoices[i]) {
			(*(keyHighlightProcedures[i]))();
			return;
		}
	}
}

pianoControlsPicture is keyHighlightingUI;

func farEdgeOfPiano {
	para pic;
	auto i;
	for (i = numberOfNaturals; i >= 1; i--) {
		if (indexOf(keyboard[i], pic) != 0) {
			return keyboard[i].x + keyboard[i].width;
		}
	}
	return pianoPosition.x - 1;
}

rightmostPianoCoordinate is farEdgeOfPiano(pianoPicture);
_view_picture_width is rightmostPianoCoordinate + 16;

proc playNotes95bpm {
	para notes;
	auto keyNumbers, i;

	if (notes# == 0) {
		return;
	}
	keyNumbers = map(pianoKeyNumber, notes);	
	saveKeyHighlightChanges = 0;
	playAndHighlight95bpm(1, notes, keyNumbers);
}

proc playAndHighlight95bpm {
	para i, notes, keys;
	after(500) {
		keyHighlights = transposeKeyHighlights([[notes[i], "red"]]);
		pianoKeySounds[keys[i]].play();		
		if (i < notes#) {
			playAndHighlight95bpm(i + 1, notes, keys);
		} else {
			after (500) {
				execute(keyHighlightsDef);
				saveKeyHighlightChanges = 1;
			}
		}
	}
}

##playScale(ascendingNotes, octaveOfBaseNote)
##playScale(ascendingNotes, descendingNotes, octaveOfBaseNote)
##ascendingNotes and descendingNotes should not include the octave numbers.
##If the value of descendingNotes looks like an ascending sequence then it will
##be automatically reversed.
proc playScale {
        auto ascendingNotes, descendingNotes, octaveApartNote;
        if ($# == 3) {
			ascendingNotes = placeScaleInOctave($[1], $[3]);
			if (isScaleAscending($[2])) {
				descendingNotes = placeScaleInOctave(reverse($[2]), ascendingNotes[ascendingNotes#][ascendingNotes[ascendingNotes#]#]);
			} else {
				descendingNotes = placeScaleInOctave($[2], ascendingNotes[ascendingNotes#][ascendingNotes[ascendingNotes#]#]);
			}
		} else if ($# == 2) {
			ascendingNotes = placeScaleInOctave($[1], $[2]);
			descendingNotes = reverse(ascendingNotes);
		} else {
			error("playScale: two or three arguments required - ascending notes, descending notes (optional), and an octave number.");
			return;
		}
		octaveApartNote = substr(ascendingNotes[1], 1, ascendingNotes[1]# - 1) // str(int(ascendingNotes[1][ascendingNotes[1]#]) + 1);
        playNotes95bpm(ascendingNotes // [octaveApartNote] // descendingNotes);
}
