include("models/jspe/run.e");
${{
	edenUI.setOptionValue("fotd-sticker", (new Date()).getTime());
	var element = document.getElementById("fotd-sticker");
	if (element) {
		element.style.visibility = "hidden";
	}
}}$;

introducedDateCSS = "font-size: 133%";
bindCSSRule("#jspe", ".date", &introducedDateCSS);

slideZones is Slide("
	<h1>Hit Detection for Shapes</h1>
	<div class='date'>2nd September 2015</div>
	<p>You can now easily detect when the mouse pointer is positioned over any particular shape of
	interest.  You can also detect when the user clicks on a shape using a convenient <code>_click</code>
	observable, similar to the <code>_clicked</code> observables that already existed for buttons.</p>

	<p>To detect when the mouse pointer interacts with a shape you need to give the shape a name.
	You do this in the same way that other pieces of supplementary information are added to shapes,
	this is, using the <em>drawing options</em>.</p>

<jseden>
r1 is Rectangle(0, 0, 200, 200, \"red\", @, {name: \"red\"});
r2 is Rectangle(100, 100, 200, 200, \"blue\", @, {name: \"blue\"});
picture is [r1, r2];
</jseden>

	<p>Now open a symbol list and use the drop-down list to view all of the relevant observables,
	including system observables.</p>
<jseden>
showObservables(\"mouseZone|mouseDownZone|.*_click\");
</jseden>

	<p>Notice that the system has created two additional observables, <code>red_click</code> and
	blue_click.  These have the value <code>true</code> assigned to them whenever the left mouse
	button is pressed down and the mouse pointer is positioned over the relevant shape.  The names
	of the shapes do not have to be unique, which is useful if several individual shapes model a
	larger semantic component.</p>
	
	<p>The <code>mouseZone</code> observable records which zone the mouse pointer is currently
	positioned over, even when the mouse button is not pressed.  The <code>mouseDownZone</code>
	observable records which zone the mouse was in when the mouse button most recently changed from
	being not pressed to becoming pressed down.</p>
	
	<p>Where two shapes overlap only the topmost one (the visible one) has its <code>_click</code>
	observable set to <code>true</code>.  We might also be interested in knowing about <em>all</em>
	of the shapes that intersect with the mouse pointer.  Alternatively, the bottommost shape may be
	the one of interest.  The final section addresses these situations.</p>

	<h2>Invisible Shapes</h2>
	<p>What if you want to detect if the mouse pointer is located in particular part of the canvas
	without drawing a shape there?  Setting the new <code>visible</code> drawing option to <code>false</code>
	allows you to keep an observable in the <code>picture</code> list and have it work as a
	mouse zone without actually drawing the shape.  The following example creates an invisible zone
	above the blue rectangle and to the right of the red rectangle.</p>

<jseden>
zone3 is Rectangle(200, 0, 100, 100, @, @, {name: \"hidden\", visible: false});
picture is [r1, r2, zone3];
</jseden>
	
	<h2>Zones Within <code>HTMLImage</code></h2>
	<p>As previously, you can create zones over particular pieces of a HTML Image.</p>

	<h2>Hit Detection at Any Point</h2>

	<h2>A Stack of Shapes</h2>

	<h2>Limitations &amp; Future Changes</h2>
");

slideViewHighlight is Slide("
	<h1>Highlighting Views</h1>
	<div class='date'>4th September 2015</div>
	<p>You can now programmatically attach a highlighting effect to one or more views in order to
	draw the user's attention to them.</p>

<jseden>
highlightView(\"picture\");
highlightView(\"input\");
</jseden>

	<p>To remove the highlighting, use the <code>stopHighlightingView</code> procedure.</p>

<jseden>
stopHighlightingView(\"picture\");
stopHighlightingView(\"input\");
</jseden>

	<p>This feature could be used, for instance, when writing instructional guides that introduce
	students to a new construal, or to introduce them to JS-EDEN itself.</p>

	<h2>Limitations &amp; Future Changes</h2>
	<p>The current technique doesn't use definitions.  Ideally we would talk about an observable
	representing the <em>set</em> of currently highlighted views.  However, JS-EDEN doesn't
	currently have a notation for defining sets.  Features may be updated from time to time as
	continuing improvements are made.</p>
");

slideLang1 is Slide('
	<h1>New EDEN Language Developments</h1>
	<div class="date">5th September 2015</div>

');

slideList is [slideZones, slideViewHighlight];
currentSlide = slideList#;
