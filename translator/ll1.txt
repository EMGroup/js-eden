EDEN LL(1) Grammar

SCRIPT		-> STATEMENT ; SCRIPT | epsilon														FIRST: proc func observable epsilon

STATEMENT	->
	{ SCRIPT } |
	when WHEN |
	proc ACTION |
	func FUNCTION |
	STATEMENT' |
	for FOR |
	while WHILE |
	switch SWITCH |
	if IF |
	return EOPT |
	continue |
	break

FOR			-> ( SOPT ; EOPT ; SOPT ) STATEMENT
WHILE		-> ( EOPT ) STATEMENT 
SOPT		-> STATEMENT' | epsilon
EOPT		-> EXPRESSION | epsilon

IF			-> ( EXPRESSION ) STATEMENT IF'
IF'			-> else STATEMENT | epsilon

FUNCTION	-> observable FUNCBODY
ACTION		-> observable : OLIST ACTIONBODY
FUNCBODY	-> { PARAS LOCALS SCRIPT }
ACTIONBODY	-> { LOCALS SCRIPT }
PARAS		-> para observable ; PARAS | epsilon
LOCALS		-> auto observable ; LOCALS | local observable ; LOCALS | epsilon

WHEN		-> change : WHEN' | touch : WHEN' | ( EXPRESSION ) ACTIONBODY
WHEN'		-> OLIST ACTIONBODY

OLIST		-> observable OLIST'
OLIST'		-> , observable OLIST' | epsilon

LLIST		-> LVALUE LLIST'
LLIST'		-> , LVALUE LLIST' | epsilon


STATEMENT'	-> LVALUE STATEMENT'' | epsilon
STATEMENT''	->
	is EXPRESSION |
	= EXPRESSION |
	+= EXPRESSION |
	-= EXPRESSION |
	/= EXPRESSION |
	*= EXPRESSION |
	++ |
	--

LVALUE		-> observable LVALUE'																FIRST: observable
LVALUE'		-> [ EXPRESSION ] LVALUE' | . observable LVALUE' | epsilon							FIRST: [ . epsilon

EXPRESSION	-> T E'																				FIRST: ( - number & ! observable
E'			-> && T E' | || T E' | epsilon														FIRST: && || epsilon
T			-> T' E''																			FIRST: ( - number & ! observable
E''			-> < T' E'' | <= T' E'' | > T' E'' | >= T' E'' | == T' E'' | != T' E'' | epsilon	FIRST: < <= > >= == != epsilon
T'			-> T'' E'''																			FIRST: ( - number & ! observable
E'''		-> + T'' E''' | - T'' E''' | // T'' E''' | epsilon									FIRST: + - // epsilon
T''			-> T''' E''''																		FIRST: ( - number & ! observable
E''''		-> * T''' E'''' | / T''' E'''' | % T''' E'''' | ^ T''' E'''' | epsilon				FIRST: * / % ^ epsilon
T'''		-> T'''' E'''''																		FIRST: ( - number & ! observable
E'''''		-> # | epsilon																		FIRST: # epsilon
T''''		-> F E''''''																		FIRST: ( - number & ! observable
E''''''		-> ? EXPRESSION : EXPRESSION | epsilon												FIRST: ? epsilon
F			->
	( EXPRESSION ) |
	- number |
	number |
	string |
	[ ELIST ] |
	& LVALUE |
	! PRIMARY |
	PRIMARY																						FIRST: ( - number & ! observable

PRIMARY		-> observable PRIMARY'																FIRST: observable
PRIMARY'	->
	( ELIST ) PRIMARY'
	| . observable PRIMARY'
	| [ EXPRESSION ] PRIMARY'
	| epsilon																					FIRST: ( . [ epsilon

ELIST		-> EXPRESSION ELIST' | epsilon																FIRST: ( - number & ! observable
ELIST'		-> , EXPRESSION ELIST' | epsilon																FIRST: , epsilon


