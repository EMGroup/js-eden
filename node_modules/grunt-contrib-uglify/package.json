{
  "name": "grunt-contrib-uglify",
  "description": "Minify JavaScript files with UglifyJS",
  "version": "2.3.0",
  "author": {
    "name": "Grunt Team",
    "url": "http://gruntjs.com/"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gruntjs/grunt-contrib-uglify.git"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10.0"
  },
  "main": "tasks/uglify.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "maxmin": "^1.1.0",
    "object.assign": "^4.0.4",
    "uglify-js": "git+https://github.com/mishoo/UglifyJS2.git#harmony",
    "uri-path": "^1.0.0"
  },
  "devDependencies": {
    "grunt": "^1.0.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-internal": "^1.1.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-nodeunit": "^1.0.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "files": [
    "tasks"
  ],
  "appveyor_id": "ybtf5vbvtenii561",
  "contributors": [
    {
      "name": "\"Cowboy\" Ben Alman",
      "url": "http://benalman.com"
    },
    {
      "name": "Tyler Kellen",
      "url": "http://goingslowly.com"
    },
    {
      "name": "Jarrod Overson",
      "url": "http://jarrodoverson.com"
    }
  ],
  "gitHead": "076accb5efea3e6c29b9bf317780794b5a240b0c",
  "readme": "# grunt-contrib-uglify v2.3.0 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-uglify.svg?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-uglify) [![Build Status: Windows](https://ci.appveyor.com/api/projects/status/ybtf5vbvtenii561/branch/master?svg=true)](https://ci.appveyor.com/project/gruntjs/grunt-contrib-uglify/branch/master)\n\n> Minify JavaScript files with UglifyJS\n\n\n\n## Getting Started\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-uglify --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-uglify');\n```\n\n\n\n\n## Uglify task\n_Run this task with the `grunt uglify` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Options\n\nThis task primarily delegates to [UglifyJS2][], so please consider the [UglifyJS documentation][] as required reading for advanced configuration.\n\n[UglifyJS2]: https://github.com/mishoo/UglifyJS2\n[UglifyJS documentation]: http://lisperator.net/uglifyjs/\n\n\n#### mangle\nType: `Boolean` `Object`  \nDefault: `{}`\n\nTurn on or off mangling with default options. If an `Object` is specified, it is passed directly to `ast.mangle_names()` *and* `ast.compute_char_frequency()` (mimicking command line behavior). [View all options here](https://github.com/mishoo/UglifyJS2#mangler-options).\n\n#### compress\nType: `Boolean` `Object`  \nDefault: `{}`\n\nTurn on or off source compression with default options. If an `Object` is specified, it is passed as options to `UglifyJS.Compressor()`. [View all options here](https://github.com/mishoo/UglifyJS2#compressor-options).\n\n#### beautify\nType: `Boolean` `Object`  \nDefault: `false`\n\nTurns on beautification of the generated source code. An `Object` will be merged and passed with the options sent to `UglifyJS.OutputStream()`. [View all options here](https://github.com/mishoo/UglifyJS2#beautifier-options)\n\n###### expression\nType: `Boolean`  \nDefault: `false`\n\nParse a single expression, rather than a program (for parsing JSON)\n\n#### report\nType: `string`  \nChoices: `'min'`, `'gzip'`  \nDefault: `'min'`\n\nReport minification result or both minification and gzip results.\nThis is useful to see exactly how well uglify-js is performing but using `'gzip'` will make the task take 5-10x longer to complete. [Example output](https://github.com/sindresorhus/maxmin#readme).\n\n#### sourceMap\nType: `Boolean`  \nDefault: `false`\n\nIf `true`, a source map file will be generated in the same directory as the `dest` file. By default it will have the same basename as the `dest` file, but with a `.map` extension.\n\n#### sourceMapName\nType: `String` `Function`  \nDefault: `undefined`\n\nTo customize the name or location of the generated source map, pass a string to indicate where to write the source map to. If a function is provided, the uglify destination is passed as the argument and the return value will be used as the file name.\n\n#### sourceMapIn\nType: `String` `Function`  \nDefault: `undefined`\n\nThe location of an input source map from an earlier compilation, e.g. from CoffeeScript. If a function is provided, the\nuglify source is passed as the argument and the return value will be used as the sourceMap name. This only makes sense\nwhen there's one source file.\n\n#### sourceMapIncludeSources\nType: `Boolean`  \nDefault: `false`\n\nPass this flag if you want to include the content of source files in the source map as sourcesContent property.\n\n###### sourceMapRoot\nType: `String`  \nDefault: `undefined`\n\nWith this option you can customize root URL that browser will use when looking for sources.\n\nIf the sources are not absolute URLs after prepending of the `sourceMapRoot`, the sources are resolved relative to the source map.\n\n#### sourceMapUrl\nType: `String`  \nDefault: `undefined`\n\nOverride the calculated value for `sourceMappingURL` in the source map. This is useful if the source map location is not relative to the base path of the minified file, i.e. when using a CDN\n\n###### enclose\nType: `Object`  \nDefault: `undefined`\n\nWrap all of the code in a closure with a configurable arguments/parameters list.\nEach key-value pair in the `enclose` object is effectively an argument-parameter pair.\n\n#### wrap\nType: `String`  \nDefault: `undefined`\n\nWrap all of the code in a closure, an easy way to make sure nothing is leaking.\nFor variables that need to be public `exports` and `global` variables are made available.\nThe value of wrap is the global variable exports will be available as.\n\n#### maxLineLen\nType: `Number`  \nDefault: `32000`\n\nLimit the line length in symbols. Pass maxLineLen = 0 to disable this safety feature.\n\n#### ASCIIOnly\nType: `Boolean`  \nDefault: `false`\n\nEnables to encode non-ASCII characters as \\uXXXX.\n\n#### exportAll\nType: `Boolean`  \nDefault: `false`\n\nWhen using `wrap` this will make all global functions and variables available via the export variable.\n\n#### preserveComments\nType: `Boolean` `String` `Function`  \nDefault: `undefined`  \nOptions: `false` `'all'` `'some'`\n\nTurn on preservation of comments.\n\n- `false` will strip all comments\n- `'all'` will preserve all comments in code blocks that have not been squashed or dropped\n- `'some'` will preserve all comments that include a closure compiler style directive (`@preserve` `@license` `@cc_on`)\n- `Function` specify your own comment preservation function. You will be passed the current node and the current comment and are expected to return either `true` or `false`\n- `RegExp` `'/[RegExp]/'` will preserve comments matching given RegExp or stringified RegExp\n\n#### banner\nType: `String`  \nDefault: `''`\n\nThis string will be prepended to the minified output. Template strings (e.g. `<%= config.value %>` will be expanded automatically.\n\n#### footer\nType: `String`  \nDefault: `''`\n\nThis string will be appended to the minified output. Template strings (e.g. `<%= config.value %>` will be expanded automatically.\n\n#### screwIE8\nType: `Boolean`  \nDefault: `true`\n\nSet this to `false` if you still care about full compliance with Internet Explorer 6-8 quirks.\n\n#### mangleProperties\nType: `Boolean` `Object`  \nDefault: `false`\n\nTurn on or off property mangling with default options. If an `Object` is specified, it is passed directly to `ast.mangle_properties()` (mimicking command line behavior). [View all options here](https://github.com/mishoo/UglifyJS2#mangler-options).\n\n#### reserveDOMProperties\nType: `Boolean`  \nDefault: `false`\n\nUse this flag in conjunction with `mangleProperties` to prevent built-in browser object properties from being mangled.\n\n#### exceptionsFiles\nType: `Array`  \nDefault: `[]`\n\nUse this with `mangleProperties` to pass one or more JSON files containing a list of variables and object properties\nthat should not be mangled. See the [UglifyJS docs](https://www.npmjs.com/package/uglify-js) for more info on the file syntax.\n\n#### nameCache\nType: `String`  \nDefault: `''`\n\nA string that is a path to a JSON cache file that uglify will create and use to coordinate symbol mangling between\nmultiple runs of uglify. Note: this generated file uses the same JSON format as the `exceptionsFiles` files.\n\n#### quoteStyle\nType: `Integer`  \nDefault: `0`\n\nPreserve or enforce quotation mark style.\n\n* `0` will use single or double quotes such as to minimize the number of bytes (prefers double quotes when both will do)\n* `1` will always use single quotes\n* `2` will always use double quotes\n* `3` will preserve original quotation marks\n\n### Usage examples\n\n#### Basic compression\n\nThis configuration will compress and mangle the input files using the default options.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input1.js', 'src/input2.js']\n      }\n    }\n  }\n});\n```\n\n#### No mangling\n\nSpecify `mangle: false` to prevent changes to your variable and function names.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      mangle: false\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Reserved identifiers\n\nYou can specify identifiers to leave untouched with an `except` array in the `mangle` options.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      mangle: {\n        except: ['jQuery', 'Backbone']\n      }\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Source maps\n\nGenerate a source map by setting the `sourceMap` option to `true`. The generated\nsource map will be in the same directory as the destination file. Its name will be\nthe basename of the destination file with a `.map` extension. Override these\ndefaults with the `sourceMapName` attribute.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      options: {\n        sourceMap: true,\n        sourceMapName: 'path/to/sourcemap.map'\n      },\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Advanced source maps\n\nSet the `sourceMapIncludeSources` option to `true` to embed your sources directly into the map. To include\na source map from a previous compilation pass it as the value of the `sourceMapIn` option.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      options: {\n        sourceMap: true,\n        sourceMapIncludeSources: true,\n        sourceMapIn: 'example/coffeescript-sourcemap.js', // input sourcemap from a previous compilation\n      },\n      files: {\n        'dest/output.min.js': ['src/input.js'],\n      },\n    },\n  },\n});\n```\n\nRefer to the [UglifyJS SourceMap Documentation](http://lisperator.net/uglifyjs/codegen#source-map) for more information.\n\n#### Turn off console warnings\n\nSpecify `drop_console: true` as part of the `compress` options to discard calls to `console.*` functions.\nThis will suppress warning messages in the console.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      compress: {\n        drop_console: true\n      }\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Beautify\n\nSpecify `beautify: true` to beautify your code for debugging/troubleshooting purposes.\nPass an object to manually configure any other output options passed directly to `UglifyJS.OutputStream()`.\n\nSee [UglifyJS Codegen documentation](http://lisperator.net/uglifyjs/codegen) for more information.\n\n_Note that manual configuration will require you to explicitly set `beautify: true` if you want traditional, beautified output._\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      options: {\n        beautify: true\n      },\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    },\n    my_advanced_target: {\n      options: {\n        beautify: {\n          width: 80,\n          beautify: true\n        }\n      },\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Banner comments\n\nIn this example, running `grunt uglify:my_target` will prepend a banner created by interpolating the `banner` template string with the config object. Here, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\n\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  uglify: {\n    options: {\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\n        '<%= grunt.template.today(\"yyyy-mm-dd\") %> */'\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Conditional compilation\n\nYou can also enable UglifyJS conditional compilation. This is commonly used to remove debug code blocks for production builds. This is equivalent to the command line [`--define` option](https://github.com/mishoo/UglifyJS#use-as-a-code-pre-processor).\n\nSee [UglifyJS global definitions documentation](http://lisperator.net/uglifyjs/compress#global-defs) for more information.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      compress: {\n        global_defs: {\n          'DEBUG': false\n        },\n        dead_code: true\n      }\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Compiling all files in a folder dynamically\n\nThis configuration will compress and mangle the files dynamically.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      files: [{\n        expand: true,\n        cwd: 'src/js',\n        src: '**/*.js',\n        dest: 'dest/js'\n      }]\n    }\n  }\n});\n```\n\n#### Compiling all files separately on the each their path\n\nThis configuration will compress and mangle all js files separately in each folder.\n\nAlso exclude jQuery for mangling and ignore all `*.min.js` files.\n\n```js\n// Project configuration.\nuglify: {\n  dev: {\n    options: {\n      mangle: {\n        except: ['jQuery']\n      }\n    },\n    files: [{\n      expand: true,\n      src: ['dist/assets/js/*.js', '!dist/assets/js/*.min.js'],\n      dest: 'dist/assets',\n      cwd: '.',\n      rename: function (dst, src) {\n        // To keep the source js files and make new files as `*.min.js`:\n        // return dst + '/' + src.replace('.js', '.min.js');\n        // Or to override to src:\n        return src;\n      }\n    }]\n  }\n},\n```\n\n#### Turn on object property name mangling\n\nThis configuration will turn on object property name mangling, but not mangle built-in browser object properties.\nAdditionally, variables and object properties listed in the `myExceptionsFile.json` will be mangled. For more info,\non the format of the exception file format please see the [UglifyJS docs](https://www.npmjs.com/package/uglify-js).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      mangleProperties: true,\n      reserveDOMCache: true,\n      exceptionsFiles: [ 'myExceptionsFile.json' ]\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Turn on use of name mangling cache\n\nTurn on use of name mangling cache to coordinate mangled symbols between outputted uglify files. uglify will the\ngenerate a JSON cache file with the name provided in the options. Note: this generated file uses the same JSON format\nas the `exceptionsFiles` files.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      nameCache: '.tmp/grunt-uglify-cache.json',\n    },\n    my_target: {\n      files: {\n        'dest/output1.min.js': ['src/input1.js'],\n        'dest/output2.min.js': ['src/input2.js']\n      }\n    }\n  }\n});\n```\n\n\n## Release History\n\n * 2017-04-05   v2.3.0   Make CLI output less verbose.\n * 2017-03-31   v2.2.1   Fix banner option.\n * 2017-03-01   v2.2.0   Update uglify-js to v2.8.3.\n * 2017-02-08   v2.1.0   Show size changes in output. Switch to `object.assign`.\n * 2016-07-19   v2.0.0   Update uglify-js to v2.7.0. `screwIE8` is enabled by default.\n * 2016-07-19   v1.0.2   Update grunt to ^1.0.0. Fix `beautify` when passed as an object. Fix docs about `report` values.\n * 2016-03-16   v1.0.1   Downgrade maxmin for Node.js 0.10.\n * 2016-03-04   v1.0.0   Use uglify-js ~2.6.2 to fix sourcemap issue. Improve docs for `global-defs` and `--define` options. Add `sourceMapUrl` option. Add `bare_returns` option. Optionally set report verbosity level using report option.\n * 2016-01-29   v0.11.1   Update lodash to ^4.0.1. Update grunt-contrib-clean to ^0.7.0. Update grunt-contrib-jshint to ^0.12.0.\n * 2015-11-20   v0.11.0   Update uglify-js to ~2.6.0.\n * 2015-11-12   v0.10.1   Update uglify-js to ~2.5.\n * 2015-10-27   v0.10.0   Update uglify-js to ^2.5.\n * 2015-08-24   v0.9.2   Update uglify-js to ^2.4.24\n * 2015-04-07   v0.9.1   More fixes for `mangle` options.\n * 2015-04-07   v0.9.0   Add hook into uglify-js's mangling functionality.\n * 2015-03-30   v0.8.1   Lock uglify-js to 2.4.17 due to breaking changes.\n * 2015-02-19   v0.8.0   Add `screwIE8` option. Fix issue with explicit `compress` in Node.js 0.12.0.\n * 2014-12-23   v0.7.0   Add `sourceMapRoot` options. Update readme descriptions. Remove reference to clean-css.\n * 2014-09-17   v0.6.0   Output fixes. Add `ASCIIOnly` option. Other fixes.\n * 2014-07-25   v0.5.1   Update chalk to ^0.5.1. Output updates.\n * 2014-03-01   v0.4.0   Remove grunt-lib-contrib dependency and add more colors.\n * 2014-02-27   v0.3.3   Remove unnecessary calls to `grunt.template.process`.\n * 2014-01-22   v0.3.2   Fix handling of `sourceMapIncludeSources` option.\n * 2014-01-20   v0.3.1   Fix relative path issue in sourcemaps.\n * 2014-01-16   v0.3.0   Refactor sourcemap support.\n * 2013-11-09   v0.2.7   Prepend banner if `sourceMap` option not set, addresses #109.\n * 2013-11-08   v0.2.6   Merge #45, #53, #85 (#105 by way of duping #53). Add support for banners in uglified files with sourcemaps. Update docs.\n * 2013-10-28   v0.2.5   Add warning for banners when using sourcemaps.\n * 2013-09-02   v0.2.4   Update sourcemap format via #83.\n * 2013-06-10   v0.2.3   Add `footer` option.\n * 2013-05-31   v0.2.2   Revert #56 due to #58 until [chrome/239660](https://code.google.com/p/chromium/issues/detail?id=239660&q=sourcemappingurl&colspec=ID%20Pri%20M%20Iteration%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified) [firefox/870361](https://bugzilla.mozilla.org/show_bug.cgi?id=870361) drop.\n * 2013-05-22   v0.2.1   Update uglify-js to ~2.3.5 #55 #40. Change `sourcemappingUrl` syntax #56. Disable sorting of names for consistent mangling #44. Update docs for `sourceMapRoot` #47 #25.\n * 2013-03-14   v0.2.0   No longer report gzip results by default. Support `report` option.\n * 2013-01-30   v0.1.2   Add better error reporting. Support for dynamic names of multiple sourcemaps.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Update grunt/gruntplugin dependencies to rc6. Change in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Update to work with grunt v0.4.0rc5. Switch back to `this.files` API.\n * 2012-11-28   v0.1.0   Work in progress, not officially released yet.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com)\n\n*This file was generated on Wed Apr 05 2017 00:24:18.*\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gruntjs/grunt-contrib-uglify/issues"
  },
  "homepage": "https://github.com/gruntjs/grunt-contrib-uglify#readme",
  "_id": "grunt-contrib-uglify@2.3.0",
  "_shasum": "db432327957808358c2159337100c6ede0e1be16",
  "_from": "git://github.com/gruntjs/grunt-contrib-uglify.git#harmony",
  "_resolved": "git://github.com/gruntjs/grunt-contrib-uglify.git#076accb5efea3e6c29b9bf317780794b5a240b0c"
}
