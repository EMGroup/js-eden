## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Polygon = function(vertices, fillcolour, outlinecolour, drawingOptions, centreY) {
	this.vertices = vertices;
	this.fillcolour = fillcolour;
	this.outlinecolour = outlinecolour;
	this.drawingOptions = drawingOptions;
	this.centreY = centreY; //Used by RegularPolygon
	this.name = edenUI.plugins.Canvas2D.initZoneFromDrawingOpts(drawingOptions, "Polygon");
	this.obsName = root.currentObservableName();
}
}}$;

/**
 * Creates a Polygon object for display on a canvas
 * @param points List of coordinates in the form {x, y} from the top left corner of the canvas
 * @param [fill_colour Colour of the polygon (fill) in HTML form
 * @param [outline_colour]]
 * @param [drawing_options] List of drawing options
 * 
 * #canvas #polygon #drawingoptions
 */

func Polygon { ${{
	var vertices = arguments[0];
	if (vertices[0].x != vertices[vertices.length - 1].x || vertices[0].y != vertices[vertices.length - 1].y) {
		vertices.push(vertices[0]);
	}

	var fillcolour, outlinecolour, drawingOptions;
	var lastArg = arguments[arguments.length - 1];
	var processUpTo;
	if (lastArg !== undefined && (lastArg instanceof Object) && !Array.isArray(lastArg) && !(lastArg instanceof EdenUI.plugins.Canvas2D.FillStyle)) {
		drawingOptions = lastArg;
		processUpTo = arguments.length - 2;
	} else {
		processUpTo = arguments.length - 1;
	}
	if (processUpTo >= 1) {
		fillcolour = arguments[1];
		if (processUpTo == 2) {
			outlinecolour = arguments[2];
		}
	}

	if (outlinecolour === undefined) {
		if (fillcolour === undefined) {
			outlinecolour = "black";
		}
	}

	return new Polygon(vertices, fillcolour, outlinecolour, drawingOptions);
}}$; };

${{

Polygon.prototype.draw = function (context, scale) {
	if (this.drawingOptions !== undefined && this.drawingOptions.lineWidth % 2 == 1) {
		context.translate(0.5 / scale, 0.5 / scale);
	}

	this.tracePath(context, scale);

	if (this.fillcolour !== undefined) {
		edenUI.plugins.Canvas2D.setFillStyle(context, this.fillcolour);
		context.fill();
	}
	
	if (this.outlinecolour !== undefined) {
		context.strokeStyle = this.outlinecolour;
		context.stroke();
	}
};

Polygon.prototype.tracePath = function (context, scale) {
	context.beginPath();
	if (scale < 0 && this.centreY !== undefined) {
		var a = 2 * this.centreY;
		context.moveTo(this.vertices[0].x, a - this.vertices[0].y);
		for (var i = 1; i < this.vertices.length; i++) {
			context.lineTo(this.vertices[i].x, a - this.vertices[i].y);
		}
	} else {
		context.moveTo(this.vertices[0].x, this.vertices[0].y);
		for (var i = 1; i < this.vertices.length; i++) {
			context.lineTo(this.vertices[i].x, this.vertices[i].y);
		}
	}
	context.closePath();
}

Polygon.prototype.isHit = function (context, scale, x, y) {
	this.tracePath(context, scale);
	return context.isPointInPath(x,y);
}

Polygon.prototype.toString = function() {
	var s = "Polygon(" + Eden.edenCodeForValues(this.vertices, this.fillcolour, this.outlinecolour);

	if (this.drawingOptions !== undefined) {
		s = s + ", " + Eden.edenCodeForValue(this.drawingOptions);
	}
	
	s = s + ")";
	return s;
};

Polygon.prototype.getEdenCode = Polygon.prototype.toString;

Polygon.prototype.imageMapArea = function () {
	var s = "shape=\"poly\" coords=\"";
	for (var i = 0; i < this.vertices.length; i++) {
		var vertex = this.vertices[i];
		s = s + vertex.x + "," + vertex.y + ",";
	}
	s = s.slice(0, -1);
	s = s + "\"";
	return s;
}

Polygon.prototype.centre = function () {
	var centreX = 0, centreY = 0;
	for (var i = 0; i < this.vertices.length; i++) {
		centreX = centreX + this.vertices[i].x;
		centreY = centreY + this.vertices[i].y;
	}
	centreX = centreX / this.vertices.length;
	centreY = centreY / this.vertices.length;
	return new Point(centreX, centreY);
}

}}$;
