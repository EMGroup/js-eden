## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Light = function(direction, colour) {
	this.x = direction.x;
	this.y = direction.y;
	this.z = direction.z;
	this.colour = (colour) ? colour : "white";
}

}}$;

#! Creates a directional light.
#
# ##Usage Example
#  `Light::(Point3D::(x,y,z),"white");`
# 
#  #canvas #rectangle #drawingoptions #square #box #shape #draw
Light is ${{ new Light }}$ ($1,$2);

${{

Light.prototype.draw = function (context, scale, viewname, mvMatrix, shader, pMatrix) {
	 context.uniform1i(shader.useLightingUniform, true);
	console.log("Use uniform lighting");

	var colorobj = jQuery.Color( (typeof this.colour == "string") ? this.colour : "orange" );
			var r = colorobj.red() / 255;
			var g = colorobj.green() / 255;
			var b = colorobj.blue() / 255;

	context.uniform3f(
        shader.directionalColorUniform,
        r,
        g,
        b
      );

	var normalMatrix = mat3.create();
    mat3.fromMat4(normalMatrix,mvMatrix);
	mat3.invert(normalMatrix,normalMatrix);
    mat3.transpose(normalMatrix,normalMatrix);

	var lightingDirection = vec3.create();
	vec3.set(lightingDirection,this.x,this.y,this.z);
	vec3.transformMat3(lightingDirection, lightingDirection, normalMatrix);
      var adjustedLD = vec3.create();
      vec3.normalize(adjustedLD,lightingDirection);
      vec3.scale(adjustedLD,adjustedLD, -1);
      context.uniform3fv(shader.lightingDirectionUniform, adjustedLD);
};

Light.prototype.isHit = function (context, scale, x, y) {
	return false;
}

}}$;
