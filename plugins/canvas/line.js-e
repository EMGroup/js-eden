## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Line = function(x1, y1, x2, y2, colours, drawingOptions) {
	this.x1 = x1;
	this.y1 = y1;
	this.x2 = x2;
	this.y2 = y2;
	var align, valign, shift;
	if (drawingOptions !== undefined) {
		align = drawingOptions.align;
		valign = drawingOptions.valign;
	}
	if (this.x1 == this.x2) {
		if (align == "left") {
			shift = -1;
		} else if (align == "right") {
			shift = 1;
		} else {
			shift = 0;
		}
		this.xShift1 = shift;
		this.xShift2 = shift;
		this.yShift1 = 0;
		this.yShift2 = 0;
	} else if (this.y1 == this.y2) {
		if (valign == "top") {
			shift = -1;
		} else if (valign == "bottom") {
			shift = 1;
		} else {
			shift = 0;
		}
		this.xShift1 = 0;
		this.xShift2 = 0;
		this.yShift1 = shift;
		this.yShift2 = shift;
	} else {
		this.xShift1 = this.x2 > this.x1? 1 : -1;
		this.xShift2 = -this.xShift1;
		this.yShift1 = this.y2 > this.y1? 1 : -1;
		this.yShift2 = -this.yShift1;
	}
	this.colours = colours;
	this.drawingOptions = drawingOptions;
}
}}$;

#! Create a drawable line for display on the canvas. See [drawing options](@external CanvasExamples > drawingoptions) for more styling options.
#
# ##Usage Example
#  `Line(startx, starty, endx, endy, "green");`
#  `Line(x1,y1,x2,y2,"red",Object("lineWidth", 10));`
#
# @param x1 Start x-position
# @param y1 Start y-position
# @param x2 End x-position
# @param y2 End y-position
# @param [colour(s)] A HTML colour value for the whole line or a list of HTML colour values to create a gradient
# @param [drawing_options] list of drawing options
# 
#  #canvas #line #drawingoptions #draw
func Line {
${{
	var x1 = arguments[0];
	var y1 = arguments[1];
	var x2 = arguments[2];
	var y2 = arguments[3];
	var colours, drawingOptions;
	var lastArg = arguments[arguments.length - 1];
	var processUpTo;
	if (lastArg !== undefined && (lastArg instanceof Object) && !Array.isArray(lastArg)) {
		drawingOptions = lastArg;
		processUpTo = arguments.length - 2;
	} else {
		processUpTo = arguments.length - 1;
	}
	if (processUpTo >= 4) {
		colours = arguments[4];
	}

	if (colours === undefined) {
		colours = ["black"];
	} else if (!Array.isArray(colours)) {
		colours = [colours];
	} else if (colours.length == 0) {
		colours = ["black"];
	}
	return new Line(x1, y1, x2, y2, colours, drawingOptions);
}}$; };

${{

Line.prototype.draw = function(context, scale) {
	context.beginPath();
	var xShift1, xShift2, yShift1, yShift2;
	if (this.drawingOptions !== undefined) {
		var width = (context.lineWidth / 2 + 0.5 / scale) / Math.SQRT2;
		xShift1 = this.xShift1 * width;
		xShift2 = this.xShift2 * width;
		yShift1 = this.yShift1 * width;
		yShift2 = this.yShift2 * width;
		if ((this.xShift1 == 0 || this.yShift1 == 0) && this.drawingOptions.lineWidth % 2 == 1) {
			context.translate(0.5 / scale, 0.5 / scale);
		}
	} else {
		xShift1 = 0;
		xShift2 = 0;
		yShift1 = 0;
		yShift2 = 0;
	}
	var x1 = this.x1 + xShift1;
	var y1 = this.y1 + yShift1;
	var x2 = this.x2 + xShift2;
	var y2 = this.y2 + yShift2;

	if (this.colours.length == 1) {
		context.strokeStyle = this.colours[0];
	} else {
		var colourGradient = context.createLinearGradient(x1, y1, x2, y2);
		for (var i = 0; i < this.colours.length; i++) {
			colourGradient.addColorStop(i / (this.colours.length - 1), this.colours[i]);
		}
		context.strokeStyle = colourGradient;
	}

	context.moveTo(x1, y1);
	context.lineTo(x2, y2);
	context.stroke();

	if (this.drawingOptions !== undefined && this.drawingOptions.arrowhead instanceof Arrowhead) {
		var gradient = (y2 - y1) / (x2 - x1);
		var reversed = x1 > x2;
		this.drawingOptions.arrowhead.draw(context, scale, x1, y1, gradient, reversed, x2, y2, gradient, reversed);
	}
};

Line.prototype.toString = function(p) {
	var s = "Line(" + Eden.edenCodeForValuesP(p,this.x1, this.y1, this.x2, this.y2) + ", ";

	if (this.colours.length > 1) {
		s = s + Eden.edenCodeForValue(this.colours, undefined, p);
	} else {
		s = s + Eden.edenCodeForValue(this.colours[0], undefined, p);	
	}

	if (this.drawingOptions !== undefined) {
		s = s + ", " + Eden.edenCodeForValue(this.drawingOptions, undefined, p);
	}
	
	s = s + ")";
	return s;
};

Line.prototype.getEdenCode = Line.prototype.toString;

}}$;

func distanceMoved {
	${{
		var from, to;
		if (arguments.length == 1) {
			if (arguments[0] instanceof Line) {
				var line = arguments[0];
				from = new Point(line.x1, line.y1);
				to = new Point(line.x2, line.y2);
			} else {
				to = arguments[0];
				from = new Point(0, 0);
			}
		} else if (arguments.length == 2) {
			from = arguments[0];
			to = arguments[1];
			if (from === undefined) {
				return undefined;
			} else if (!(from instanceof Point)) {
				eden.error(new Error("distanceMoved: The first argument must be a Point, not a " + typeof(from)), "error");
				return undefined;
			}
		} else {
			eden.error(new Error("distanceMoved: This function requires at least 1 argument and at most 2 arguments"), "error");
			return undefined;
		}
		if (to === undefined) {
			return undefined;
		} else if (!(to instanceof Point)) {
			eden.error(new Error("distanceMoved: The destination point must be a Point or a Line, not a " + typeof(to)), "error");
			return undefined;
		}
		if (from.x == undefined || from.y == undefined || to.x == undefined || to.y == undefined) {
			return undefined;
		}
		var xDist = to.x - from.x;
		var yDist = to.y - from.y;
		return Math.sqrt(xDist * xDist + yDist * yDist);
	}}$;
}

func angleTurned {
	${{
		var from, to;
		if (arguments[0] instanceof Folder) {
			//Probably not an actual function call but semicircleAngle observable changed.
			return undefined;
		} else if (arguments.length == 1) {
			to = arguments[0];
			from = new Point(0, 0);
		} else if (arguments.length == 2) {
			from = arguments[0];
			to = arguments[1];
			if (from === undefined) {
				return undefined;
			} else if (!(from instanceof Point)) {
				eden.error(new Error("angleTurned: The first argument must be a Point, not a " + typeof(from)), "error");
				return undefined;
			}
		} else {
			eden.error(new Error("angleTurned: This function requires at at least 1 argument and most 2 arguments"), "error");
			return undefined;
		}
		if (to === undefined) {
			return undefined;
		} else if (!(to instanceof Point)) {
			eden.error(new Error("angleTurned: The destination point must be a Point, not a " + typeof(to)), "error");
			return undefined;
		}
		if (from.x == undefined || from.y == undefined || to.x == undefined || to.y == undefined) {
			return undefined;
		}
		var relativeX = to.x - from.x;
		var relativeY = to.y - from.y;
		return Math.atan2(relativeY, relativeX) * root.lookup("semicircleAngle").value() / Math.PI;
	}}$;
}
semicircleAngle ~> [angleTurned];
