## Copyright (c) 2015, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Checkbox = function (name, label, x, y, tristate, enabled) {
	this.name = name;
	this.obsName = root.currentObservableName();
	this.label = label;
	this.x = x;
	this.y = y;
	this.tristate = tristate;
    this.enabled = enabled;
}

Checkbox.prototype.hash = function () {
	return this.label+"$$"+
				this.name+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.tristate+"$$"+
				this.enabled;
};
}}$;

#! Make a clickable checkbox on the canvas. Give it a name and then an observable `name_checked` is set to true of false.
#
# @param [name]
# @param label
# @param x x position
# @param y y position
# @param [tristate] If true, the checkbox will have three states; true, false, undefined. Defaults to false
# @param [enabled] Defaults to true.
#  #canvas #checkbox #tick #box #tickbox #check #form
func Checkbox {
${{
	var argsProcessed;

	var name;
	if (typeof(arguments[1]) == "string" || arguments[1] === undefined) {
		name = arguments[0];
		argsProcessed = 1;
	} else {
		name = root.currentObservableName();
		argsProcessed = 0;
		if (name === undefined) {
			eden.error(new Error("Checkbox: Every checkbox must have a name."), "error");
			return undefined;
		}
	}

	var label;
	if (typeof(arguments[argsProcessed]) == "string" || arguments[argsProcessed] === undefined) {
		label = arguments[argsProcessed];
		argsProcessed++;
	}

	var x = arguments[argsProcessed];
	var y = arguments[argsProcessed + 1];

	var tristate = arguments[argsProcessed + 2];
	if (tristate === undefined) tristate = false;

	var enabled = arguments[argsProcessed + 3];
	if (enabled === undefined) enabled = true;

	return new Checkbox(name, label, x, y, tristate, enabled);
}}$; }

${{

Checkbox.prototype.draw = function(context) {

	if (this.elements === undefined) {
		var me = this;
		var name = this.name;

		var inputJQ = $('<input type="checkbox"/>');
		var inputElement = inputJQ.get(0);
		var element, elementJQ;
		if (this.label === undefined) {
			element = inputElement;
			elementJQ = inputJQ;
		} else {
			var labelJQ = $('<label> ' + this.label + '</label>');
			labelJQ.prepend(inputJQ);
			element = labelJQ.get(0);
			elementJQ = labelJQ;
		}
		element.className = "canvashtml-item";

		inputElement.disabled = (this.enabled === false);
		
		var valueSym = root.lookup(name + "_checked");
		var value = valueSym.value();
		if (value === undefined) {
			if (this.tristate) {
				inputElement.indeterminate = true;
			} else {
				valueSym.assign(false, root.scope, root.lookup("Checkbox"));
			}
		} else {
			inputElement.checked = value;
		}
		valueSym.addJSObserver("updateCheckbox", function (obs, value) {
			var element = me.elements[0];
			if (value === undefined) {
				element.indeterminate = true;
				element.checked = false;
			} else {
				element.indeterminate = false;
				element.checked = (value == true);
			}
		});

		inputJQ.change(function (event) {
			var element = event.target;
			var value;
			if (element.indeterminate) {
				element.indeterminate = false;
				element.checked = true;
				value = true;
			} else if (me.tristate && valueSym.value() === false) {
				element.indeterminate = true;
				element.checked = false;
				value = undefined;
			} else {
				value = element.checked;
			}
			valueSym.assign(value, root.scope, EdenSymbol.hciAgent, true);
		})

		elementJQ.on("mousedown", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseDownZone").assign(undefined, root.scope, EdenSymbol.hciAgent, mouseFollow);
		})
		.on("mouseup", function () {
			edenUI.plugins.Canvas2D.endClick();
		})
		.on("mouseenter", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseZone").assign(name, root.scope, EdenSymbol.hciAgent, mouseFollow);
		});

		this.elements = [element];
	}
};

Checkbox.prototype.scale = function (scale, zoom, origin) {
	var outerElement = this.elements[0];
	var inputElement;
	if (outerElement.tagName.toLowerCase() == "label") {
		inputElement = outerElement.children[0];
	} else {
		inputElement = outerElement;
	}
	var outerStyle = outerElement.style;
	var inputStyle = inputElement.style;

	outerStyle.left = Math.round((this.x + origin.x) * scale) + "px";
	outerStyle.top =  Math.round((this.y + origin.y) * scale) + "px";

	var checkboxSize = Math.round(13 * zoom) + "px";
	inputStyle.width = checkboxSize;
	inputStyle.height = checkboxSize;
};

Checkbox.prototype.toString = function() {
	if (this.name == this.obsName) {
		return "Checkbox(" + Eden.edenCodeForValues(this.x, this.y, this.tristate, this.enabled) + ")";
	} else {
		return "Checkbox(" + Eden.edenCodeForValues(this.name, this.x, this.y, this.tristate, this.enabled) + ")";	
	}
};

Checkbox.prototype.getEdenCode = Checkbox.prototype.toString;

}}$;
