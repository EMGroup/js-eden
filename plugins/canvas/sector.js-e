## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Sector = function(x, y, r, sAngle, eAngle, unitsInCircle, fillcolour, outlinecolour,drawingOptions) {
	this.x = x;
	this.y = y;
	this.r = r;
	this.sAngle = sAngle;
	this.eAngle = eAngle;
	this.unitsInCircle = unitsInCircle;
	var radiansPerUnit;
	if (unitsInCircle === undefined) {
		radiansPerUnit = Math.PI / root.lookup("semicircleAngle").value();
	} else {
		radiansPerUnit = (2 * Math.PI) / unitsInCircle;
	}
	this.sRadians = sAngle * radiansPerUnit;
	this.eRadians = eAngle * radiansPerUnit;

    this.fillcolour = fillcolour;
	this.outlinecolour = outlinecolour;
	this.drawingOptions = drawingOptions;
	this.name = edenUI.plugins.Canvas2D.initZoneFromDrawingOpts(drawingOptions, "Sector");
	this.obsName = root.currentObservableName();
}
}}$;

func Sector { ${{
	var x = arguments[0];
	var y = arguments[1];
	var r = arguments[2];
	var sAngle = arguments[3];
	var eAngle = arguments[4];
	var unitsInCircle, fillcolour, outlinecolour, drawingOptions;
	var lastArg = arguments[arguments.length - 1];
	var processUpTo;
	if (lastArg !== undefined && (lastArg instanceof Object) && !(lastArg instanceof EdenUI.plugins.Canvas2D.FillStyle)) {
		drawingOptions = lastArg;
		processUpTo = arguments.length - 2;
	} else {
		processUpTo = arguments.length - 1;
	}

	var argsProcessed = 5;
	if (typeof(arguments[argsProcessed]) == "number") {
		unitsInCircle = arguments[argsProcessed];
		argsProcessed++;
	}
	if (argsProcessed <= processUpTo) {
		fillcolour = arguments[argsProcessed];
		argsProcessed++;
	}
	if (argsProcessed <= processUpTo) {
		outlinecolour = arguments[argsProcessed];
	}
	if (fillcolour === undefined && outlinecolour === undefined) {
		outlinecolour = "black";
	}
	return new Sector(x, y, r, sAngle, eAngle, unitsInCircle, fillcolour, outlinecolour, drawingOptions);
}}$; };
semicircleAngle ~> [Sector];

${{

Sector.prototype.draw = function (context, scale) {

	this.tracePath(context, scale);

	if (this.fillcolour !== undefined) {
		edenUI.plugins.Canvas2D.setFillStyle(context, this.fillcolour);
		context.fill();
	}
	if (this.outlinecolour !== undefined) {
		context.strokeStyle = this.outlinecolour;
		context.stroke();
	}
};

Sector.prototype.tracePath = function (context, scale) {
	var anticlockwise;
	if (this.drawingOptions !== undefined && "direction" in this.drawingOptions) {
		switch (this.drawingOptions.direction) {
		case "anticlockwise":
		case "acw":
		case "ccw":
			anticlockwise = true;
			break;
		case "auto":
			anticlockwise = this.sAngle < this.eAngle;
			break;
		case "clockwise":
		case "cw":
			anticlockwise = false;
			break;
		default:
			//Invalid value specified.
			anticlockwise = true;
		}
	} else {
		//Default to "auto" 
		anticlockwise = this.sAngle < this.eAngle;
	}

	var sRadians = this.sRadians;
	var eRadians = this.eRadians;
	if (scale < 0) {
		sRadians = -sRadians;
		eRadians = -eRadians;
		anticlockwise = !anticlockwise;
	}
	var radius;
	if (this.outlinecolour === undefined) {
		radius = this.r;
	} else if (this.drawingOptions !== undefined && this.drawingOptions.lineWidth % 2 == 1) {
		context.translate(0.5 / scale, 0.5 / scale);
		radius = this.r - 0.5 * context.lineWidth - 0.5 / scale;
	} else {
		radius = this.r - 0.5 * context.lineWidth;
	}

	context.beginPath();
	context.arc(this.x, this.y, radius, -sRadians, -eRadians, anticlockwise);
	context.lineTo(this.x, this.y);
	context.closePath();
};

Sector.prototype.isHit = function (context, scale, x, y) {
	this.tracePath(context, scale);
	return context.isPointInPath(x,y);
}

Sector.prototype.toString = function() {
	var s = "Sector(" + Eden.edenCodeForValues(this.x, this.y, this.r, this.sAngle, this.eAngle,
		this.unitsInCircle, this.fillcolour, this.outlinecolour);

	if (this.drawingOptions !== undefined) {
		s = s + ", " + Eden.edenCodeForValue(this.drawingOptions);
	}
	
	s = s + ")";
	return s;
}

Sector.prototype.getEdenCode = Sector.prototype.toString;

}}$;
