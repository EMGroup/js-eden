${{
	RegularPolygon = function (x, y, r, n, star, rotation, fillcolour, outlinecolours, outlineInterior, drawingOptions) {
		this.x = x;
		this. y = y;
		this.r = r;
		this.n = n;
		this.star = star;
		this.rotation = rotation;
		this.fillcolour = fillcolour;
		this.outlinecolours = outlinecolours;
		this.drawingOptions = drawingOptions;
		
		this.polygons = [];
		this.outlines = [];
		
		rotation = -rotation - Math.PI * (0.5 - 2 / n);
		var exteriorAngle = (2 * Math.PI) / n;
		var pointsDone = new Array(n);
		var px, py;
		for (var i = 0; i < n; i++) {
			var j = i;
			var points = [];
			while (pointsDone[j] !== true) {
				px = x + r * Math.cos(rotation + j * exteriorAngle);
				py = y + r * Math.sin(rotation + j * exteriorAngle);
				points.push(new Point(px, py));
				pointsDone[j] = true;
				j = (j + star) % n;
			}
			if (points.length > 0) {
				this.polygons.push(new Polygon(points, fillcolour, outlinecolours, drawingOptions));
			}
		}
	}
}}$;

func RegularPolygon {
	${{
		var x = arguments[0];
		var y = arguments[1];
		var r = arguments[2];
		var n = arguments[3];
		var star = 1, rotation = 0;
		var argsProcessed;
		if (typeof(arguments[4]) == "number") {
			if (typeof(arguments[5]) == "number") {
				star = arguments[4];
				rotation = arguments[5] * root.lookup("radiansPerUnit").value();
				argsProcessed = 6;
			} else {
				star = arguments[4];
				argsProcessed = 5;
			}
		} else {
			argsProcessed = 4;
		}
		var fillcolour = arguments[argsProcessed];
		var outlinecolours = ["black"];
		var outlineInterior = true;
		var drawingOptions = {};
		return new RegularPolygon(x, y, r, n, star, rotation, fillcolour, outlinecolours, outlineInterior, drawingOptions);
	}}$;
}

${{
	RegularPolygon.prototype.draw = function (context) {
		for (var i = 0; i < this.polygons.length; i++) {
			this.polygons[i].draw(context);
		}
	}
	
	RegularPolygon.prototype.toString = function () {
		return "";
	}
	
	RegularPolygon.prototype.getEdenCode;
	
}}$;
