## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Combobox = function (name, options, x, y, enabled) {
	this.name = name;
	this.options = options;
	this.x = x;
	this.y = y;
	this.enabled = enabled;
}

function makeoptionshtml(opts) {
	var html = "";
	for (x in opts) {
		html = html + "\n<option value=\""+ opts[x] + "\">"+ opts[x] + "</option>";
	}
	return html;
}
}}$;

func Combobox { ${{
  var name = arguments[0];
  var options = arguments[1];
  var x = arguments[2];
  var y = arguments[3];
  var enabled = arguments[4];
  return new Combobox(name, options, x, y, enabled);
}}$; }

${{
Combobox.prototype.draw = function(context,content) {
  var me = "canvas_" + this.name;
  var me2 = this.name;
//  var box = $("#"+me).get(0);
  var box = this.element;

  if (box === undefined) {
  
	var dis = "";
	if (this.enabled == true) { dis = ""; }
	else { dis = "disabled=\"true\""; }

	var can = $(content);
	var boxhtml = $("<select id=\"" + me + "\" " + dis + " style=\"position: absolute; left: " + this.x + "px; top: " + this.y + "px;\"></select>");

	boxhtml.html(makeoptionshtml(this.options));

	boxhtml.change(function() {
		root.lookup(me2 + "_value").assign(boxhtml.get(0).value);
	}).appendTo(can);

        this.element = boxhtml.get(0);


	boxhtml.get(0).togarbage = false;

	//Initialise
	root.lookup(me2 + "_value").assign(this.options[0]);
  } else {
	$(box).html(makeoptionshtml(this.options));
	box.togarbage = false;

        $(box).val(root.lookup(this.name+"_value").cached_value);

	if (this.enabled == true) { 
            box.disabled = false; 
        }
	else { box.disabled = true; }
        
	box.style.left = "" + this.x + "px";
	box.style.top = "" + this.y + "px";

        $(box).appendTo($(content));
  }
};
}}$;
${{
Combobox.prototype.toString = function() {
  return "Combobox(" + this.name + ", " + this.options + ", " + this.x + ", "+this.y+", "+this.enabled+")";
};
}}$;