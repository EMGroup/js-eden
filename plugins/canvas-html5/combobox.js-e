## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Combobox = function (name, options, x, y, enabled) {
	this.name = name;
	this.options = options;
	this.x = x;
	this.y = y;
	this.enabled = enabled;
}

Combobox.prototype.hash = function () {
	return this.name+"$$"+
				this.options.join("$$")+
				this.x+"$$"+
				this.y+"$$"+
				this.enabled;
};

}}$;

func Combobox { ${{
  var name = arguments[0];
  var options = arguments[1];
  var x = arguments[2];
  var y = arguments[3];
  var enabled = arguments[4];
  if (enabled === undefined) enabled = true;
  return new Combobox(name, options, x, y, enabled);
}}$; }


${{

function makeOptionsHTML(values) {
	var html = "";
	for (var i = 0; i < values.length; i++) {
		html = html + "\n<option value=\"" + values[i] + "\">" + values[i] + "</option>";
	}
	return html;
}

Combobox.prototype.draw = function(context) {
	var me = this;
	var agent = root.lookup("Combobox");
	var valueName = this.name + '_value';
	var valueSym = root.lookup(valueName);

	var dropDownList;
	if (this.elements === undefined) {

		var disabled = this.enabled === false? "disabled=\"disabled\"" : "";
		var dropDownListJQ = $("<select " + disabled + " style=\"position: absolute\"></select>");
		dropDownListJQ.html(makeOptionsHTML(this.options));

		dropDownListJQ.change(function(event) {
			root.lookup(valueName).assign(event.target.value, agent, true);
		});

		dropDownList = dropDownListJQ.get(0);
		var initialValue = valueSym.value();
		if (initialValue === undefined) {
			valueSym.assign(me.options[0], agent, true);
		} else {
			dropDownList.value = initialValue;
		}

		valueSym.addJSObserver("updateCombobox", function (symbol, value) {
			dropDownList.value = value;
		});

		this.elements = [dropDownList];

	} else {

		//Case when the user has performed direct assignment to one or more JavaScript properties.
		dropDownList = this.elements[0];
		$(dropDownList).html(makeOptionsHTML(this.options));

		dropDownList.value = valueSym.value();

		if (this.enabled == true) { 
			dropDownList.disabled = false; 
		} else {
			dropDownList.disabled = true;
		}

	}
};

Combobox.prototype.scale = function (scale, zoom, origin) {
	var style = this.elements[0].style;
	style.left = Math.round(this.x * scale + origin.x) + "px";
	style.top = Math.round(this.y * scale + origin.y) + "px";
	style.fontSize = zoom + "em";
debugger;
};

Combobox.prototype.toString = function() {
	return "Combobox(\"" + this.name + "\", " + Eden.edenCodeForValue(this.options) + ", " +
		this.x + ", " + this.y + ", " + this.enabled+")";
};

Combobox.prototype.getEdenCode = Combobox.prototype.toString;

}}$;
