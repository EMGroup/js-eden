##Radio Buttons
${{
RadioButtons = function (name, buttonValues, x, y, enabled, horizontal){
	this.name = name;
	this.buttonValues = buttonValues;
	this.x = x;
	this.y = y;
    this.enabled = enabled;
	this.horizontal = horizontal;
}

RadioButtons.prototype.hash = function () {
	return this.name+"$$"+
				this.buttonValues.join("$$")+
				this.x+"$$"+
				this.y+"$$"+
				this.enabled+"$$"+
				this.horizontal;
};
}}$;

func RadioButtons { ${{
  var name = arguments[0];
  var buttonValues = arguments[1];
  var x = arguments[2];
  var y = arguments[3];
  var enabled = arguments[4];
  var horizontal = arguments[5];
  return (new RadioButtons(name, buttonValues, x, y, enabled, horizontal));
}}$; }

${{

RadioButtons.prototype.makeHTML = function() {
	var build = "";

	for (var i = 0; i < this.buttonValues.length; i++) {
		build = build + "<input type=\"radio\" name=\"" + this.name + "\" value=\"" + this.buttonValues[i] + "\">" + this.buttonValues[i] + "<br/>";
	}

	
	if (this.horizontal) {
		return "<form style=\"position: absolute; display: inline-flex\">" + 
			build + "</form>";
	} else {
		return "<form style=\"position: absolute\">" +
			build + "</form>";
	}
};

RadioButtons.prototype.draw = function (context) {

	if(this.elements === undefined) {
		var name = this.name;

		//Make the HTML
		var formJQ = $(this.makeHTML());

		var formElement = formJQ.get(0);
		var updateValue = function (buttonGroup, value) {
			for (var i = 0; i < buttonGroup.length; i++) {
				if (buttonGroup[i].value == value) {
					buttonGroup[i].checked = true;
					break;
				} else {
					//Possibility of having no radio button selected.
					buttonGroup[i].checked = false;
				}
			}
		
		};
		var valueSym = root.lookup(name + "_value");
		var initialValue = valueSym.value();
		if (initialValue !== undefined) {
			updateValue(formElement.elements, initialValue);
		}
		valueSym.addJSObserver("updateUI", function (symbol, value) {
			updateValue(formElement.elements, value);
		});

		formJQ.change(function(event) {
			root.lookup(name + "_value").assign(event.target.value, root.scope, Symbol.hciAgent, true);
		})
		.on("mousedown", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseDownZone").assign(undefined, root.scope, Symbol.hciAgent, mouseFollow);
		})
		.on("mouseup", function () {
			edenUI.plugins.Canvas2D.endClick();
		})
		.on("mouseenter", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseZone").assign(name, root.scope, Symbol.hciAgent, mouseFollow);
		});

		this.elements = [formElement];
	}
};

RadioButtons.prototype.scale = function (scale, zoom, origin) {
	var elem = this.elements[0];
	var style = elem.style;
	style.left = Math.round(this.x * scale + origin.x) + "px";
	style.top = Math.round(this.y * scale + origin.y) + "px";
	style.fontSize = zoom + "em";
	var buttonSize = Math.round(13 * zoom) + "px";
	$(elem).find("input").css({width: buttonSize, height: buttonSize});
};

RadioButtons.prototype.toString = function() {
  return "RadioButtons(" + Eden.edenCodeForValues(this.buttonValues, this.x, this.y, this.enabled, this.horizontal) + ")";
};

RadioButtons.prototype.getEdenCode = RadioButtons.prototype.toString;

}}$;
