## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Rectangle = function(x, y, width, height, fillcolour, outlinecolour, drawingOptions) {
  this.x = x;
  this.y = y;
  this.width = width;
  this.height = height;
  this.fillcolour = fillcolour;
  this.outlinecolour = outlinecolour;
  this.drawingOptions = drawingOptions;
}
}}$;

func Rectangle { ${{
	var x = arguments[0];
	var y = arguments[1];
	var width = arguments[2];
	var height = arguments[3];
	var fillcolour = arguments[4];
	var outlinecolour = arguments[5];
	if (fillcolour === undefined && outlinecolour === undefined) {
		outlinecolour = "black";
	}
	var drawingOptions = arguments[6];
	if (typeof(drawingOptions) == "object" && !("join" in drawingOptions) &&
		drawingOptions.lineWidth < 10) { //Bug in Chrome v44, shape isn't drawn when miter join is used with larger line widths.
		drawingOptions.join = "miter"
	}
	return new Rectangle(x, y, width, height, fillcolour, outlinecolour, drawingOptions);
}}$; };

${{

Rectangle.prototype.draw = function (context) {
	if (this.fillcolour !== undefined) {
		edenUI.plugins.Canvas2D.setFillStyle(context, this.fillcolour);
		context.fillRect(this.x, this.y, this.width, this.height);
	}
	if (this.outlinecolour !== undefined) {
		context.strokeStyle = this.outlinecolour;
		context.strokeRect(this.x, this.y, this.width, this.height);
	}
};

Rectangle.prototype.toString = function() {
	var s = "Rectangle(" + this.x + ", " + this.y + ", " + this.width + ", " + this.height + ", " +
		Eden.edenCodeForValue(this.fillcolour) + ", " + Eden.edenCodeForValue(this.outlinecolour);

	if (this.drawingOptions !== undefined) {
		s = s + ", " + Eden.edenCodeForValue(this.drawingOptions);
	}
	
	s = s + ")";
	return s;
};

Rectangle.prototype.getEdenCode = Rectangle.prototype.toString;

Rectangle.prototype.imageMapArea = function () {
	return "shape=\"rect\" coords=\"" + this.x + "," + this.y + "," + (this.x + this.width) + "," +
		(this.y + this.height) + "\"";
}

Rectangle.prototype.centre = function () {
	return new Point(this.x + this.width / 2, this.y + this.height / 2);
}

}}$;
