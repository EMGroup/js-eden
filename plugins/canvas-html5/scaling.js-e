## Copyright (c) 2015, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{

	Scaling = function (scaleX, scaleY, centreX, centreY, translateX, translateY, items) {
		this.scaleX = scaleX;
		this.scaleY = scaleY;
		this.centreX = centreX;
		this.centreY = centreY;
		this.translateX = translateX;
		this.translateY = translateY;
		this.items = items;
	}

	Scaling.prototype = new EdenUI.plugins.Canvas2D.Transform;

	Scaling.prototype.transform = function (context) {
		var translateX = this.translateX;
		if (translateX !== undefined) {
			context.translate(translateX, this.translateY);
		}

		context.scale(this.scaleX, this.scaleY);

		var centreX = this.centreX;
		if (centreX !== undefined) {
			context.translate(-centreX, -this.centreY);
		}
	}

	Scaling.prototype.getCSS = function (scale) {
		var x = this.translateX;
		var y = this.translateY;
		var css;
		if (x || y) {
			x = x * scale;
			y = y * scale;
			css = "translate(" + x + "px, " + y + "px) ";
		} else {
			css = "";
		}

		var scaleX = this.scaleX * scale;
		var scaleY = this.scaleY * scale;
		css = css + "scale(" + scaleX + ", " + scaleY + ") ";

		x = this.centreX;
		y = this.centreY;
		if (x || y) {
			x = -x / this.scaleX;
			y = -y / this.scaleY;
			css = css + "translate(" + x + "px, " + y + "px)";
		}
		return css;
	}

	Scaling.prototype.inverse = function (x, y) {
		var invX = x, invY = y;
		
		var translateX = this.translateX;
		if (translateX) {
			invX = invX - translateX;
			invY = invY - this.translateY;
		}

		invX = invX / this.scaleX;
		invY = invY / this.scaleY;

		var centreX = this.centreX;
		if (centreX) {
			invX = invX + centreX;
			invY = invY + this.centreY;
		}
		return new Point(invX, invY);
	}

	Scaling.prototype.toString = function () {
		return "Scale(" + Eden.edenCodeForValues(this.scaleX, this.scaleY, this.centreX,
			this.centreY, this.translateX, this.translateY, this.items) + ")";
	}

	Scaling.prototype.getEdenCode = Scaling.prototype.toString;

}}$;

func Scale {
	${{
		var scaleX, scaleY, centreX, centreY, translateX, translateY, items;

		var argNum = arguments.length - 1;
		var arg;

		items = arguments[argNum];
		argNum--;
		if (argNum > 0) {
			arg = arguments[argNum];
			if (arg instanceof Point) {
				translateX = arg.x;
				translateY = arg.y;
				argNum--;
			} else if (argNum >= 2) {
				translateY = arg;
				argNum--;
				translateX = arguments[argNum];
				argNum--;
			}
			if (argNum > 0) {
				arg = arguments[argNum];
				if (arg instanceof Point) {
					centreX = arg.x;
					centreY = arg.y;
					argNum--;
				} else if (argNum >= 2) {
					centreY = arg;
					argNum--;
					centreX = arguments[argNum];
					argNum--;
				}
			}
			if (argNum == 1) {
				scaleY = arguments[argNum];
			} else if (argNum > 0) {
				eden.error(new Error("Scale: invalid parameters."), "error");
				return undefined;
			}
		}

		scaleX = arguments[0];
		if (scaleY === undefined) {
			scaleY = scaleX;
		}

		return new Scaling(scaleX, scaleY, centreX, centreY, translateX, translateY, items);
	}}$;
}
