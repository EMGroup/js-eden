${{
Textbox = function (name, x, y, width, height, enabled) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
    this.enabled = enabled;
}

Textbox.prototype.hash = function () {
	return this.name+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.width+"$$"+
				this.height+"$$"+
				this.enabled;
};
}}$;

func Textbox { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var width = arguments[3];
  var height, enabled;
  if (arguments.length == 6) {
	height = arguments[4];
	enabled = arguments[5];
  } else if (typeof(arguments[4]) == "boolean") {
	enabled = arguments[4];
  } else {
	height = arguments[4];
  }
  if (enabled === undefined) enabled = true;
  return new Textbox(name, x, y, width, height, enabled);
}}$; }

${{
Textbox.prototype.draw = function(context) {	

	if(this.elements === undefined) {
		var me = this;
		var name = this.name;

		var disabled = this.enabled === false? "disabled=\"disabled\"" : "";
		var jQuery;
		if (this.height === undefined) {
			jQuery = $("<input " + disabled + " style=\"position: absolute\" />");
		} else {
			jQuery = $("<textarea " + disabled + " style=\"position: absolute\" />");
		}

		var element = jQuery.get(0);
		var valueSymbol = root.lookup(name + "_value");
		var value = valueSymbol.value();
		if (value === undefined) {
			valueSymbol.assign("", root.scope, root.lookup("Textbox"));
		} else {
			element.value = value;
		}
		valueSymbol.addJSObserver("updateTextbox", function (obs, value) {
			me.elements[0].value = value;
		});

		jQuery
		.on("input", function(event) {
			root.lookup(name + "_value").assign(event.target.value, root.scope, Symbol.hciAgent, true);
		})
		.on("mousedown", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseDownZone").assign(undefined, root.scope, Symbol.hciAgent, mouseFollow);
		})
		.on("mouseup", function () {
			edenUI.plugins.Canvas2D.endClick();
		})
		.on("mouseenter", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseZone").assign(name, root.scope, Symbol.hciAgent, mouseFollow);
		});

		this.elements = [element];
  }
};

Textbox.prototype.scale = function (scale, zoom, origin) {
	var style = this.elements[0].style;
	style.left = Math.round(this.x * scale + origin.x) + "px";
	style.top = Math.round(this.y * scale + origin.y) + "px";
	style.width = Math.round(this.width * scale - 6) + "px";
	var rows = Math.floor(Math.round(this.height * scale - 6) / (23.275 * zoom));	//See css/eden.css
	if (rows == 0) {
		rows = 1;
	}
	style.height = (rows * 20.275 * zoom) + "px";
	style.fontSize = (13.3 * zoom) + "px";
};

Textbox.prototype.toString = function() {
  return "Textbox(\"" + this.name + "\", " + this.x + ", " + this.y + ", " + this.width + ", " +
	Eden.edenCodeForValue(this.height) + ", " + this.enabled + ")";
};

Textbox.prototype.getEdenCode = Textbox.prototype.toString;

}}$;
