## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Sector = function(x, y, r, sAngle, eAngle, fillcolour, outlinecolour,drawingOptions) {
	this.x = x;
	this.y = y;
	this.r = r;
	this.sAngle = sAngle;
	this.eAngle = eAngle;
	var radiansPerUnit = root.lookup("radiansPerUnit").value();
	this.sRadians = sAngle * radiansPerUnit;
	this.eRadians = eAngle * radiansPerUnit;

    this.fillcolour = fillcolour;
	this.outlinecolour = outlinecolour;
	this.drawingOptions = drawingOptions;
}
}}$;

func Sector { ${{
	var x = arguments[0];
	var y = arguments[1];
	var r = arguments[2];
	var sAngle = arguments[3];
	var eAngle = arguments[4];
	var fillcolour = arguments[5];
	var outlinecolour = arguments[6];
	if (fillcolour === undefined && outlinecolour === undefined) {
		fillcolour = "black";
	}
	var drawingOptions = arguments[7];
	return new Sector(x, y, r, sAngle, eAngle, fillcolour, outlinecolour, drawingOptions);
}}$; };
radiansPerUnit ~> [Sector];

${{

Sector.prototype.draw = function (context) {
	var anticlockwise;
	if (this.drawingOptions !== undefined && "direction" in this.drawingOptions) {
		switch (this.drawingOptions.direction) {
		case "anticlockwise":
		case "acw":
		case "ccw":
			anticlockwise = true;
			break;
		case "auto":
			anticlockwise = this.sAngle < this.eAngle;
			break;
		case "clockwise":
		case "cw":
			anticlockwise = false;
			break;
		default:
			anticlockwise = true;
		}
	} else {
		anticlockwise = this.sAngle < this.eAngle;
	}

	var radius;
	if (this.drawingOptions !== undefined && this.drawingOptions.lineWidth % 2 == 1) {
		var scale = this.drawingOptions.lineWidth / context.lineWidth;
		context.translate(0.5 / scale, 0.5 / scale);
		radius = this.r - 0.5 * context.lineWidth + 0.5 / scale;
	} else {
		radius = this.r - 0.5 * context.lineWidth;
	}

	context.beginPath();
	context.arc(this.x, this.y, radius, -this.sRadians, -this.eRadians, anticlockwise);
	context.lineTo(this.x, this.y);
	context.closePath();
 
	if (this.fillcolour !== undefined) {
		edenUI.plugins.Canvas2D.setFillStyle(context, this.fillcolour);
		context.fill();
	}
	if (this.outlinecolour !== undefined) {
		context.strokeStyle = this.outlinecolour;
		context.stroke();
	}
};

Sector.prototype.toString = function() {
	var s = "Sector(" +
		this.x + ", " +
		this.y + ", " +
		this.r + ", " +
		this.sAngle + ", " +
		this.eAngle + ", " +
		Eden.edenCodeForValue(this.fillcolour) + ", " +
		Eden.edenCodeForValue(this.outlinecolour);

	if (this.drawingOptions !== undefined) {
		s = s + ", " + Eden.edenCodeForValue(this.drawingOptions);
	}
	
	s = s + ")";
	return s;
}

Sector.prototype.getEdenCode = Sector.prototype.toString;

}}$;
