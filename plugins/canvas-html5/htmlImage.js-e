## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

##Doesn't taint the canvas if the url is located on another domain.

${{
HTMLImage = function (name, x, y, width, height, scaleFactor, url, imageMap) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.scaledWidth = width;
	this.scaledHeight = height;
	this.scaleFactor = scaleFactor;
	this.url = url;
	this.imageMap = imageMap;	
}

HTMLImage.prototype.hash = function () {
	return this.name+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.width+"$$"+
				this.height+"$$"+
				this.scaleFactor+"$$"+
				this.url+"$$"+
				this.imageMap;
};
}}$;

func HTMLImage { ${{
	var name = arguments[0];
	var x = arguments[1];
	var y = arguments[2];
	var width, height, url, imageMap;
	var scaleFactor = 1;

	var numArgs = arguments.length;
	var argsLeft;

	if (numArgs == 8 || typeof(arguments[numArgs - 1]) == "object") {
		imageMap = arguments[numArgs - 1];
		url = arguments[numArgs - 2];
		argsLeft = numArgs - 5;
	} else {
		url = arguments[numArgs - 1];
		argsLeft = numArgs - 4;
	}

	if (argsLeft >= 1) {
		width = arguments[3];
		if (argsLeft >=2) {
			height = arguments[4];
			if (argsLeft == 3) {
				scaleFactor = arguments[5];
			}
		}
	}
	return new HTMLImage(name, x, y, width, height, scaleFactor, url, imageMap);
}}$; }

${{
HTMLImage.prototype.draw = function(context) {
  if (this.elements === undefined) {
	var id = "canvas_" + this.name;
	var name = this.name;
	var me = this;
	var agent = root.lookup("HTMLImage");

	var html = "<img style=\"position: absolute\" src=\"" + this.url + "\"";

	if (this.imageMap !== undefined) {
		html = html + " usemap=\"#" + id + "-map\" draggable=\"false\" class=\"noselect\"";
	}
	html = html + "/>";
	var imageJQ = $(html);
	if (this.scaledWidth === undefined || this.scaledHeight === undefined) {
		imageJQ.on("load", function (event) {
			var image = event.target;
			var parentID = image.parentElement.id;
			var canvasName = parentID.slice(0, -21) // trim -dialog-canvascontent
			var canvasScale = root.lookup("_view_" + canvasName + "_scale").value() * root.lookup("_view_" + canvasName + "_zoom").value();

			if (me.scaledWidth === undefined && me.scaledHeight === undefined) {
				me.scaledWidth = image.naturalWidth;
				me.scaledHeight = image.naturalHeight;
			} else if (me.scaledWidth === undefined) {
				me.scaledWidth = image.naturalWidth * me.scaledHeight / image.naturalHeight;
			}
			if (me.scaledHeight === undefined) {
				me.scaledHeight = image.naturalHeight * me.scaledWidth / image.naturalWidth;
			}
			image.width = Math.round(me.scaledWidth * canvasScale / me.scaleFactor);
			image.height = Math.round(me.scaledHeight * canvasScale / me.scaleFactor);
		});
	}
	this.elements = [imageJQ.get(0)];

	if (this.imageMap !== undefined) {
		//Initialize to undefined if necessary.
		root.lookup(name + "_zoneMouseDown");
		root.lookup(name + "_zoneMouseUp");

		imageJQ.on("mousedown", function () {
			var autocalcSym = root.lookup("autocalc");
			var autocalcValueOnEntry = autocalcSym.value();
			var autocalcLastModified = autocalcSym.last_modified_by === undefined? undefined : {name: autocalcSym.last_modified_by};
			var followMouse = root.lookup("mouseFollow").value();
			autocalcSym.assign(0, Symbol.hciAgent, followMouse);

			edenUI.plugins.Canvas2D.setMouseDown(name + "_click", true, false, agent);
			root.lookup(name + "_zoneMouseDown").assign(undefined, agent, followMouse);
			edenUI.plugins.Canvas2D.scheduleMouseUp(name + "_zoneMouseUp", undefined, agent);

			autocalcSym.assign(autocalcValueOnEntry, autocalcLastModified, followMouse);
		});	

		var mapJQ = $("<map name=\"" + id + "-map\" id=\"" + id + "-map\"></map>");

		var setAreaEvents = function (area, regionName) {
			area.on("mouseenter", function (event) {
				var followMouse = root.lookup("mouseFollow").value();
				root.lookup(name + "_zone").assign(regionName, agent, followMouse);

			}).on("mouseout", function (event) {
				var followMouse = root.lookup("mouseFollow").value();
				root.lookup(name + "_zone").assign(undefined, agent, followMouse);

			}).on("mousedown", function (event) {
				var autocalcSym = root.lookup("autocalc");
				var autocalcValueOnEntry = autocalcSym.value();
				var autocalcLastModified = autocalcSym.last_modified_by === undefined? undefined : {name: autocalcSym.last_modified_by};
				var followMouse = root.lookup("mouseFollow").value();
				autocalcSym.assign(0, Symbol.hciAgent, followMouse);
				
				edenUI.plugins.Canvas2D.setMouseDown(name + "_click", true, false, agent);
				root.lookup(name + "_zoneMouseDown").assign(regionName, agent, followMouse);
				edenUI.plugins.Canvas2D.scheduleMouseUp(name + "_zoneMouseUp", undefined, agent);

				autocalcSym.assign(autocalcValueOnEntry, autocalcLastModified, followMouse);

			}).on("mouseup", function (event) {
				var autocalcSym = root.lookup("autocalc");
				var autocalcValueOnEntry = autocalcSym.value();
				var autocalcLastModified = autocalcSym.last_modified_by === undefined? undefined : {name: autocalcSym.last_modified_by};
				var followMouse = root.lookup("mouseFollow").value();
				autocalcSym.assign(0, Symbol.hciAgent, followMouse);

				edenUI.plugins.Canvas2D.setMouseUp(name + "_click", false, agent);
				edenUI.plugins.Canvas2D.setMouseUp(name + "_zoneMouseUp", regionName, agent);

				autocalcSym.assign(autocalcValueOnEntry, autocalcLastModified, followMouse);

			});
		};

		for (var i = this.imageMap.length - 1; i >= 0; i--) {
			var regionName = this.imageMap[i][0];
			var areaJQ = $("<area " + this.imageMap[i][1].imageMapArea() + "/>");
			setAreaEvents(areaJQ, regionName);
			mapJQ.append(areaJQ);
		}
		this.elements.push(mapJQ.get(0));

	} else {

		//No image map.
		imageJQ.on("mousedown", function () {
			edenUI.plugins.Canvas2D.setMouseDown(name + "_click", true, false, agent);
		});	
	}
	var clickSym = root.lookup(name + "_click");
	if (clickSym.value() === undefined) {
		clickSym.assign(false, agent);
	}
  }
};

HTMLImage.prototype.scale = function (scale, zoom, origin) {
	var imageElem = this.elements[0];
	var style = imageElem.style;
	style.left = Math.round(this.x * scale + origin.x) + "px";
	style.top = Math.round(this.y * scale + origin.y) + "px";
	imageElem.width = Math.round(this.scaledWidth * scale / this.scaleFactor);
	imageElem.height = Math.round(this.scaledHeight * scale / this.scaleFactor);
};

HTMLImage.prototype.toString = function() {
  return "HTMLImage(\"" + this.name + "\", " + this.x + ", " + this.y + ", " + this.width + ", " +
	this.height + ", \"" + this.url + "\", " + Eden.edenCodeForValue(this.imageMap) + ")";
};

HTMLImage.prototype.getEdenCode = HTMLImage.prototype.toString;

}}$;

func imageWithZones {
	para name, x, y;
	auto width, height, url, imageMap, testing, items;
	auto i, shape, zoneName, centre;
	items = [];
	if ($# < 8) {
		url = $[4];
		imageMap = $[5];
		testing = $[6];
	} else {
		width = $[4];
		height = $[5];
		url = $[6];
		imageMap = $[7];
		testing = $[8];
	}
	
	if (testing) {
		append items, Image(x, y, width, height, url);
		for (i = 1; i <= imageMap#; i++) {
			zoneName = imageMap[i][1];
			shape = imageMap[i][2];
			append items, shape;
			centre = shape.centre();
			append items, Div(zoneName, centre.x - 5.5 * zoneName#, centre.y - 10, @, @, "color: white; background-color: black; font-size: 20px; font-family: monospace");
		}
	} else {
		append items, HTMLImage(name, x, y, width, height, url, imageMap);
	}
	return items;
}
