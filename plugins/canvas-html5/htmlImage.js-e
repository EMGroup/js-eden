## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

##Doesn't taint the canvas if the url is located on another domain.

${{
HTMLImage = function (name, x, y, width, height, scaleFactor, url, imageMap) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.scaledWidth = width;
	this.scaledHeight = height;
	this.scaleFactor = scaleFactor;
	this.url = url;
	this.imageMap = imageMap;	
}

HTMLImage.prototype.hash = function () {
	return this.name+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.width+"$$"+
				this.height+"$$"+
				this.scaleFactor+"$$"+
				this.url+"$$"+
				this.imageMap;
};
}}$;

func HTMLImage { ${{
	var numArgs = arguments.length;
	var argsProcessedFirst;
	
	var name;
	if (typeof(arguments[0]) == "string") {
		name = arguments[0];
		argsProcessedFirst = 1;
	} else {
		argsProcessedFirst = 0;
	}

	var x = arguments[argsProcessedFirst];
	argsProcessedFirst++;
	var y = arguments[argsProcessedFirst];
	argsProcessedFirst++;

	var width, height, url, imageMap;
	var scaleFactor = 1;
	var argsLeft = numArgs - argsProcessedFirst;

	if (numArgs == 8 || Array.isArray(arguments[numArgs - 1])) {
		imageMap = arguments[numArgs - 1];
		url = arguments[numArgs - 2];
		argsLeft = argsLeft - 2;
	} else {
		url = arguments[numArgs - 1];
		argsLeft--;
	}

	if (argsLeft >= 1) {
		width = arguments[argsProcessedFirst];
		if (argsLeft >=2) {
			height = arguments[argsProcessedFirst + 1];
			if (argsLeft == 3) {
				scaleFactor = arguments[argsProcessedFirst + 2];
			}
		}
	}
	return new HTMLImage(name, x, y, width, height, scaleFactor, url, imageMap);
}}$; }

${{
HTMLImage.prototype.draw = function(context) {
  if (this.elements === undefined) {
	var id = "canvas_" + this.name;
	var name = this.name;
	var me = this;

	var html = "<img style=\"position: absolute\" src=\"" + this.url + "\"";
	if (this.imageMap !== undefined) {
		html = html + " usemap=\"#" + id + "-map\" draggable=\"false\" class=\"noselect\"";
	}
	html = html + "/>";
	var imageJQ = $(html);

	if (this.scaledWidth === undefined || this.scaledHeight === undefined) {
		imageJQ.on("load", function (event) {
			var image = event.target;
			var parentID = image.parentElement.id;
			var canvasName = parentID.slice(0, -21) // trim -dialog-canvascontent
			var canvasScale = root.lookup("_view_" + canvasName + "_scale").value() * root.lookup("_view_" + canvasName + "_zoom").value();

			if (me.scaledWidth === undefined && me.scaledHeight === undefined) {
				me.scaledWidth = image.naturalWidth;
				me.scaledHeight = image.naturalHeight;
			} else if (me.scaledWidth === undefined) {
				me.scaledWidth = image.naturalWidth * me.scaledHeight / image.naturalHeight;
			}
			if (me.scaledHeight === undefined) {
				me.scaledHeight = image.naturalHeight * me.scaledWidth / image.naturalWidth;
			}
			image.width = Math.round(me.scaledWidth * canvasScale / me.scaleFactor);
			image.height = Math.round(me.scaledHeight * canvasScale / me.scaleFactor);
		});
	}
	this.elements = [imageJQ.get(0)];

	imageJQ.on("mousemove", function (event) {
		var image = event.target;
		var parentID = image.parentElement.id;
		var canvasName = parentID.slice(0, -21) // trim -dialog-canvascontent
		var canvasScale = root.lookup("_view_" + canvasName + "_scale").value() * root.lookup("_view_" + canvasName + "_zoom").value();
		var mouseFollow = root.lookup("mouseFollow").value();
		var imagePos = $(this).offset();
		var x = (event.pageX - Math.round(imagePos.left)) / canvasScale;
		var y = (event.pageY - Math.round(imagePos.top)) / canvasScale;
		root.lookup("mousePosition").assign(new Point(x, y), Symbol.hciAgent, mouseFollow);
	});

	if (name !== undefined) {
		if (eden.isValidIdentifier(name)) {
			var clickSym = root.lookup(name + "_click");
			if (clickSym.value() === undefined) {
				clickSym.assign(false, root.lookup("HTMLImage"));
			}
		}
		imageJQ.on("mousedown", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseDownZone").assign(name, Symbol.hciAgent, mouseFollow);
		})
		.on("mouseup", function () {
			edenUI.plugins.Canvas2D.endClick();
		})
		.on("mouseenter", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseZone").assign(name, Symbol.hciAgent, mouseFollow);
		});
	}
	
	if (this.imageMap !== undefined) {
		var mapJQ = $("<map name=\"" + id + "-map\" id=\"" + id + "-map\"></map>");

		var setAreaEvents = function (area, regionName) {
			area.on("mouseenter", function (event) {
				var followMouse = root.lookup("mouseFollow").value();
				root.lookup("mouseZone").assign(regionName, Symbol.hciAgent, followMouse);
			})
			.on("mousedown", function (event) {
				var followMouse = root.lookup("mouseFollow").value();
				root.lookup("mouseDownZone").assign(regionName, Symbol.hciAgent, followMouse);

			}).on("mouseup", function (event) {
				edenUI.plugins.Canvas2D.endClick();
			});
		};

		for (var i = this.imageMap.length - 1; i >= 0; i--) {
			var regionName = this.imageMap[i][0];
			var areaJQ = $("<area " + this.imageMap[i][1].imageMapArea() + "/>");
			setAreaEvents(areaJQ, regionName);
			mapJQ.append(areaJQ);

			if (eden.isValidIdentifier(regionName)) {
				var clickSym = root.lookup(regionName + "_click");
				if (clickSym.value() === undefined) {
					clickSym.assign(false, root.lookup("HTMLImage"));
				}
			}
		}
		this.elements.push(mapJQ.get(0));
	}
  }
};

HTMLImage.prototype.scale = function (scale, zoom, origin) {
	var imageElem = this.elements[0];
	var style = imageElem.style;
	style.left = Math.round(this.x * scale + origin.x) + "px";
	style.top = Math.round(this.y * scale + origin.y) + "px";
	imageElem.width = Math.round(this.scaledWidth * scale / this.scaleFactor);
	imageElem.height = Math.round(this.scaledHeight * scale / this.scaleFactor);
};

HTMLImage.prototype.toString = function() {
  return "HTMLImage(" + Eden.edenCodeForValue(this.name) + ", " + this.x + ", " + this.y + ", " +
	this.width + ", " + this.height + ", \"" + this.url + "\", " + Eden.edenCodeForValue(this.imageMap) + ")";
};

HTMLImage.prototype.getEdenCode = HTMLImage.prototype.toString;

}}$;

func imageWithZones {
	para name, x, y;
	auto width, height, url, imageMap, testing, items;
	auto i, shape, zoneName, centre;
	items = [];
	if ($# < 8) {
		url = $[4];
		imageMap = $[5];
		testing = $[6];
	} else {
		width = $[4];
		height = $[5];
		url = $[6];
		imageMap = $[7];
		testing = $[8];
	}
	
	if (testing) {
		append items, Image(x, y, width, height, url);
		for (i = 1; i <= imageMap#; i++) {
			zoneName = imageMap[i][1];
			shape = imageMap[i][2];
			append items, shape;
			centre = shape.centre();
			append items, Div(zoneName, centre.x - 5.5 * zoneName#, centre.y - 10, @, @, "color: white; background-color: black; font-size: 20px; font-family: monospace");
		}
	} else {
		append items, HTMLImage(name, x, y, width, height, url, imageMap);
	}
	return items;
}
