##Bugs:
##Triggered procedures are possibly called twice when making assignments?
##If _paused is defined by dependency and is true while seeking then the video starts playing while the mouse button is still held down.
##_chapter doesn't yet update correctly if the a backward seek is performed.
##Attempting to play back video in reverse (vid_speed < 0) only works on Safari on Mac.  A workaround is possible.
##Todo:
##Add support for poster images.
##Add mode that draws the video onto the canvas.
##Useful site for extracting YouTube video URLs: http://www.downvids.net/

##For a Video drawable named "vid", the following observables are available.  All are read/write.
##
##vid_url
##	The URL of the current video loaded into the video player.
##
##vid_position
##	A Point object representing the position of the video player on the canvas.
##
##vid_size
##	A Point object representing the width and height of the video as it is displayed on the canvas.
##
##vid_scale
##	A number representing the canvas scale factor used to express vid_size.
##
##vid_controls
##	Whether or not the built-in playback controls are available to the user or not.
##
##vid_paused
##	True if the video is not currently playing and false if it is playing or if it should be played
##	as soon as it has finished loading.  Note that if vid_paused is determined by dependency and the
##	user overrides this decision by pausing or resuming playback using the playback controls then
##	the value of vid_paused will not reflect the true status of the video playback.  Also, if
##	vid_paused is determined by dependency and equals true when the end of the video is reached then
##	the video will play again from the beginning.
##
##vid_time
##	The current temporal position of the video, accurate to 1/10 of a second.  Cannot be set by
##	dependency.
##
##vid_chapters and vid_chapter
##	If defined then vid_chapters should be an object where the keys are labels attributed to certain
##	sections of the video and the values are the times when these sections begin.  For example, if
##	vid_chapters is {lesson1: 60, lesson2: 900} then vid_chapter will undefined during the first
##	60 seconds of playback, contain the string "lesson1" between 60 seconds through to 15 minutes
##	into the video, at which point the second lesson begins and vid_chapter will become "lesson2".
##
##vid_speed
##	Determines the speed of video playback, e.g. 1 for normal speed or 2 to play back at double
##	speed.  Setting the speed to zero pauses the video and assigns the value true to vid_paused
##	unless vid_paused is calculated by dependency.  If vid_speed is set to zero then subsequently
##	assigning another value to vid_speed won't automatically resume playback unless vid_paused is
##	calculated by dependency.  If vid_speed is zero when the video becomes unpaused, either by
##	the value of vid_paused changing from true to false or by the user clicking on the play button,
##	then the speed will be reset to 1.  Loading a new video file will also reset the speed to 1.
##
##vid_volume
##	The current volume level of the video's soundtrack, between 0 and 1.  If vid_volume is specified
##	by dependency and playback controls are enabled and the user uses them to adjust the volume
##	then then the dependency will be overwritten by an implicit assignment.
##
##Useful properties of the drawable object itself:
##
##.duration
##	The duration of the currently loaded video file (read-only).
##
##.ended
##	True if the current temporal position is located at the end of the video (read-only).

##Example:
/*
	vid_url = "...";
	vid is Video();
	picture is [vid];

	##Stop to complete an exercise 60 seconds into the video.
	exercisePoints = [60];
	exercisesCompleted = [false];
	exerciseNumber is positionInList(int(vid_time), exercisePoints);
	vid_controls is exerciseNumber == 0 || exercisesCompleted[exerciseNumber];
	vid_paused is vid_controls == false;
*/

func Video {
	${{
		var name = root.currentObservableName();
		if (name === undefined) {
			eden.error(new Error("Video: Every video must be defined by making a dependency."), "error");
			return undefined;
		}
		var preload = arguments[0];
		return new AudioVisual(name, "Video", preload);
	}}$;
}

func Audio {
	${{
		var name = root.currentObservableName();
		if (name === undefined) {
			eden.error(new Error("Audio: Every audio player must be defined by making a dependency."), "error");
			return undefined;
		}
		var preload = arguments[0];
		return new AudioVisual(name, "Audio", preload);
	}}$;
}

${{
	function AudioVisual(name, type, preload) {
		this.name = name;
		this.type = type;
		this.preload = preload;
		
		Object.defineProperty(this, "duration", {
			enumerable: true,
			get: function () {
				if (this.elements === undefined) {
					return 0;
				} else {
					return Math.floor(this.elements[0].duration * 10) / 10;
				}
			}
		});

		Object.defineProperty(this, "ended", {
			enumerable: true,
			get: function () {
				if (this.elements === undefined) {
					return false;
				} else {
					return this.elements[0].ended;
				}
			}
		});

	}
	
	AudioVisual.prototype.hash = function () {
		return this.name;
	}
}}$;

${{
	AudioVisual.prototype.draw = function (context) {
		if (this.elements === undefined ) {
			var me = this;
			var name = this.name;
			var agent = root.lookup(this.type);
			root.beginAutocalcOff();

	//Chapters

			var chapterMarks, chapterNames, chapterIndex, nextChapterAt;
			var setChapters = function (symbol, chapters) {
				chapterMarks = [];
				chapterNames = [];
				chapterIndex = -1;
				nextChapterAt = undefined;
				
				if (chapters instanceof Object) {
					for (var chapterName in chapters) {
						if (chapters.hasOwnProperty(chapterName)) {
							var beginsAt = chapters[chapterName];
							var i = 0;
							while (i < chapterMarks.length) {
								if (beginsAt < chapterMarks[i]) {
									break;
								}
								i++;
							}
							chapterMarks.splice(i, 0, beginsAt);
							chapterNames.splice(i, 0, chapterName);
						}
					}
					
					var currentPos = root.lookup(name + "_time").value();
					while (chapterIndex < chapterMarks.length - 1 &&
					 currentPos >= chapterMarks[chapterIndex + 1]) {
						chapterIndex++;
					}
					
					if (chapterIndex < chapterMarks.length - 1) {
						nextChapterAt = chapterMarks[chapterIndex + 1];
					}
				}
				var chapterSym = root.lookup(name + "_chapter");
				if (chapterIndex == -1) {
					chapterSym.assign(undefined, agent);
				} else {
					chapterSym.assign(chapterNames[chapterIndex], agent);
				}
			};
			var chapterMarksSym = root.lookup(name + "_chapters");
			setChapters(chapterMarksSym, chapterMarksSym.value());
			chapterMarksSym.addJSObserver("setChapters", setChapters);


	//Create HTML tag

			var videoElement = document.createElement(this.type.toLowerCase());


	//Playback controls

			if (this.type == "Video") {

				var controlsSym = root.lookup(name + "_controls");
				var controls = controlsSym.value();
				if (controls === undefined) {
					if (controlsSym.eden_definition === undefined || controlsSym.definition === undefined) {
						controlsSym.assign(true, this);
					} else {
						videoElement.controls = true;
					}
				} else {
					videoElement.controls = controls;
				}
				controlsSym.addJSObserver("showHideControls", function (symbol, showControls) {
					videoElement.controls = showControls;
				});

			} else {
				videoElement.controls = true;
			}


	//Position on screen

			videoElement.style.position = "absolute";
			this.cachedOrigin = new Point(0, 0);
			this.cachedScaleFactor = 1;
			var positionSym = root.lookup(name + "_position");
			var position = positionSym.value();
			if (position === undefined) {
				position = new Point(0, 0);
				positionSym.assign(position, agent);
			}
			positionSym.addJSObserver("reposition", function (sym, position) {
				me.doTranslation(position);
			});


	//Size and preloading

			var preloadWhat;
			if (this.preload) {
				preloadWhat = "auto";
			} else {
				preloadWhat = "none";
			}

			if (this.type == "Video") {

				this.cachedZoom = 1;
				var sizeSym = root.lookup(name + "_size");
				var scaleSym = root.lookup(name + "_scale");
				var size = sizeSym.value();
				if (!(size instanceof Point) && !this.preload) {
					preloadWhat = "metadata";
				}
				sizeSym.addJSObserver("resize", function (symbol, size) {
					var scale = scaleSym.value();
					if (scale !== undefined) {
						me.doScaling(size, scale);
					}
				});
				scaleSym.addJSObserver("resize", function (symbol, scale) {
					if (scale !== undefined) {
						me.doScaling(sizeSym.value(), scale);
					}
				});
				videoElement.addEventListener("loadedmetadata", function (event) {
					if (sizeSym.value() === undefined) {
						root.beginAutocalcOff();
						scaleSym.assign(1, agent);
						sizeSym.assign(new Point(videoElement.videoWidth, videoElement.videoHeight), agent);
						root.endAutocalcOff();
					}
				});

			}
			videoElement.preload = preloadWhat;


	//Paused or playing

			var pausedSym = root.lookup(name + "_paused");
			var beginPaused = pausedSym.value();
			if (beginPaused === undefined && (pausedSym.eden_definition === undefined || pausedSym.definition === undefined)) {
				pausedSym.assign(true, agent);
			} else if (beginPaused == false) {
				videoElement.autoplay = true;
			}
			pausedSym.addJSObserver("pausePlay", function (symbol, pause) {
				if (pause) {
					videoElement.pause();
				} else {
					videoElement.play();
				}
			});
			videoElement.addEventListener("pause", function (event) {
				var pausedSym = root.lookup(name + "_paused");
				if (pausedSym.eden_definition === undefined || pausedSym.definition === undefined) {
					pausedSym.assign(true, agent);
				}
			});
			videoElement.addEventListener("playing", function (event) {
				var pausedSym = root.lookup(name + "_paused");
				if (pausedSym.eden_definition === undefined || pausedSym.definition === undefined) {
					pausedSym.assign(false, agent);
				}
				if (root.lookup(name + "_speed").value() == 0) {
					videoElement.defaultPlaybackRate = 1;
					videoElement.playbackRate = 1;
				}
			});


	//Seeking and time moving forward

			var timeSym = root.lookup(name + "_time");
			var time = timeSym.value();
			if (time !== undefined) {
				videoElement.currentTime = parseFloat(time);
			}
			timeSym.addJSObserver("seek", function (symbol, seconds) {
				var currentTime = videoElement.currentTime;
				var relativePosition = seconds - currentTime;
				if (relativePosition < -1 || relativePosition > 1 ) {
					videoElement.currentTime = seconds;
				}
			});
			videoElement.addEventListener("timeupdate", function (event) {
				var newTimeIndex = Math.floor(videoElement.currentTime * 10);
				if (newTimeIndex != me.timeIndex) {
					root.lookup(name + "_time").assign(newTimeIndex / 10, agent);
					me.timeIndex = newTimeIndex;
					
					if (nextChapterAt !== undefined && videoElement.currentTime >= nextChapterAt) {
						chapterIndex++;
						root.lookup(name + "_chapter").assign(chapterNames[chapterIndex], agent);
						if (chapterIndex < chapterMarks.length - 1) {
							nextChapterAt = chapterMarks[chapterIndex]
						} else {
							nextChapterAt = undefined;
						}
					}
				}
			});
			videoElement.addEventListener("seeked", function (event) {
				if (!root.lookup(name + "_paused").value()) {
					videoElement.play();
				}
			});


	//Playback speed

			var speedResetOnLoad;
			var speedSym = root.lookup(name + "_speed");
			var speed = speedSym.value();
			if (speed === undefined) {
				speedSym.assign(1, agent);
			} else if (speed > 0) {
				videoElement.defaultPlaybackRate = speed;
			}
			speedSym.addJSObserver("changePlaybackSpeed", function (symbol, speed) {
				if (videoElement.playbackRate != speed) {
					if (speed > 0) {
						videoElement.defaultPlaybackRate = speed;
					} else {
						videoElement.defaultPlaybackRate = 1;					
					}
					videoElement.playbackRate = speed;
				}
			});
			videoElement.addEventListener("ratechange", function (event) {
				root.beginAutocalcOff();
				var speedSym = root.lookup(name + "_speed");
				var speed = videoElement.playbackRate;
				if (speedSym.eden_definition === undefined || speedSym.definition === undefined) {
					speedSym.assign(speed, agent);
				}
				if (speed == 0) {
					videoElement.pause();
				} else if (!root.lookup(name + "_paused").value()) {
					videoElement.play();
				}
				root.endAutocalcOff();
			});


	//Volume

			var volumeSym = root.lookup(name + "_volume");
			var volume = volumeSym.value();
			if (volume === undefined) {
				volumeSym.assign(1, agent);
			} else {
				videoElement.volume = volume;			
			}
			volumeSym.addJSObserver("adjustVolume", function (symbol, volume) {
				videoElement.volume = volume;
			});
			videoElement.addEventListener("volumechange", function (event) {
				root.lookup(name + "_volume").assign(videoElement.volume, agent);
			});	


	//Loading a video file

			var urlSym = root.lookup(name + "_url");
			var url = urlSym.value();
			if (url !== undefined) {
				videoElement.src = url;
			}
			urlSym.addJSObserver("newVideo", function (symbol, url) {
				var autoplay = !root.lookup(name + "_paused").value();
				root.lookup(name + "_time").assign(undefined, agent);
				me.timeIndex = undefined;
				videoElement.autoplay = autoplay;
				if (!autoplay) {
					if (me.preload) {
						videoElement.preload = "auto";
					} else if (root.lookup(name + "_size").value() instanceof Point) {
						videoElement.preload = "none";
					} else {
						videoElement.preload = "metadata";
					}
				}
				videoElement.src = url;
				videoElement.load();
			});


	//Finalize creation

			this.elements = [videoElement];
			root.endAutocalcOff();
		}
	}

	AudioVisual.prototype.scale = function (scale, zoom , origin) {
		this.cachedScaleFactor = scale;
		this.cachedOrigin = origin;

		var name = this.name;
		var position = root.lookup(name + "_position").value();
		this.doTranslation(position);

		if (this.type == "Video") {
			this.cachedZoom = zoom;
			var scaleSym = root.lookup(name + "_scale");
			var videoScale = scaleSym.value();

			if (videoScale === undefined) {
				videoScale = scale / zoom;
				scaleSym.assign(videoScale, root.lookup(this.type));
			} else {
				var size = root.lookup(name + "_size").value();
				this.doScaling(size, videoScale);
			}
		}
	}

	AudioVisual.prototype.doScaling = function (size, scale) {
		if (size instanceof Point) {
			var element = this.elements[0];
			var scaleFactor = this.cachedZoom * scale;
			element.width = size.x * scaleFactor;
			element.height = size.y * scaleFactor;
		}
	}

	AudioVisual.prototype.doTranslation = function (position) {
		if (position instanceof Point) {
			var style = this.elements[0].style;
			var origin = this.cachedOrigin;
			var scaleFactor = this.cachedScaleFactor;
			style.left = (origin.x + position.x * scaleFactor) + "px";
			style.top = (origin.y + position.y * scaleFactor) + "px";
		}
	}

	AudioVisual.prototype.toString = function () {
		return this.type + "(" + Eden.edenCodeForValues(this.preload) + ")";
	}
	
	AudioVisual.prototype.getEdenCode = AudioVisual.prototype.toString;

}}$;