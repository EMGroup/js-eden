##Bugs:
##If _paused defined by dependency and true while seeking, starts playing while mouse button still held down.

##For a video drawable named "vid", the following observables are available.  All are read/write.
##
##vid_url
##	The URL of the current video loaded into the video player.
##
##vid_position
##	A Point object representing the position of the video player on the canvas.
##
##vid_size
##	A Point object representing the width and height of the video as it is displayed on the canvas.
##
##vid_controls
##	Whether or not the built-in playback controls are available to the user or not.
##
##vid_paused
##	True if the video is not currently playing and false if it is playing or if it should be played
##	as soon as it has finished loading.  Note that if vid_paused is determined by dependency and the
##	user overrides this decision by pausing or resuming playback using the playback controls then
##	the value of vid_paused will not reflect the true status of the video playback.  Also, if
##	vid_paused is determined by dependency and equals true when the end of the video is reached then
##	the video will play again from the beginning.
##
##vid_time
##	The current temporal position of the video, accurate to 1/10 of a second.  Cannot be set by
##	dependency.
##
##vid_volume
##	The current volume level of the video's soundtrack, between 0 and 1.  If vid_volume is specified
##	by dependency and playback controls are enabled and the user uses them to adjust the volume
##	then then the dependency will be overwritten by an assignment.
##
##Useful properties of the drawable object itself:
##
##.duration
##	The duration of the currently loaded video file (read-only).
##
##.ended
##	True if the current temporal position is currently located at the end of the video (read-only).

##Example:
/*
	vid_url = "...";
	vid = Video("vid");
	picture is [vid];

	##Stop to complete an exercise 60 seconds into the video.
	exercisePoints = [60];
	exercisesCompleted = array(1, false);
	exerciseNumber is indexOf(exercisePoints, int(vid_time));
	vid_controls is exerciseNumber == 0 || exercisesCompleted[exerciseNumber];
	vid_paused is !vid_controls;
*/

func Video {
	${{
		var name = arguments[0];
		var preload = arguments[1];
		return new Video(name, preload);
	}}$;
}

${{
	function Video(name, preload) {
		this.name = name;
		this.preload = preload;
		
		Object.defineProperty(this, "duration", {
			enumerable: true,
			get: function () {
				if (this.element === undefined) {
					return 0;
				} else {
					return Math.floor(this.element.duration * 10) / 10;
				}
			}
		});

		Object.defineProperty(this, "ended", {
			enumerable: true,
			get: function () {
				if (this.element === undefined) {
					return false;
				} else {
					return this.element.ended;
				}
			}
		});

	}
	
	Video.prototype.hash = function () {
		return this.name;
	}
}}$;

${{
	Video.prototype.draw = function (context) {		
		if (this.element === undefined ) {
			var me = this;
			var name = this.name;
			var agent = root.lookup("Video");

			var videoElement = document.createElement("video");
			var controlsSym = root.lookup(name + "_controls");
			var controls = controlsSym.value();
			if (controls === undefined) {
				controls = true;
				controlsSym.assign(true, this);
			}
			videoElement.controls = controls;
			controlsSym.addJSObserver("showHideControls", function (symbol, showControls) {
				videoElement.controls = showControls;
			});
			
			var preloadWhat;
			if (this.preload) {
				preloadWhat = "auto";
			} else {
				preloadWhat = "none";
			}
			
			videoElement.style.position = "absolute";
			var positionSym = root.lookup(name + "_position");
			var position = positionSym.value();
			if (position === undefined) {
				position = new Point(0, 0);
				positionSym.assign(position, agent);
			}
			var repositionAction = function (symbol, position) {
				if (position instanceof Point) {
					videoElement.style.left = position.x + "px";
					videoElement.style.top = position.y + "px";
				}
			}
			repositionAction(positionSym, position);
			positionSym.addJSObserver("reposition", repositionAction);

			var sizeSym = root.lookup(name + "_size");
			var size = sizeSym.value();
			var resizeAction = function (symbol, size) {
				if (size instanceof Point) {
					videoElement.width = size.x;
					videoElement.height = size.y;
				}
			}
			if (size instanceof Point) {
				resizeAction(sizeSym, size);
			} else if (!this.preload) {
				preloadWhat = "metadata";
			}
			videoElement.preload = preloadWhat;
			sizeSym.addJSObserver("resize", resizeAction);
			videoElement.addEventListener("loadedmetadata", function (event) {
				var sizeSym = root.lookup(name + "_size");
				if (sizeSym.value() === undefined) {
					sizeSym.assign(new Point(videoElement.videoWidth, videoElement.videoHeight), agent);
				}
			});
			
			var pausedSym = root.lookup(name + "_paused");
			var beginPaused = pausedSym.value();
			if (beginPaused === undefined && (pausedSym.eden_definition === undefined || pausedSym.definition === undefined)) {
				pausedSym.assign(true, agent);
			} else if (beginPaused == false) {
				videoElement.autoplay = true;
			}
			pausedSym.addJSObserver("pausePlay", function (symbol, pause) {
				if (pause) {
					videoElement.pause();
				} else {
					videoElement.play();
				}
			});
			videoElement.addEventListener("pause", function (event) {
				var pausedSym = root.lookup(name + "_paused");
				if (pausedSym.eden_definition === undefined || pausedSym.definition === undefined) {
					pausedSym.assign(true, agent);
				}
			});
			videoElement.addEventListener("playing", function (event) {
				var pausedSym = root.lookup(name + "_paused");
				if (pausedSym.eden_definition === undefined || pausedSym.definition === undefined) {
					pausedSym.assign(false, agent);
				}
			});
			
			var timeSym = root.lookup(name + "_time");
			var time = timeSym.value();
			if (time !== undefined) {
				videoElement.currentTime = parseFloat(time);
			}
			timeSym.addJSObserver("seek", function (symbol, seconds) {
				var currentTime = videoElement.currentTime;
				var relativePosition = seconds - currentTime;
				if (relativePosition < -1 || relativePosition > 1 ) {
					videoElement.currentTime = seconds;
				}
			});
			videoElement.addEventListener("timeupdate", function (event) {
				var newTimeIndex = Math.floor(videoElement.currentTime * 10);
				if (newTimeIndex != me.timeIndex) {
					root.lookup(name + "_time").assign(newTimeIndex / 10, agent);
					me.timeIndex = newTimeIndex;
				}
			});
			videoElement.addEventListener("seeked", function (event) {
			if (!root.lookup(name + "_paused").value()) {
					videoElement.play();
				}
			});
			
			var volumeSym = root.lookup(name + "_volume");
			var volume = volumeSym.value();
			if (volume === undefined) {
				volumeSym.assign(1, agent);
			} else {
				videoElement.volume = volume;			
			}
			volumeSym.addJSObserver("adjustVolume", function (symbol, volume) {
				videoElement.volume = volume;
			});
			videoElement.addEventListener("volumechange", function (event) {
				root.lookup(name + "_volume").assign(videoElement.volume, agent);
			});
			
			
			var urlSym = root.lookup(name + "_url");
			var url = urlSym.value();
			if (url !== undefined) {
				videoElement.src = url;
			}
			urlSym.addJSObserver("newVideo", function (symbol, url) {
				var autoplay = !root.lookup(name + "_paused").value();
				root.lookup(name + "_time").assign(undefined, agent);
				me.timeIndex = undefined;
				videoElement.autoplay = autoplay;
				if (!autoplay) {
					if (me.preload) {
						videoElement.preload = "auto";
					} else if (root.lookup(name + "_size").value() instanceof Point) {
						videoElement.preload = "none";
					} else {
						videoElement.preload = "metadata";
					}
				}
				videoElement.src = url;
				videoElement.load();
			});

			videoElement.togarbage = false;
			this.element = videoElement;
		} else {
			this.element.togarbage = false;
		}
	}
	
	Video.prototype.toString = function () {
		return "";
	}

}}$;