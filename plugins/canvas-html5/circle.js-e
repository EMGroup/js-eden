## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Circle = function(x, y, radius, fillcolour, outlinecolour, drawingOptions) {
  this.x = x;
  this.y = y;
  this.radius = radius;
  this.fillcolour = fillcolour;
  this.outlinecolour = outlinecolour;
  this.drawingOptions = drawingOptions;
}
}}$;

func Circle { ${{
	var x = arguments[0];
	var y = arguments[1];
	var radius = arguments[2];
	var fillcolour, outlinecolour, drawingOptions;
	var lastArg = arguments[arguments.length - 1];
	var processUpTo;
	if (lastArg !== undefined && (lastArg instanceof Object) && !(lastArg instanceof EdenUI.plugins.Canvas2D.FillStyle)) {
		drawingOptions = lastArg;
		processUpTo = arguments.length - 2;
	} else {
		processUpTo = arguments.length - 1;
	}
	if (processUpTo >= 3) {
		fillcolour = arguments[3];
		if (processUpTo == 4) {
			outlinecolour = arguments[4];
		}
	}
	if (drawingOptions !== undefined && eden.isValidIdentifier(drawingOptions.name)) {
		var clickSym = root.lookup(drawingOptions.name + "_click");
		if (clickSym.value() === undefined) {
			clickSym.assign(false, root.scope, root.lookup("Circle"));
		}
	}
	return new Circle(x, y, radius, fillcolour, outlinecolour, drawingOptions);
}}$; };

${{

Circle.prototype.draw = function(context) {
	this.tracePath(context);
	if (this.fillcolour !== undefined) {
		edenUI.plugins.Canvas2D.setFillStyle(context, this.fillcolour);
		context.fill();
	}
	if (this.outlinecolour !== undefined) {
		context.strokeStyle = this.outlinecolour;
		context.stroke();
	}
};

Circle.prototype.tracePath = function (context) {
	var lineWidth;
	if (this.outlinecolour !== undefined) {
		lineWidth = context.lineWidth;
	} else {
		lineWidth = 0;
	}
	context.beginPath();
	context.arc(this.x, this.y, this.radius - lineWidth / 2, 0, 2 * Math.PI, false);
	context.closePath();
}

Circle.prototype.isHit = function (context, scale, x, y) {
	this.tracePath(context);
	return context.isPointInPath(x,y);
}

Circle.prototype.toString = function() {
	var s = "Circle(" + this.x + ", " + this.y + ", " + this.radius + ", " +
		Eden.edenCodeForValue(this.fillcolour) + ", " + Eden.edenCodeForValue(this.outlinecolour);
	
	if (this.drawingOptions !== undefined) {
		s = s + ", " + Eden.edenCodeForValue(this.drawingOptions);
	}
	
	s = s + ")";
	return s;
};

Circle.prototype.getEdenCode = Circle.prototype.toString;

Circle.prototype.imageMapArea = function () {
	return "shape=\"circle\" coords=\"" + this.x + "," + this.y + "," + this.radius + "\"";
}

Circle.prototype.centre = function () {
	return new Point(this.x, this.y);
}

}}$;
