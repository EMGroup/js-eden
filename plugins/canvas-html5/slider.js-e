## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Slider = function(name, min, max, step, value, orientation, x, y) {
  this.name = name;
  this.min = min;
  this.max = max;
  this.step = step;
  this.value = value;
  this.orientation = orientation;
  this.x = x;
  this.y = y;
}

Slider.prototype.hash = function () {
	return this.name+"$$"+
				this.min+"$$"+
				this.max+"$$"+
				this.step+"$$"+
				this.value+"$$"+
				this.orientation+"$$"+
				this.x+"$$"+
				this.y;
};
}}$;

func Slider { ${{
  var name = arguments[0];
  var min = arguments[1];
  var max = arguments[2];
  var step = arguments[3];
  var value = arguments[4];
  var orientation = arguments[5];
  var x = arguments[6];
  var y = arguments[7];
  return new Slider(name, min, max, step, value, orientation, x, y);
}}$; }

${{
Slider.prototype.draw = function(context,content) {

	var me = "canvas_" + this.name;
	var me2 = this.name;
	var that = this;
	var sli = this.element;
	
	root.lookup(me2 + "_drawing").assign(true);

	if (sli === undefined) {
		if(this.orientation=="vertical"){
			var ori = "-webkit-appearance: slider-vertical;"
			var orif = " orient=\"vertical\"";
		}else{
			var ori = "";
			var orif = "";
		}

		var div = $('<div id="'+me+'-slider" style="position:absolute; top:'+this.y+'px; left:'+this.x+'px;">'+this.name+'</div>');

		var addinputtodiv = (($('<input id="'+me+'-slider-input" style="'+ori+'" value="'+this.value+'" type="range" name="'+this.name+'" min="'+this.min+'" max="'+this.max+'" step="'+this.step+'"' + orif + '/>')).on("change", function(){
eden.execute(me2 + "_value = " + parseInt(this.value) + ";");

}).on("input", function(){
eden.execute(me2 + "_preview = " + parseInt(this.value) + ";");
})).appendTo(div);

		this.element = div.get(0);
		div.get(0).togarbage = false;
		root.lookup(me2 + "_drawable").assign(this);

		setTimeout(function () {
			//Assign obs value
			eden.execute(me2 + "_value = " + that.value + ";");
			eden.execute(me2 + "_x = " + that.x + ";");
			eden.execute(me2 + "_y = " + that.y + ";");
			eden.execute(me2 + "_min = " + that.min + ";");
			eden.execute(me2 + "_max = " + that.max + ";");
			eden.execute(me2 + "_step = " + that.step + ";");
		}, 0);
		eden.execute("proc " + me2 + "_update : " + me2 + "_value { if (" + me2 + "_drawing){return;} " + me2 + "_drawable.draw();}");

	} else {
		//Draw with the values stored in the observables
		this.getElementsByTagName("input")[0].value = root.lookup(me2 + "_value").cached_value;
		this.element.togarbage = false;
	}
	root.lookup(me2 + "_drawing").assign(false);
};
}}$;

${{
Slider.prototype.toString = function() {
  return "Slider("+this.name+", "+this.min+", "+this.max+", "+this.step+", "+this.default+", "+this.orientation+", "+this.x+", "+this.y+")";
};
}}$;
