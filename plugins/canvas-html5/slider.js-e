## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Slider = function(name, min, max, step, x, y, length, orientation, enabled) {
  this.name = name;
  this.min = min;
  this.max = max;
  this.step = step;
  this.x = x;
  this.y = y;
  this.length = length;
  this.orientation = orientation;
  this.enabled = enabled;
}

Slider.prototype.hash = function () {
	return this.name+"$$"+
				this.min+"$$"+
				this.max+"$$"+
				this.step+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.length+"$$"+
				this.orientation+"$$"+
				this.enabled;
};
}}$;

func Slider { ${{
  var name = arguments[0];
  var min = arguments[1];
  var max = arguments[2];
  var step = arguments[3];
  var x = arguments[4];
  var y = arguments[5];
  var length = arguments[6];
  var orientation = arguments[7];
  if (orientation === undefined) orientation = "horizontal";
  var enabled = arguments[8];
  if (enabled === undefined) enabled = true;
  return new Slider(name, min, max, step, x, y, length, orientation, enabled);
}}$; }

${{

Slider.prototype.draw = function (context) {

	if (this.elements === undefined) {
		var name = this.name;
		var me = this;
		var agent = root.lookup("Slider");

		var orientationCSS;
		if (this.orientation == "down"){
			orientationCSS = "transform: rotate(90deg);"
		} else if (this.orientation == "up" || this.orientation == "vertical") {
			orientationCSS = "transform: rotate(-90deg);"
		} else {
			orientationCSS = "";
		}
		var disabled = this.enabled === false? "disabled=\"disabled\"" : "";
		var inputHTML = '<input ' + disabled +
			'style="position:absolute; ' + orientationCSS + '" ' +
			'value="' + value + '" ' +
			'type="range" ' +
			'min="' + this.min + '" ' +
			'max="' + this.max + '" ';
		if (this.step !== undefined) {
			inputHTML = inputHTML + 'step="' + this.step + '"';
		}
		inputHTML = inputHTML + '/>';
		var jqElement = $(inputHTML);
		var inputElem = jqElement.get(0);

		var valueSym = root.lookup(name + "_value");
		var value = valueSym.value();
		var previewSym = root.lookup(name + "_preview");
		var previewValue = previewSym.value();
		if (value === undefined) {
			if (previewValue !== undefined) {
				value = previewValue;
			} else {
				value = this.min;
				previewSym.assign(value, root.scope, agent);
			}
			valueSym.assign(value, root.scope, agent);
		} else {
			if (value !== previewValue) {
				previewSym.assign(value, root.scope, agent);
			}
		}
		inputElem.value = value;
		valueSym.addJSObserver("updateUI", function (obs, value) {
			var previewSym = root.lookup(name + "_preview");
			if (previewSym.value() !== value) {
				me.elements[0].value = String(value);
				previewSym.assign(value, root.scope, Symbol.hciAgent);
			}
		});		
		previewSym.addJSObserver("updateUI", function (obs, preview) {
			var previewSym = root.lookup(name + "_preview");
			var valueSym = root.lookup(name + "_value");
			if (previewSym.last_modified_by !== Symbol.hciAgent.name) {
				me.elements[0].value = preview;
				valueSym.assign(preview, root.scope, agent, true);
			}
		});

		jqElement
		.on("change", function(){
			root.lookup(name + "_value").assign(parseFloat(this.value), root.scope, Symbol.hciAgent, true);
		})
		.on("input", function(){
			root.lookup(name + "_preview").assign(parseFloat(this.value), root.scope, Symbol.hciAgent, true);
		})
		.on("mousedown", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseDownZone").assign(undefined, root.scope, Symbol.hciAgent, mouseFollow);
		})
		.on("mouseup", function () {
			edenUI.plugins.Canvas2D.endClick();
		})
		.on("mouseenter", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseZone").assign(name, root.scope, Symbol.hciAgent, mouseFollow);
		});

		this.elements = [inputElem];		
	}
};

Slider.prototype.scale = function (scale, zoom, origin) {
	var element = this.elements[0];
	var style = element.style;
	if (this.orientation == "up" || this.orientation == "down" || this.orientation == "vertical") {
		style.left = Math.round((this.x - this.length / 2) * scale + origin.x) + "px";
		style.top = Math.round((this.y + this.length / 2) * scale + origin.y) + "px";
	} else {
		style.left = Math.round(this.x * scale + origin.x) + "px";
		style.top = Math.round(this.y * scale + origin.y) + "px";
	}
	var width = Math.round(this.length * scale);
	style.width = width + "px";
	if (this.step === undefined) {
		element.step = (element.max - element.min) / width;
	}
};

Slider.prototype.toString = function() {
  return "Slider(\"" + this.name + "\", " + this.min + ", " + this.max + ", " + Eden.edenCodeForValue(this.step) + ", " +
	this.x + ", " + this.y + ", " + this.length + ", \"" + this.orientation + "\", " +
	this.enabled + ")";
};

Slider.prototype.getEdenCode = Slider.prototype.toString;

}}$;
