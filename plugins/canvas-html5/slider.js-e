## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Slider = function(name, min, max, step, x, y, length, orientation, enabled) {
  this.name = name;
  this.min = min;
  this.max = max;
  this.step = step;
  this.x = x;
  this.y = y;
  this.length = length;
  this.orientation = orientation;
  this.enabled = enabled;
}

Slider.prototype.hash = function () {
	return this.name+"$$"+
				this.min+"$$"+
				this.max+"$$"+
				this.step+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.length+"$$"+
				this.orientation+"$$"+
				this.enabled;
};
}}$;

func Slider { ${{
  var name = arguments[0];
  var min = arguments[1];
  var max = arguments[2];
  var step = arguments[3];
  var x = arguments[4];
  var y = arguments[5];
  var length = arguments[6];
  var orientation = arguments[7];
  if (orientation === undefined) orientation = "horizontal";
  var enabled = arguments[8];
  if (enabled === undefined) enabled = true;
  return new Slider(name, min, max, step, x, y, length, orientation, enabled);
}}$; }

${{
Slider.prototype.draw = function(context,content) {

	var name = this.name;
	var id = "canvas_" + name;
	var that = this;
	var agent = root.lookup("Slider");
	
	var valueSym = root.lookup(name + "_value");
	var value = valueSym.value();
	var previewSym = root.lookup(name + "_preview");

	if (this.element === undefined) {
		var orientationCSS;
		var topCSS;
		if (this.orientation == "down"){
			orientationCSS = "transform: rotate(90deg);"
			topCSS = "top: " + (this.y + this.length / 2).toString() + "px;";
		} else if (this.orientation == "up" || this.orientation == "vertical") {
			orientationCSS = "transform: rotate(-90deg);"
			topCSS = "top: " + (this.y + this.length / 2).toString() + "px;";
		} else {
			orientationCSS = "";
			topCSS = "top: " + this.y + "px;";		
		}


		if (value === undefined) {
			var previewValue = previewSym.value();
			if (previewValue !== undefined) {
				value = previewValue;
			} else {
				value = this.min;
				previewSym.assign(value, agent);
			}
			valueSym.assign(value, agent);
		} else {
			previewSym.assign(value, agent);
		}

		var disabled = this.enabled === false? "disabled=\"disabled\"" : "";
		var inputhtml = (($('<input ' + disabled +
			'id="' + me + '" ' +
			'style="position:absolute; ' + topCSS + ' left:' + this.x + 'px; width:' + this.length + 'px; ' + orientationCSS + '" ' +
			'value="' + value + '" ' +
			'type="range" ' +
			'name="' + name + '" ' +
			'min="' + this.min + '" ' +
			'max="' + this.max + '" ' +
			'step="' + this.step + '" />')).on("change", function(){
				root.lookup(name + "_value").netAssign(parseFloat(this.value), agent);
			}).on("input", function(){
				root.lookup(name + "_preview").netAssign(parseFloat(this.value), agent);
			}));

		this.element = inputhtml.get(0);
		inputhtml.get(0).togarbage = false;

		valueSym.addJSObserver("updateUI", function (obs, value) {
			var previewSym = root.lookup(name + "_preview");
			if (previewSym.value() != value) {
				that.element.value = String(value);
				previewSym.assign(value, agent);
			}
		});
		
		previewSym.addJSObserver("updateUI", function (obs, preview) {
			var previewSym = root.lookup(name + "_preview");
			var valueSym = root.lookup(name + "_value");
			if (previewSym.last_modified_by == "input") {
				that.element.value = String(preview);
				valueSym.netAssign(preview, agent);
			}
		});
		
	} else {
		//Draw with the values stored in the observables
		if (value === undefined) {
			valueSym.assign(parseFloat(this.element.value), agent);
			previewSym.assign(parseFloat(this.element.value), agent);
		} else {
			this.element.value = String(value);
		}
		this.element.togarbage = false;
	}
};
}}$;

${{
Slider.prototype.toString = function() {
  return "Slider(\"" + this.name + "\", " + this.min + ", " + this.max + ", " + this.step + ", " +
	this.x + ", " + this.y + ", " + this.length + ", \"" + this.orientation + "\", " +
	this.enabled + ")";
};

Slider.prototype.getEdenCode = Slider.prototype.toString;

}}$;
