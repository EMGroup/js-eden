## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Slider = function(name, min, max, step, x, y, length, orientation, enabled) {
  this.name = name;
  this.min = min;
  this.max = max;
  this.step = step;
  this.x = x;
  this.y = y;
  this.length = length;
  this.orientation = orientation;
  this.enabled = enabled;
}

Slider.prototype.hash = function () {
	return this.name+"$$"+
				this.min+"$$"+
				this.max+"$$"+
				this.step+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.length+"$$"+
				this.orientation+"$$"+
				this.enabled;
};
}}$;

func Slider { ${{
	var name = root.currentObservableName();
	if (name === undefined) {
		eden.error(new Error("Slider: Every slider must be defined by making a dependency."), "error");
		return undefined;
	}
	var min = arguments[0];
	var max = arguments[1];
	var step = arguments[2];
	var x = arguments[3];
	var y = arguments[4];
	var length = arguments[5];
	var orientation = arguments[6];
	if (orientation === undefined) orientation = "horizontal";
	var enabled = arguments[7];
	if (enabled === undefined) enabled = true;
	return new Slider(name, min, max, step, x, y, length, orientation, enabled);
}}$; }

${{

Slider.prototype.draw = function (context) {

	if (this.elements === undefined) {
		var name = this.name;
		var me = this;
		var agent = root.lookup("Slider");

		var orientationCSS;
		if (this.orientation == "down"){
			orientationCSS = "transform: rotate(90deg);"
		} else if (this.orientation == "up" || this.orientation == "vertical") {
			orientationCSS = "transform: rotate(-90deg);"
		} else {
			orientationCSS = "";
		}
		var disabled = this.enabled === false? "disabled=\"disabled\"" : "";
		var inputHTML = '<input ' + disabled +
			'style="position:absolute; ' + orientationCSS + '" ' +
			'type="range" ' +
			'min="' + this.min + '" ' +
			'max="' + this.max + '" ';
		if (this.step === undefined) {
			inputHTML = inputHTML + 'step="0.0000001"';		
		} else {
			inputHTML = inputHTML + 'step="' + this.step + '"';
		}
		inputHTML = inputHTML + '/>';
		var jqElement = $(inputHTML);

		var valueSym = root.lookup(name + "_value");
		var previewSym = root.lookup(name + "_preview");

		function setValue(obs, value, force) {
			var previewSym = root.lookup(name + "_preview");
			var element = me.elements[0];
			var previewValue = previewSym.value();
			if (previewValue !== value || force) {
				var roundedValue;
				if (value >= me.min && value <= me.max) {
					element.value = value;
					roundedValue = parseFloat(element.value);
					if (roundedValue != value) {
						//Value didn't match the step size.
						obs.assign(roundedValue, agent);
					}
				} else {
					if (value < me.min) {
						element.value = me.min;
					} else {
						element.value = me.max;
					}
					if (me.step !== undefined) {
						roundedValue = Math.round(((value - me.min) / me.step).toPrecision(16)) * me.step + me.min;
						if (roundedValue != value) {
							obs.assign(roundedValue, agent);
						}
					} else {
						roundedValue = value;
					}
				}
				if (previewValue != roundedValue) {
					previewSym.assign(roundedValue, Symbol.hciAgent);
				}
			}
		}

		valueSym.addJSObserver("updateUI", setValue);
		previewSym.addJSObserver("updateUI", function (obs, preview) {
			var previewSym = root.lookup(name + "_preview");
			var valueSym = root.lookup(name + "_value");
			var element = me.elements[0];
			if (previewSym.last_modified_by !== Symbol.hciAgent.name) {
				var roundedValue;
				if (preview >= me.min && preview <= me.max) {
					element.value = preview;
					roundedValue = parseFloat(element.value);
					if (roundedValue != preview) {
						//Value didn't match the step size.
						obs.assign(roundedValue, agent);
					}
				} else {
					if (preview < me.min) {
						element.value = me.min;
					} else {
						element.value = me.max;
					}
					if (me.step !== undefined) {
						roundedValue = Math.round(((preview - me.min) / me.step).toPrecision(16)) * me.step + me.min;
						if (roundedValue != value) {
							obs.assign(roundedValue, agent);
						}
					} else {
						roundedValue = preview;
					}
				}
				valueSym.assign(roundedValue, agent);
			}
		});

		jqElement
		.on("input", function(){
			root.lookup(name + "_preview").assign(parseFloat(this.value), Symbol.hciAgent, true);
		})
		.on("mousedown", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseDownZone").assign(undefined, Symbol.hciAgent, mouseFollow);
		})
		.on("mouseup", function () {
			root.lookup(name + "_value").assign(parseFloat(this.value), Symbol.hciAgent, true);
			edenUI.plugins.Canvas2D.endClick();
		})
		.on("keyup", function () {
			root.lookup(name + "_value").assign(parseFloat(this.value), Symbol.hciAgent, true);		
		})
		.on("mouseenter", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseZone").assign(name, Symbol.hciAgent, mouseFollow);
		});

		this.elements = [jqElement.get(0)];

		//Initialization
		var value = valueSym.value();
		var previewValue = previewSym.value();
		if (value === undefined) {
			if (previewValue === undefined) {
				var defaultValue = (this.max - this.min) / 2 + this.min;
				valueSym.assign(defaultValue, agent);
				setValue(valueSym, defaultValue, true);
			} else {
				valueSym.assign(previewValue, agent);
				setValue(valueSym, previewValue, true);
			}
		} else {
			setValue(valueSym, value, true);
		}
	}
};

Slider.prototype.scale = function (scale, zoom, origin) {
	var element = this.elements[0];
	var style = element.style;
	if (this.orientation == "up" || this.orientation == "down" || this.orientation == "vertical") {
		style.left = Math.round((this.x - this.length / 2) * scale + origin.x) + "px";
		style.top = Math.round((this.y + this.length / 2) * scale + origin.y) + "px";
	} else {
		style.left = Math.round(this.x * scale + origin.x) + "px";
		style.top = Math.round(this.y * scale + origin.y) + "px";
	}
	var width = Math.round(this.length * scale);
	style.width = width + "px";
	if (this.step == undefined) {
		element.step = String((element.max - element.min) / (width  - 1)).slice(0, 16);
	}
};

Slider.prototype.toString = function() {
  return "Slider(" + Eden.edenCodeForValues(this.min, this.max, this.step, this.x, this.y,
	this.length, this.orientation, this.enabled) + ")";
};

Slider.prototype.getEdenCode = Slider.prototype.toString;

}}$;
