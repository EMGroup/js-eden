## Copyright (c) 2015, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Checkbox = function (name, x, y, tristate, enabled) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.tristate = tristate;
    this.enabled = enabled;
}

Checkbox.prototype.hash = function () {
	return this.name+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.tristate+"$$"+
				this.enabled;
};
}}$;

func Checkbox { ${{
  var name = root.currentObservableName();
  if (name === undefined) {
	eden.error(new Error("Checkbox: Every checkbox must be defined by making a dependency."), "error");
	return undefined;
  }
  var x = arguments[0];
  var y = arguments[1];
  var tristate = arguments[2];
  if (tristate === undefined) tristate = false;
  var enabled = arguments[3];
  if (enabled === undefined) enabled = true;
  return new Checkbox(name, x, y, tristate, enabled);
}}$; }

${{

Checkbox.prototype.draw = function(context) {

	if (this.elements === undefined) {
		var me = this;
		var name = this.name;

		var jqElement = $("<input type=\"checkbox\" style=\"position: absolute\" />");
		var element = jqElement.get(0);
		element.disabled = (this.enabled === false);
		
		var valueSym = root.lookup(name + "_checked");
		var value = valueSym.value();
		if (value === undefined) {
			if (this.tristate) {
				element.indeterminate = true;
			} else {
				valueSym.assign(false, root.lookup("Checkbox"));
			}
		} else {
			element.checked = value;
		}
		valueSym.addJSObserver("updateCheckbox", function (obs, value) {
			var element = me.elements[0];
			if (value === undefined) {
				element.indeterminate = true;
				element.checked = false;
			} else {
				element.indeterminate = false;
				element.checked = (value == true);
			}
		});

		jqElement.change(function (event) {
			var element = event.target;
			var value;
			if (element.indeterminate) {
				element.indeterminate = false;
				element.checked = true;
				value = true;
			} else if (me.tristate && valueSym.value() === false) {
				element.indeterminate = true;
				element.checked = false;
				value = undefined;
			} else {
				value = element.checked;
			}
			valueSym.assign(value, Symbol.hciAgent, true);
		})
		.on("mousedown", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseDownZone").assign(undefined, Symbol.hciAgent, mouseFollow);
		})
		.on("mouseup", function () {
			edenUI.plugins.Canvas2D.endClick();
		})
		.on("mouseenter", function () {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseZone").assign(name, Symbol.hciAgent, mouseFollow);
		});
		
		this.elements = [element];
	}
};

Checkbox.prototype.scale = function (scale, zoom, origin) {
	var style = this.elements[0].style;
	style.left = Math.round(this.x * scale + origin.x) + "px";
	style.top = Math.round(this.y * scale + origin.y) + "px";
	var checkboxSize = Math.round(13 * zoom) + "px";
	style.width = checkboxSize;
	style.height = checkboxSize;
};

Checkbox.prototype.toString = function() {
  return "Checkbox(" + Eden.edenCodeForValues(this.x, this.y, this.tristate, this.enabled) + ")";
};

Checkbox.prototype.getEdenCode = Checkbox.prototype.toString;

}}$;
