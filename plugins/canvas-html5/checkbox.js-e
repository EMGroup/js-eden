## Copyright (c) 2015, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Checkbox = function (name, x, y, tristate, enabled) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.tristate = tristate;
    this.enabled = enabled;
}

Checkbox.prototype.hash = function () {
	return this.name+"$$"+
				this.x+"$$"+
				this.y+"$$"+
				this.tristate+"$$"+
				this.enabled;
};
}}$;

func Checkbox { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var tristate = arguments[3];
  if (tristate === undefined) tristate = false;
  var enabled = arguments[4];
  if (enabled === undefined) enabled = true;
  return new Checkbox(name, x, y, tristate, enabled);
}}$; }

${{
Checkbox.prototype.draw = function(context, content) {
	if(this.element === undefined){
		var me = this;
		var name = this.name;
		var id = "canvas_" + this.name;
		var valueSym = root.lookup( name + "_value");
		var value = valueSym.value();

		var jqElement = $("<input type=\"checkbox\" style=\"position: absolute\" />");
		var element = jqElement.get(0);
		
		element.id = id;
		element.disabled = (this.enabled === false);
		element.style.left = this.x + "px";
		element.style.top = this.y + "px";
		
		if (value === undefined) {
			if (this.tristate) {
				element.indeterminate = true;
			} else {
				valueSym.assign(false, this);
			}
		} else {
			element.checked = value;
		}

		jqElement.change(function() {
			var element = me.element;
			var value;
			if (element.indeterminate) {
				element.indeterminate = false;
				element.checked = true;
				value = true;
			} else if (me.tristate && valueSym.value() === false) {
				element.indeterminate = true;
				element.checked = false;
				value = undefined;
			} else {
				value = element.checked;
			}
			valueSym.netAssign(value);
		});
		
		valueSym.addJSObserver(function (name, value) {
			var element = me.element;
			if (value === undefined) {
				element.indeterminate = true;
				element.checked = false;
			} else {
				element.indeterminate = false;
				element.checked = (value == true);
			}
		});

		this.element = element;
		element.togarbage = false;

  } else {
	this.element.togarbage = false;
  }
};
}}$;

${{
Checkbox.prototype.toString = function() {
  return "Checkbox(\"" + this.name + "\", " + this.x + ", " + this.y + ", " + this.tristate + ", " +
	this.enabled + ")";
};
}}$;
