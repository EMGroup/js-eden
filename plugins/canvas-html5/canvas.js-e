## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

##Creates a canvas and a triggered procedure so that canvas display is kept in
##sync with the value of a given observable at all times.  The first parameter
##is the name of the observable who's value provides the list of drawables.  The
##second, optional parameter, is the name of the canvas view (which is reflected
##in the window's title bar).
proc createCanvas {
	auto viewName, obsName;
	if ($# == 1) {
		obsName = $[1];
		viewName = $[1];
	} else if ($# == 2) {
		obsName = $[1];
		viewName = $[2];
		if (!isString(viewName)) {
			error("createCanvas: The second argument must be a string, not a " // type(viewName));
			return;
		}
	} else {
		error("createCanvas: This procedure requires at least 1 argument and at most 2 arguments.");
		return;
	}
	
	if (!isString(obsName)) {
		error("createCanvas: The first argument must be a string, not a " // type(obsName));
		return;
	}

	execute("if (" // obsName // " == @) { " // obsName // " = []; }");
	createView(viewName, "CanvasHTML5");
	execute("proc _update_" // viewName // " : " // obsName // " { $" // "{{ edenUI.plugins.CanvasHTML5.drawPicture(" // edenCode(viewName) // ", " // edenCode(obsName) // "); }}$; }");
}

##Returns a string that can be used as the src attribute for an <img> tag inside the content of a
##HTML view.  The image with the special URL returned by this function is a snapshot of the contents
##of the canvas at the time this function was called.
func canvasURL {
	${{
		var canvasName;
		if (arguments.length == 0) {
			canvasName = "picture";
		} else {
			canvasName = arguments[0];
			if (canvasName === undefined) {
				return "";
			} else if (typeof(canvasName) == "string") {
				if (!(canvasName in canvases)) {
					return "";
				}
			} else {
				eden.error(new Error("canvasURL: The first argument must be a string, not a " + typeof(canvasName)), "error");
				return "";
			}
		}
		
		return canvases[canvasName].toDataURL();
	}}$;
}

include("plugins/canvas-html5/arc.js-e");
include("plugins/canvas-html5/button.js-e");
include("plugins/canvas-html5/circle.js-e");
include("plugins/canvas-html5/combobox.js-e");
include("plugins/canvas-html5/div.js-e");
include("plugins/canvas-html5/ellipse.js-e");
include("plugins/canvas-html5/greyPixelList.js-e");
include("plugins/canvas-html5/canvasImage.js-e");
include("plugins/canvas-html5/htmlImage.js-e");
include("plugins/canvas-html5/line.js-e");
include("plugins/canvas-html5/linearGradient.js-e");
include("plugins/canvas-html5/lineSequence.js-e");
include("plugins/canvas-html5/polygon.js-e");
include("plugins/canvas-html5/rectangle.js-e");
include("plugins/canvas-html5/slider.js-e");
include("plugins/canvas-html5/text.js-e");
include("plugins/canvas-html5/point.js-e");
include("plugins/canvas-html5/pixel.js-e");
include("plugins/canvas-html5/pixelList.js-e");
include("plugins/canvas-html5/radialGradient.js-e");
include("plugins/canvas-html5/radioButtons.js-e");
include("plugins/canvas-html5/roundedRectangle.js-e");
include("plugins/canvas-html5/sector.js-e");
include("plugins/canvas-html5/shadow.js-e");
include("plugins/canvas-html5/textbox.js-e");
