## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

##Initialize observables
mouseButton = "";
mouseButtons = "";
mouseCapture = false;
mouseCaptured = false;
mouseContextMenuEnabled = false;
mouseDoubleClicks = 0;
mouseDown = @;
mouseDownWindow = @;
mouseDownZone = @;
mouseFollow = false;
mousePosition = @;
mousePressed = false;
mouseUp = @;
mouseWheel = 0;
mouseWheelEnabled = false;
mouseWheelSpeed = 0;
mouseWindow = @;
mouseX is mousePosition == @? @ : mousePosition.x;
mouseY is mousePosition == @? @ : mousePosition.y;
mouseZone = @;
touchPanX = 0;
touchPanXSpeed = 0;
touchPinch = 0;
touchPinchEnabled = false;


${{
	root.lookup("mouseCapture").addJSObserver("releaseCapture", function (obs, lock) {
		if (!lock) {
			document.exitPointerLock();
		}
	});
}}$;

##Attempts to capture the mouse pointer so the it cannot leave the current canvas window.  This
##allows the mouse to be used as a pure sensor and the mousePosition observable becomes able to take
##on any value, free from the constraints of the size of the window.  Note that this procedure will
##only work if the window has already been in mouse capture mode previously and the user did not
##exit capture mode using the escape key.
##
##The sequence of events:
## (1) The model sets the mouseCapture observable to true, meaning that mouse capture is permitted.
## (2) The user clicks in the canvas window to initiate capture mode.  The mouseCaptured observable
##     automatically gets set to true.
## (3) Capture mode is ended either by (a) the user pressing the escape key, or, (b) the model
##     setting the mouseCapture observable to false.
## (4) Calling attemptMouseCapture after case (3b) has occurred will succeed in the mouse pointer
##     becoming captured again immediately.  However, if case (3a) occurred then calling
##     attemptMouseCapture won't do anything.  If this situation occurs then the model can still set
##     mouseCapture to true and wait for the user to re-grant permission to capture mouse movements
##     by clicking in the window again.
##
## Note that at the time of writing (5/2/2015) although the underlying API has received the W3C's
## Candidate Recommendation approval it is currently only implemented in recent versions of Chrome.
## Access to mouse capturing capabilities can be restricted based upon a browser preference setting.
## (In Chrome this is under Settings->Advanced settings->Content settings->Mouse cursor.)
##
proc attemptMouseCapture {
	${{
		var canvasName = root.lookup("mouseWindow").value();
		if (canvasName !== undefined) {
			canvases[canvasName].requestPointerLock();
		}
	}}$;
}

##Creates a canvas and a triggered procedure so that canvas display is kept in
##sync with the value of a given observable at all times.  The first parameter
##is the name of the observable who's value provides the list of drawables.  The
##second, optional parameter, is the text to place into the window's title bar.
proc createCanvas {
	auto obsName, viewTitle, viewName, initPicture;
	if ($# == 1) {
		obsName = $[1];
	} else if ($# == 2) {
		obsName = $[1];
		viewTitle = $[2];
	} else if ($# == 3) {
		viewName = $[1];
		obsName = $[2];
		viewTitle = $[3];
		if (!isString(viewName)) {
			error("createCanvas: The first argument must be a string, not a " // type(viewName));
			return;
		}
	} else {
		error("createCanvas: This procedure requires at least 1 argument and at most 2 arguments.");
		return;
	}
	
	if (isPointer(obsName)) {
		obsName = nameof(obsName);
	} else if (!isString(obsName)) {
		error("createCanvas: The observable name must be expressed as a string or a pointer, not a " // type(obsName));
		return;
	}
	if (viewName == @) {
		viewName = obsName;
	}
	if (viewTitle == @) {
		viewTitle = uppercase(substr(viewName, 1, 1)) // substr(viewName, 2);
	} else if (!isString(viewTitle)) {
		error("createCanvas: The window title must be a string, not a " // type(viewTitle));
		return;
	}

	if (`obsName` == @) {
		`obsName` = [];
	}

	initPicture = ${{ function (viewName, obsName) {
		edenUI.plugins.Canvas2D.setPictureObs(viewName, obsName);
		edenUI.plugins.Canvas2D.drawPicture(viewName, obsName);
	} }}$;

	createView(viewName, "Canvas2D", obsName);
	initPicture(viewName, obsName);	
	`"_view_" // viewName // "_title"` = viewTitle;
}

##Returns a string that can be used as the src attribute for an <img> tag inside the content of a
##HTML view.  The image with the special URL returned by this function is a snapshot of the contents
##of the canvas at the time this function was called.
func canvasURL {
	${{
		var canvasName;
		if (arguments.length > 1) {
			eden.error(new Error("canvasURL: This function requires at most one argument."), "error");
			return "";
		} else if (arguments.length == 0) {
			canvasName = "picture";
		} else {
			canvasName = arguments[0];
			if (canvasName === undefined) {
				return "";
			} else if (typeof(canvasName) == "string") {
				if (!(canvasName in canvases)) {
					return "";
				}
			} else {
				eden.error(new Error("canvasURL: The first argument must be a string, not a " + typeof(canvasName)), "error");
				return "";
			}
		}
		
		return canvases[canvasName].toDataURL();
	}}$;
}

func zoneOnTopAt {
	${{
		var target = arguments[0];
		var x, y;
		if (arguments.length == 2) {
			if (arguments[1] instanceof Point) {
				x = arguments[1].x;
				y = arguments[1].y;
			} else if (arguments[1] === undefined) {
				return undefined;
			} else {
				eden.error(new Error("zoneOnTopAt: The second argument must a Point, otherwise 3 arguments must be provided."), "error");
				return undefined;
			}
		} else if (arguments.length == 3) {
			x = arguments[1];
			y = arguments[2];
		} else {
			eden.error(new Error("zoneOnTopAt: This function requires at least 2 arguments and at most 3 arguments."), "error");
			return undefined;
		}

		if (target === undefined || x === undefined || y === undefined) {
			return undefined;
		} else if (!(target instanceof Symbol) && typeof(target) != "string") {
			eden.error(new Error("zoneOnTopAt: The first argument must be either a string or a pointer, not a " + typeof(target)), "error");		
			return undefined;
		} else if (typeof(x) != "number") {
			eden.error(new Error("zoneOnTopAt: The x-coordinate must be a number, not a " + typeof(x)), "error");		
			return undefined;
		} else if (typeof(y) != "number") {
			eden.error(new Error("zoneOnTopAt: The y-coordinate must be a number, not a " + typeof(y)), "error");
			return undefined;
		}
		return edenUI.plugins.Canvas2D.findZoneHit2(target, x, y);
	}}$;
}

func zonesAt {
	${{
		var target = arguments[0];
		var x, y;
		if (arguments.length == 2) {
			if (arguments[1] instanceof Point) {
				x = arguments[1].x;
				y = arguments[1].y;
			} else if (arguments[1] === undefined) {
				return undefined;
			} else {
				eden.error(new Error("zonesAt: The second argument must a Point, otherwise 3 arguments must be provided."), "error");
				return undefined;
			}
		} else if (arguments.length == 3) {
			x = arguments[1];
			y = arguments[2];
		} else {
			eden.error(new Error("zonesAt: This function requires at least 2 arguments and at most 3 arguments."), "error");
			return undefined;
		}

		if (target === undefined || x === undefined || y === undefined) {
			return undefined;
		} else if (!(target instanceof Symbol) && typeof(target) != "string") {
			eden.error(new Error("zonesAt: The first argument must be either a string or a pointer, not a " + typeof(target)), "error");		
			return undefined;
		} else if (typeof(x) != "number") {
			eden.error(new Error("zonesAt: The x-coordinate must be a number, not a " + typeof(x)), "error");		
			return undefined;
		} else if (typeof(y) != "number") {
			eden.error(new Error("zonesAt: The y-coordinate must be a number, not a " + typeof(y)), "error");
			return undefined;
		}
		return edenUI.plugins.Canvas2D.findAllZonesHit(target, x, y);
	}}$;
}

include("plugins/canvas-html5/arc.js-e");
include("plugins/canvas-html5/button.js-e");
include("plugins/canvas-html5/checkbox.js-e");
include("plugins/canvas-html5/circle.js-e");
include("plugins/canvas-html5/combobox.js-e");
include("plugins/canvas-html5/div.js-e");
include("plugins/canvas-html5/ellipse.js-e");
include("plugins/canvas-html5/fillPattern.js-e");
include("plugins/canvas-html5/greyPixelList.js-e");
include("plugins/canvas-html5/canvasImage.js-e");
include("plugins/canvas-html5/htmlImage.js-e");
include("plugins/canvas-html5/line.js-e");
include("plugins/canvas-html5/linearGradient.js-e");
include("plugins/canvas-html5/lineSequence.js-e");
include("plugins/canvas-html5/polygon.js-e");
include("plugins/canvas-html5/rectangle.js-e");
include("plugins/canvas-html5/slider.js-e");
include("plugins/canvas-html5/text.js-e");
include("plugins/canvas-html5/pixel.js-e");
include("plugins/canvas-html5/pixelList.js-e");
include("plugins/canvas-html5/radialGradient.js-e");
include("plugins/canvas-html5/radioButtons.js-e");
include("plugins/canvas-html5/regularPolygon.js-e");
include("plugins/canvas-html5/roundedRectangle.js-e");
include("plugins/canvas-html5/sector.js-e");
include("plugins/canvas-html5/shadow.js-e");
include("plugins/canvas-html5/textbox.js-e");
include("plugins/canvas-html5/video.js-e");
