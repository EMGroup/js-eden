## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

func Button {
${{
	var name = arguments[0];
	var label = arguments[1];
	var x = arguments[2];
	var y = arguments[3];
	var enabled = arguments[4];
	var fillcolour = arguments[5];
	var textcolour = arguments[6];
	if (enabled === undefined) enabled = true;
	return new Button(name, label, x, y, enabled, fillcolour, textcolour);
}}$;
}

${{
	var Button = function (name, label, x, y, enabled, fillcolour, textcolour) {
		this.name = name;
		this.label = label;
		this.x = x;
		this.y = y;
		this.enabled = enabled;
		this.fillcolour = fillcolour;
		this.textcolour = textcolour;
	};

	Button.prototype.hash = function () {
		return this.name+"$$"+
					this.label+"$$"+
					this.x+"$$"+
					this.y+"$$"+
					this.enabled+"$$"+
					this.fillcolour+"$$"+
					this.textcolour;
	};

	Button.prototype.draw = function (context) {
		if (this.elements === undefined){
			var name = this.name;
			var agent = root.lookup("Button");

			var disabled = this.enabled === false? "disabled=\"disabled\"" : "";
			var inputHtml = '<input  type="button"' +
				'value="' + this.label + '"' + disabled +
				'style="position: absolute; ';
			if (this.fillcolour !== undefined) {
				inputHtml = inputHtml + 'background-color: ' + this.fillcolour + '; ';
			}
			if (this.textcolour !== undefined) {
				inputHtml = inputHtml + 'color: ' + this.textcolour + '; ';
			}
			inputHtml = inputHtml + '"/>';

			var $input = $(inputHtml).click(function () {
				root.lookup(name + "_clicked").assign(true, agent, true);
				root.lookup(name + "_clicked").assign(false, agent, true);
			});
			var clickSym = root.lookup(name + "_clicked");
			if (clickSym.value() === undefined) {
				clickSym.assign(false, agent);
			}

			var button = $input.get(0);
			this.elements = [button];

		} else {

			//Case when the user has performed direct assignment to one or more JavaScript properties.
			var button = this.elements[0];
			button.value = this.label;

			if (this.enabled) {
				button.disabled = false;
			} else {
				button.disabled = true;
			}

			var style = button.style;
			var fillcolour = this.fillcolour;
			if (style.backgroundColor != fillcolour) {
				if (fillcolour === undefined) {
					style.backgroundColor = "ButtonFace";
				} else {
					style.backgroundColor = fillcolour;
				}
			}
			var textcolour = this.textcolour;
			if (style.color != textcolour) {
				if (textcolour === undefined) {
					style.color = "ButtonText";
				} else {
					style.color = textcolour;
				}
			}
		}
	};

	Button.prototype.scale = function (scale) {
		var style = this.elements[0].style;
		style.left = Math.round(this.x * scale) + "px";
		style.top = Math.round(this.y * scale) + "px";
	};
	
	Button.prototype.toString = function () {
		return "Button(\"" + this.name + "\", \"" + this.label + "\", " + this.x + ", "+this.y+", "+this.enabled+")";
	};

	Button.prototype.getEdenCode = Button.prototype.toString;

}}$;

