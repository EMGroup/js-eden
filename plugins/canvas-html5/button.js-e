## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

func Button { ${{
	var name = arguments[0];
	var label = arguments[1];
	var x = arguments[2];
	var y = arguments[3];
	var enabled = arguments[4];
	return new Button(name, label, x, y, enabled);
}}$; };

${{
	var Button = function (name, label, x, y, enabled) {
		this.name = name;
		this.label = label;
		this.x = x;
		this.y = y;
		this.enabled = enabled;
		this.element = undefined;
	};

	Button.prototype.draw = function(context, content) {
	  var me2 = this.name;
	  var but = this.element;
	  if (but === undefined) {
		var dis = "";
		if (this.enabled == true) { dis = ""; }
		else { dis = "disabled=\"true\""; }

		var can = $(content);
		var buthtml = $("<input type=\"button\" value=\"" + this.label + "\" " + dis + " style=\"position: absolute; left: " + this.x + "px; top: " + this.y + "px;\"></input").click(function() {
			root.lookup(me2 + "_clicked").assign(true);
		}).appendTo(can);

		but = buthtml.get(0);
		this.element = but;
		but.togarbage = false;

		//Initialise

	  } else {
		but.value = this.label;
		but.togarbage = false;
		if (this.enabled == true) { but.disabled = false; }
		else { but.disabled = true; }
		//XXX This might have a performance hit...
		var x = ""+this.x+"px";
		var y = ""+this.y+"px";
		var style = but.style;
		if (style.left != x) {
			style.left = x;
		}
		if (style.top != y) {
			style.top = y;
		}
		$(but).appendTo($(content));
	  }
	};

	Button.prototype.toString = function() {
	  return "Button(\"" + this.name + "\", \"" + this.label + "\", " + this.x + ", "+this.y+", "+this.enabled+")";
	};
}}$;