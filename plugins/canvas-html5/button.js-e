## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

func Button {
${{
	var name = arguments[0];
	var label = arguments[1];
	var x = arguments[2];
	var y = arguments[3];
	var enabled = arguments[4];
	if (enabled === undefined) enabled = true;
	return new Button(name, label, x, y, enabled);
}}$;
}

${{
	var Button = function (name, label, x, y, enabled) {
		this.name = name;
		this.label = label;
		this.x = x;
		this.y = y;
		this.enabled = enabled;
		this.element = undefined;
	};

	Button.prototype.hash = function () {
		return this.name+"$$"+
					this.label+"$$"+
					this.x+"$$"+
					this.y+"$$"+
					this.enabled;
	};

	Button.prototype.draw = function (context) {
		var name = this.name;
		var but = this.element;
		var agent = root.lookup("Button");

		if (but === undefined){

			var disabled = this.enabled === false? "disabled=\"disabled\"" : "";
			var inputHtml = '<input  type="button"' +
				'value="' + this.label + '"' + disabled +
				'style="' +
					'position: absolute;' +
					'left: ' + this.x + 'px;' +
					'top: ' + this.y + 'px;"' +
				'/>';

			var $input = $(inputHtml).click(function () {
				root.lookup(name + "_clicked").netAssign(true, agent);
				root.lookup(name + "_clicked").netAssign(false, agent);
			});

			but = $input.get(0);
			this.element = but;
		} else {
			but.value = this.label;

			if (this.enabled) {
				but.disabled = false;
			} else {
				but.disabled = true;
			}

			var x = ""+this.x+"px";
			var y = ""+this.y+"px";

			var style = but.style;
			if (style.left != x) {
				style.left = x;
			}
			if (style.top != y) {
				style.top = y;
			}
		}
	};

	Button.prototype.toString = function () {
		return "Button(\"" + this.name + "\", \"" + this.label + "\", " + this.x + ", "+this.y+", "+this.enabled+")";
	};

	Button.prototype.getEdenCode = Button.prototype.toString;

}}$;

