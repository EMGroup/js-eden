## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Text = function(text, x, y, size, fillcolour, outlinecolour, options) {
	this.text = text;
	this.x = x;
	this.y = y;
	this.size = size;
	this.fillcolour = fillcolour;
	this.outlinecolour = outlinecolour;

	var fontCSS;
	if (options instanceof Object) {		
		if (!("valign" in options)) {
			options.valign = "top";
		}
		this.drawingOptions = options;

		if (options.italic) {
			fontCSS = "italic ";
		} else {
			fontCSS = "";
		}
		if (options.smallCaps) {
			fontCSS = fontCSS + "small-caps ";
		}
		if (options.bold) {
			fontCSS = fontCSS + "bold ";
		}
		fontCSS = fontCSS + size + " ";
		if (options.fontFace === undefined) {
			fontCSS = fontCSS + "sans-serif";
		} else {
			fontCSS = fontCSS + options.fontFace;
		}

	} else if (typeof(options) == "string") {
		this.optionString = options;
		var valignRE = /\b(top|hanging|middle|baseline|alphabetic|ideographic|bottom)\b/;
		var searchResults = valignRE.exec(options);
		if (searchResults === null) {
			this.drawingOptions = {valign: "top"};
		} else {
			this.drawingOptions = {valign: searchResults[0]};
			options = options.replace(valignRE, "");
		}
		var halignRE = /\b(left|right|center|centre|start|end)\b/;
		searchResults = halignRE.exec(options);
		if (searchResults !== null) {
			this.drawingOptions.align = searchResults[0];
			options = options.replace(halignRE, "");
		}
		fontCSS = options + " sans-serif";
	} else {
		fontCSS = size + " sans-serif";
		this.drawingOptions = {valign: "top"};
	}
	if (this.drawingOptions.align == "centre") {
		this.drawingOptions.align = "center";
	}
	if (this.drawingOptions.valign == "baseline") {
		this.drawingOptions.valign = "alphabetic";
	}
	this.fontCSS = fontCSS;
}
}}$;

func Text {
	${{
		var text = arguments[0];
		var x = arguments[1];
		var y = arguments[2];
		var size, fillcolour, outlinecolour, options;
		var numArgs = arguments.length;
		var argType = typeof(arguments[numArgs - 1]);
		if (argType == "string" && arguments[numArgs - 1].indexOf(" ") !== -1) {
			options = arguments[numArgs - 1];
			if (numArgs >= 5) {
				fillcolour = arguments[3];
				if (numArgs >= 6) {
					outlinecolour = arguments[5];
				}
			}
		} else if (argType == "object" && !(arguments[numArgs - 1] instanceof EdenUI.plugins.Canvas2D.FillStyle)) {
			options = arguments[numArgs - 1];
			if (numArgs >= 5) {
				size = arguments[3];
				if (numArgs >= 6) {
					fillcolour = arguments[4];
					if (numArgs >= 7) {
						outlinecolour = arguments[5];
					}
				}
			}
		} else {
			size = arguments[3];
			fillcolour = arguments[4];
			outlinecolour = arguments[5];
			options = arguments[6];
		}

		if (size === undefined) {
			size = "1em";
		} else if (typeof(size) == "number") {
			size = size + "px";
		}
		if (outlinecolour === undefined && fillcolour === undefined) {
			fillcolour = "black";
		}
		
		return new Text(text, x, y, size, fillcolour, outlinecolour, options);
	}}$;
}

${{

Text.prototype.draw = function (context) {
	context.font = this.fontCSS;
	context.textBaseline = this.drawingOptions.valign;
	if ("align" in this.drawingOptions) {
		context.textAlign = this.drawingOptions.align;
	}

	if (this.fillcolour !== undefined) {
		edenUI.plugins.Canvas2D.setFillStyle(context, this.fillcolour);
		context.fillText(this.text, this.x, this.y);
	}
	if (this.outlinecolour !== undefined) {
		context.strokeStyle = this.outlinecolour;
		context.strokeText(this.text, this.x, this.y);	
	}
};

Text.prototype.toString = function() {
	var s = "Text(\"" + this.text + "\", " + this.x + ", " + this.y + ", ";

	if (this.optionString !== undefined) {
		s = s + Eden.edenCodeForValue(this.fillcolour) + ", " +
			Eden.edenCodeForValue(this.outlinecolour) + ", " +
			"\"" + this.optionString + "\")";
	} else {
		s = s + Eden.edenCodeForValue(this.size) + ", " +
			Eden.edenCodeForValue(this.fillcolour) + ", " +
			Eden.edenCodeForValue(this.outlinecolour) + ", " +
			Eden.edenCodeForValue(this.drawingOptions) + ")";
	}
	return s;
};

Text.prototype.getEdenCode = Text.prototype.toString;

}}$;
