## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

##Taints the canvas if the file is located on another domain.

${{
CanvasImage = function (dx, dy, dWidth, dHeight, sx1, sy1, sx2, sy2, smoothed, file) {
	var temp;
	if (sx2 !== undefined) {
		if (sx1 > sx2) {
			temp = sx1;
			sx1 = sx2;
			sx2 = temp;
		}
		this.sWidth = sx2 - sx1;
	}
	if (sy2 !== undefined) {
		if (sy1 > sy2) {
			temp = sy1;
			sy1 = sy2;
			sy2 = temp;
		}
		this.sHeight = sy2 - sy1;
	}

	this.originalDWidth = dWidth;
	this.originalDHeight = dHeight;
	this.originalSX2 = sx2;
	this.originalSY2 = sy2;
	
	this.dx = dx;
	this.dy = dy;
	this.dWidth = dWidth;
	this.dHeight = dHeight;
	this.sx = sx1;
	this.sy = sy1;
	this.smoothed = smoothed;

	this.image = new Image();	
	this.canvasesToRepaint = {};
	this.loaded = false;
	
	var me = this;
	
	this.image.onload = function(){
		if (me.sWidth === undefined) {
			me.sWidth = me.image.width - me.sx;
		}
		if (me.sHeight === undefined) {
			me.sHeight = me.image.height - me.sy;
		}
		if (me.dWidth === undefined && me.dHeight === undefined) {
			me.dWidth = me.sWidth;
			me.dHeight = me.sHeight;		
		} else if (me.dWidth === undefined) {
			me.dWidth = me.sWidth * me.dHeight / me.sHeight;
		} else if (me.dHeight === undefined) {
			me.dHeight = me.sHeight * me.dWidth / me.sWidth;
		}

		me.loaded = true;
		for (var canvas in me.canvasesToRepaint) {
			var pictureObs = root.lookup(canvas);
			pictureObs.jsObservers.refreshView(pictureObs, pictureObs.value());
		}
	}
	this.image.src = file;
};
}}$;

func Image {
	${{
		var numArgs = arguments.length;

		var dx = arguments[0];
		var dy = arguments[1];
		var dWidth, dHeight, sx1 = 0, sy1 = 0, sx2, sy2, smoothed = true, file;

		if (numArgs > 3) {
			dWidth = arguments[2];
			if (numArgs > 4) {
				dHeight = arguments[3];
				if (numArgs > 5) {
					sx1 = arguments[4];
					if (numArgs > 6) {
						sy1 = arguments[5];
						if (numArgs > 7) {
							sx2 = arguments[6];
							if (numArgs > 8) {
								sy2 = arguments[7];
								if (numArgs > 9) {
									smoothed = arguments[8];
								}
							}
						}
					}
				}
			}
		}
		file = arguments[numArgs - 1];
		return new CanvasImage(dx, dy, dWidth, dHeight, sx1, sy1, sx2, sy2, smoothed, file);
	}}$;
}

${{
CanvasImage.prototype.draw = function(context, canvas) {
	if (this.loaded) {
		context.imageSmoothingEnabled = this.smoothed;
		context.drawImage(this.image, this.sx, this.sy, this.sWidth, this.sHeight, this.dx, this.dy, this.dWidth, this.dHeight);
	} else {
		this.canvasesToRepaint[canvas] = true;
	}
};
}}$;

${{
CanvasImage.prototype.toString = function() {
  return "Image(" + this.dx + ", " + this.dy+ ", " +
	Eden.edenCodeForValue(this.originalDWidth) + ", " +
	Eden.edenCodeForValue(this.originalDHeight) + ", " +
	Eden.edenCodeForValue(this.sx) + ", " +
	Eden.edenCodeForValue(this.sy) + ", " +
	Eden.edenCodeForValue(this.originalSX2) + ", " +
	Eden.edenCodeForValue(this.originalSY2) + ", " + this.smoothed + ", \"" + this.image.src + "\")";
};

CanvasImage.prototype.getEdenCode = CanvasImage.prototype.toString;

}}$;
