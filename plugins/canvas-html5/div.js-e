## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

${{
Div = function (html, x, y, width, height, id, classNames, style) {
	this.html = html;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.id = id;
	this.classNames = classNames;
	this.style = style;
}

Div.prototype.hash = function () {
	return this.x+"$$"+
		this.y+"$$"+
		this.width+"$$"+
		this.height+"$$"+
		this.html+"$$"+
		this.id+"$$"+
		this.classNames+"$$"+
		this.style;
};
}}$;

func Div { ${{
	var html = arguments[0];
	var x = arguments[1];
	var y = arguments[2];
	var width, height;   //Number of pixels, string (e.g. "50%") or undefined (automatic)
	var id, classNames;
	var style = "";
	
	var argsProcessed = 3;
	var argType = typeof(arguments[3]);
	
	if (argType == "number" || argType == "undefined" || (argType == "string" && /^\d/.test(arguments[3]))) {
		width = arguments[3];
		argsProcessed++;
		
		argType = typeof(arguments[4]);
		if (argType == "number" || argType == "undefined" || (argType == "string" && /^\d/.test(arguments[4]))) {
			height = arguments[4];
			argsProcessed++;
		}
	}

	if (arguments.length > argsProcessed) {
		if (arguments.length == argsProcessed + 3) {
			id = arguments[argsProcessed];
			classNames = arguments[argsProcessed + 1];
			style = arguments[argsProcessed + 2];
		} else {
			if (Array.isArray(arguments[argsProcessed])) {
				classNames = arguments[argsProcessed];
				if (arguments.length == argsProcessed + 2) {
					style = arguments[argsProcessed + 1];
				}
			} else if (arguments.length == argsProcessed + 2) {
				id = arguments[argsProcessed];
				if (Array.isArray(arguments[argsProcessed + 1])) {
					classNames = arguments[argsProcessed + 1];
				} else {
					style = arguments[argsProcessed + 1];
				}
			} else if (arguments[argsProcessed].indexOf(":") == -1) {
				id = arguments[argsProcessed];
			} else {
				style = arguments[argsProcessed];
			}
		}
	}	
	return new Div(html, x, y, width, height, id, classNames, style);
}}$; }

${{

Div.prototype.draw = function(context) {

  if (this.elements === undefined) {
	var me = this;
	var divStyle = "position: absolute; " + this.style;

	var divElement = document.createElement("div");
	if (this.id !== undefined) {
		divElement.id = this.id;
	}
	if (Array.isArray(this.classNames)) {
		divElement.setAttribute("class", this.classNames.join(" "));
	}
	divElement.style.cssText = divStyle;
	divElement.innerHTML = this.html;
	this.fontSizeSpecified = divElement.style.fontSize !== "";

	//Create object properties that record the automatically generated width and/or height.
	if (this.id !== undefined) {
		divElement.onmousedown = function (event) {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseDownZone").assign(event.target.id, Symbol.hciAgent, mouseFollow);
		};
		divElement.onmouseup = function (event) {
			edenUI.plugins.Canvas2D.endClick();
		};
		divElement.onmouseenter = function (event) {
			var mouseFollow = root.lookup("mouseFollow").value();
			root.lookup("mouseZone").assign(event.target.id, Symbol.hciAgent, mouseFollow);
		};
		if (eden.isValidIdentifier(this.id)) {
			var clickSym = root.lookup(this.id + "_click");
			if (clickSym.value() === undefined) {
				clickSym.assign(false, root.lookup("Div"));
			}
		}

		if (this.width === undefined || this.height === undefined) {
			var objectElement = document.createElement("object");
			objectElement.setAttribute("style", "display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;");
			objectElement.onload = function () {
				var resizeAction = function () {
					if (me.width === undefined) {
						root.lookup(me.id + "_width").assign(me.elements[0].clientWidth);
					}
					if (me.height === undefined) {
						root.lookup(me.id + "_height").assign(me.elements[0].clientHeight);
					}
				};
				resizeAction();
				this.contentDocument.defaultView.addEventListener("resize", resizeAction);
			};
			objectElement.type = "text/html";
			objectElement.data = "about:blank";
			divElement.appendChild(objectElement);
		}
	}

	this.elements = [divElement];
  }
};

Div.prototype.scale = function (scale, zoom , origin) {
	var style = this.elements[0].style;
	if (typeof(this.x) == "number") {
		style.left = Math.round(this.x * scale + origin.x) + "px";
	}
	if (typeof(this.y) == "number") {
		style.top = Math.round(this.y * scale + origin.y) + "px";
	}
	if (typeof(this.width) == "number") {
		style.width = Math.round(this.width * scale) + "px";
	}
	if (typeof(this.height) == "number") {
		style.height = Math.round(this.height * scale) + "px";
	}
	if (!this.fontSizeSpecified) {
		if (zoom == 1) {
			style.fontSize = "";
		} else {
			style.fontSize = zoom + "em";
		}
	}
};

Div.prototype.toString = function() {
	return this.getEdenCode();
};

Div.prototype.getEdenCode = function () {
	var s = "Div(\"" + this.html + "\", \"" + this.x + "\", \"" + this.y + "\", " + 
		Eden.edenCodeForValue(this.width) + ", " + Eden.edenCodeForValue(this.height);

	if (this.id !== undefined) {
		s = s + ", \"" + this.id + "\"";
	}
	if (this.classNames !== undefined) {
		s = s + ", " + Eden.edenCodeForValue(this.classNames);
	}
	if (this.style != "") {
		s = s + ", \"" + this.style + "\"";
	}
	s = s + ")";
	return s;
};

}}$;
