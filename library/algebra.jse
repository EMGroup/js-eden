## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

func centroid {
	auto points, x, y, i, nx, ny;
	if ($# == 1 && isList($[1])) {
		points = $[1];
	} else {
		points = $;
	}

	nx = 0;
	ny = 0;
	for (i = 1; i <= points#; i++) {
		if (points[i] != @) {
			if (!isPoint(points[i])) {
				error("centroid: Item " // str(i) // " must be a Point, not a " // type(points[i]));
				return @;
			}
			if (points[i].x != @) {
				if (x == @) {
					x = points[i].x;
				} else {
					x = x + points[i].x;
				}
				nx++;
			}
			if (points[i].y != @) {
				if (y == @) {
					y = points[i].y;
				} else {
					y = y + points[i].y;
				}
				ny++;
			}
		}
	}
	if (nx != 0) {
		x = x / nx;
	}
	if (ny != 0) {
		y = y / ny;
	}
	return {x, y};
}

func rotatePoint {
	para point, theta, centre;
	auto translatedX, translatedY, rotatedX, rotatedY, cosTheta, sinTheta;
	if ($# < 2 || $# > 3) {
		error("rotatePoint: This function requires at least 2 arguments and at most 3 arguments.");
		return @;	
	}
	if ($# == 2) {
		centre = {0, 0};
	}

	if (point == @ || theta == @ || centre == @) {
		return @;
	}

	if (!isPoint(point)) {
		error("rotatePoint: The first argument must be a Point, not a " // type(point));
		return @;
	} else if (!isNumber(theta)) {
		error("rotatePoint: The second argument must be a number, not a " // type(theta));
		return @;
	} else if (!isPoint(centre)) {
		error("rotatePoint: The centre of enlargement must be a Point, not a " // type(centre));
		return @;	
	} else if (point.x == @ || point.y == @ || centre.x == @ || centre.y == @) {
		return @;
	}

	cosTheta = cos(-theta);
	sinTheta = sin(-theta);
	translatedX = point.x - centre.x;
	translatedY = point.y - centre.y;

	rotatedX = translatedX * cosTheta - translatedY * sinTheta + centre.x;
	rotatedY = translatedX * sinTheta + translatedY * cosTheta + centre.y;
	return {rotatedX, rotatedY};
}

func scalePoint {
	auto point, scaleX, scaleY, centre, x, y;
	if ($# < 2 || $# > 4) {
		error("scalePoint: This function requires at least 2 arguments and at most 3 arguments.");
		return @;	
	}
	if ($# == 2) {
		point = $[1];
		scaleX = $[2];
		scaleY = $[2];
		centre = {0, 0};
	} else if ($# == 3) {
		point = $[1];
		scaleX = $[2];
		if (isPoint($[3])) {
			scaleY = scaleX;
			centre = $[3];
		} else {
			scaleY = $[3];
			centre = {0, 0};			
		}
	}

	if (point == @ || scaleX == @ || scaleY == @ || centre == @) {
		return @;
	}

	if (!isPoint(point)) {
		error("scalePoint: The first argument must be a Point, not a " // type(point));
		return @;
	} else if (!isNumber(scaleX)) {
		error("scalePoint: The second argument must be a number, not a " // type(scaleX));
		return @;
	} else if (!isNumber(scaleY)) {
		error("scalePoint: The third argument must be a number, not a " // type(scaleY));
		return @;
	} else if (!isPoint(centre)) {
		error("scalePoint: The centre of enlargement must be a Point, not a " // type(centre));
		return @;	
	}

	if (point.x == @ || centre.x == @) {
		x = @;
	} else {
		x = (point.x - centre.x) * scaleX + centre.x;
	}
	if (point.y == @ || centre.y == @) {
		y = @;
	} else {
		y = (point.y - centre.y) * scaleY + centre.y;
	}
	return {x, y};
}
