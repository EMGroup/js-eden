{
	"functions": {
		"apply": {
			"parameters": {
				"func_or_proc": "",
				"argument_list": ""
			},
			"return": "",
			"description": ""
		},
		"array": {
			"parameters": {
				"length": "",
				"[fill_value]" : ""
			},
			"return": "",
			"description": ""
		},
		"canvasURL": {
			"parameters": {
				"[canvas_name]": ""
			},
			"return": "",
			"description": ""
		},
		"centroid": {
			"parameters": {
				"point_list_or_point1...": ""
			},
			"return": "",
			"description": ""
		},
		"char": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"charCode": {
			"parameters": {
				"character": ""
			},
			"return": "",
			"description": ""
		},
		"choose": {
			"parameters": {
				"selected_key": "",
				"key1": "",
				"value1...": ""
			},
			"return": "",
			"description": ""
		},
		"compose": {
			"parameters": {
				"func_list_or_func1...": ""
			},
			"return": "",
			"description": ""
		},
		"concat": {
			"parameters": {
				"[separator]": "",
				"[item_list_or_item1...]": ""
			},
			"return": "",
			"description": ""
		},
		"curry": {
			"parameters": {
				"func": "",
				"argument_list_or_argument1...": ""
			},
			"return": "",
			"description": ""
		},
		"decodeHTML": {
			"parameters": {
				"string": "A string containing escape sequences such as &amp;"
			},
			"return": "A string with the escape sequences replaced with the real characters.",
			"description": ""
		},
		"definitionOf": {
			"parameters": {
				"symbol": ""
			},
			"return": "",
			"description": ""
		},
		"definitionRHS": {
			"parameters": {
				"symbol": ""
			},
			"return": "",
			"description": ""
		},
		"doDefault": {
			"parameters": {
				"value": "",
				"value_if_undefined": ""
			},
			"return": "",
			"description": ""
		},
		"edenCode": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"escapeRE": {
			"parameters": {
				"string": ""
			},
			"return": "",
			"description": ""
		},
		"foldl": {
			"parameters": {
				"func": "",
				"initial_value": "",
				"list_or_item1...": ""
			},
			"return": "",
			"description": ""
		},
		"foldr": {
			"parameters": {
				"func": "",
				"initial_value": "",
				"list_or_item1...": ""
			},
			"return": "",
			"description": ""
		},
		"hasProperty": {
			"parameters": {
				"property_name": "",
				"object": ""
			},
			"return": "",
			"description": ""
		},
		"hsl2colour": {
			"parameters": {
				"hue": "",
				"saturation": "",
				"lightness": "",
				"[alpha]": ""
			},
			"return": "",
			"description": ""
		},
		"htmlBulletList": {
			"parameters": {
				"string_list_or_string1...": ""
			},
			"return": "",
			"description": ""
		},
		"htmlNumberedList": {
			"parameters": {
				"[numbering_scheme]" : "",
				"[starting_number]" : "",
				"string_list_or_string1...": ""
			},
			"return": "",
			"description": ""
		},
		"indexOf": {
			"parameters": {
				"search_value": "",
				"string_or_list": "",
				"[start": "",
				"[is_sorted]]": ""
			},
			"return": "",
			"description": ""
		},
		"indexOfRE": {
			"parameters": {
				"regular_expression": "",
				"[case_sensitive]": "",
				"target_string": "",
				"[starting_offset]": ""
			},
			"return": "",
			"description": ""
		},
		"int": {
			"parameters": {
				"value": "Value to convert"
			},
			"return": "An integer",
			"description": "Converts a value to an integer"
		},
		"isBoolean": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isCallable": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isChar": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isDefined": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isDependency": {
			"parameters": {
				"symbol": ""
			},
			"return": "",
			"description": ""
		},
		"isDependent": {
			"parameters": {
				"dependency": "",
				"observable": ""
			},
			"return": "",
			"description": ""
		},
		"isFunc": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isInt": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isList": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isNaN": {
			"parameters": {
				"number": ""
			},
			"return": "",
			"description": ""
		},
		"isNumber": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isObject": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isPoint": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isPointer": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isProc": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"isString": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"length": {
			"parameters": {
				"[from]": "",
				"point_or_line": ""
			},
			"return": "",
			"description": ""
		},
		"List": {
			"parameters": {
				"item1...": ""
			},
			"return": "",
			"description": ""
		},
		"listcat": {
			"parameters": {
				"list1...": ""
			},
			"return": "",
			"description": ""
		},
		"lookup": {
			"parameters": {
				"key": "",
				"object": ""
			},
			"return": "",
			"description": ""
		},
		"lowercase": {
			"parameters": {
				"string": ""
			},
			"return": "",
			"description": ""
		},
		"map": {
			"parameters": {
				"func": "",
				"list_or_item1...": ""
			},
			"return": "",
			"description": ""
		},
		"mapPartial": {
			"parameters": {
				"func": "",
				"list_or_item1...": ""
			},
			"return": "",
			"description": ""
		},
		"max": {
			"parameters": {
				"list_or_value1...": ""
			},
			"return": "",
			"description": ""
		},
		"Menu": {
			"parameters": {
				"label": "",
				"items": ""
			},
			"return": "",
			"description": ""
		},
		"MenuItem": {
			"parameters": {
				"name": "",
				"label": ""
			},
			"return": "",
			"description": ""
		},
		"min": {
			"parameters": {
				"list_or_value1...": ""
			},
			"return": "",
			"description": ""
		},
		"mod": {
			"parameters": {
				"dividend": "",
				"divisor": ""
			},
			"return": "",
			"description": ""
		},
		"nameof": {
			"parameters": {
				"pointer": ""
			},
			"return": "",
			"description": ""
		},
		"partApply": {
			"parameters": {
				"func": "",
				"argument_number1": "",
				"argument_value1...": ""
			},
			"return": "",
			"description": ""
		},
		"Point": {
			"parameters": {
				"x": "",
				"y": ""
			},
			"return": "",
			"description": ""
		},
		"pow": {
			"parameters": {
				"base": "",
				"exponent": ""
			},
			"return": "",
			"description": ""
		},
		"properties": {
			"parameters": {
				"object": ""
			},
			"return": "",
			"description": ""
		},
		"randomBoolean": {
			"parameters": {
				"[probability_true]": ""
			},
			"return": "",
			"description": ""
		},
		"randomFloat": {
			"parameters": {
				"lower_bound": "",
				"upper_bound": ""
			},
			"return": "",
			"description": ""
		},
		"randomInteger": {
			"parameters": {
				"lower_bound": "",
				"upper_bound": ""
			},
			"return": "",
			"description": ""
		},
		"RE": {
			"parameters": {
				"pattern": "",
				"[case_sensitive": "",
				"[global]]" : ""
			},
			"return": "",
			"description": ""
		},		
		"replaceFirst": {
			"parameters": {
				"source": "",
				"search": "",
				"replace": "",
				"[start]": ""
			},
			"return": "",
			"description": ""
		},
		"reverse": {
			"parameters": {
				"list": ""
			},
			"return": "",
			"description": ""
		},
		"rgb2colour": {
			"parameters": {
				"red": "",
				"green": "",
				"blue": "",
				"[alpha]": ""
			},
			"return": "",
			"description": ""
		},
		"rotatePoint": {
			"parameters": {
				"point": "",
				"angle": "",
				"[centre]": ""
			},
			"return": "",
			"description": ""
		},
		"round": {
			"parameters": {
				"number": "",
				"[decimal_places]": ""
			},
			"return": "",
			"description": ""
		},
		"roundMultiple": {
			"parameters": {
				"number": "Floating point number",
				"multiple": "The unit to round to, e.g. 0.1 for the nearest 10th"
			},
			"return": "Nearest value, rounded down",
			"description": "Finds the nearest value by rounding down"
		},
		"scalePoint": {
			"parameters": {
				"point": "",
				"scale_x": "",
				"[scale_y]": "",
				"[centre]": ""
			},
			"return": "",
			"description": ""
		},
		"search": {
			"parameters": {
				"search_value": "",
				"string_or_list": "",
				"comparison_function": "",
				"[start": "",
				"[is_sorted]]": ""
			},
			"return": "",
			"description": ""
		},
		"sequenceItoJ": {
			"parameters": {
				"low": "",
				"high": "",
				"[increment]": "",
				"func": "",
				"[item0]" : ""
			},
			"return": "",
			"description": ""
		},
		"sequenceN": {
			"parameters": {
				"low": "",
				"[increment]": "",
				"number_of_values" : "",
				"func": "",
				"[item0]" : ""
			},
			"return": "",
			"description": ""
		},
		"sequenceArithmetic": {
			"parameters": {
				"low": "",
				"high": "",
				"[increment]": ""
			},
			"return": "",
			"description": ""
		},
		"sequenceArithmeticN": {
			"parameters": {
				"low": "",
				"[increment]": "",
				"number_of_values" : ""
			},
			"return": "",
			"description": ""
		},
		"sequenceList": {
			"parameters": {
				"func": "",
				"list_or_item1...": ""
			},
			"return": "",
			"description": ""
		},
		"sequencePrevious": {
			"parameters": {
				"func": "",
				"item0" : "",
				"[n]": ""
			},
			"return": "",
			"description": ""
		},
		"sort": {
			"parameters": {
				"string_or_list": "",
				"[named_ordering_or_comparison_function]": ""
			},
			"return": "",
			"description": ""
		},
		"sqrt": {
			"parameters": {
				"number": ""
			},
			"return": "",
			"description": ""
		},
		"str": {
			"parameters": {
				"value": "A value to be converted"
			},
			"return": "A string",
			"description": "Converts a value to a string"
		},
		"strcat": {
			"parameters": {
				"string1...": ""
			},
			"return": "",
			"description": ""
		},
		"sublist": {
			"parameters": {
				"list": "",
				"from": "",
				"[to]": ""
			},
			"return": "",
			"description": ""
		},
		"substitute": {
			"parameters": {
				"string_with_placeholders": "",
				"object_or_list_or_value1...": ""
			},
			"return": "",
			"description": ""
		},
		"substr": {
			"parameters": {
				"string": "",
				"from": "",
				"[to]": ""
			},
			"return": "",
			"description": ""
		},
		"sum": {
			"parameters": {
				"list_or_item1...": ""
			},
			"return": "",
			"description": ""
		},
		"tail": {
			"parameters": {
				"list": ""
			},
			"return": "",
			"description": ""
		},
		"trim": {
			"parameters": {
				"string": "",
				"[left_right_or_both]": ""
			},
			"return": "",
			"description": ""
		},
		"type": {
			"parameters": {
				"value": ""
			},
			"return": "",
			"description": ""
		},
		"uppercase": {
			"parameters": {
				"string": ""
			},
			"return": "",
			"description": ""
		},
		"include": {
			"parameters": {
				"file": "Script file to load"
			},
			"return": "No return value",
			"description": "Loads and executes a JavaScript or JS-Eden script file"
		},
		"include_css": {
			"parameters": {
				"file": "CSS file to load"
			},
			"return": "No return value",
			"description": "Load an external style sheet"
		},
		"html": {
			"parameters": {
				"code": "HTML code string"
			},
			"return": "No return value",
			"description": "Displays HTML on the canvas"
		},
		"time": {
			"return": "Integer number of seconds",
			"description": "Get current time in seconds since 1/1/1970"
		},
		"execute": {
			"parameters": {
				"code": "A string"
			},
			"return": "No return value",
			"description": "Evaluates a string as an Eden script"
		},
		"Text": {
			"parameters": {
				"text": "Text string to display",
				"x": "X-coordinate",
				"y": "Y-coordinate",
				"[size" : "",
				"[fill_colour": "Text colour in HTML form",
				"[outline_colour]]]": "",
				"[options]": ""
			},
			"return": "Text object",
			"description": "Creates a text element for display on the canvas"
		},
		"textWidth": {
			"parameters": {
				"text": "Text string to measure",
				"[size]" : "",
				"[options]": "",
				"[canvas_scale]": ""
			},
			"return": "The width of the given text, in pixels",
			"description": "Measures the width of a piece of text drawn using the Text function."
		},
		"textHeight": {
			"parameters": {
				"text": "Text string to measure",
				"[size]" : "",
				"[options]": "",
				"[canvas_scale]": ""
			},
			"return": "The height of the given text, in pixels",
			"description": "Measures the height of a piece of text drawn using the Text function."
		},
		"Arc": {
			"parameters": {
				"x": "",
				"y": "",
				"radius": "",
				"start_angle": "",
				"end_angle": "",
				"[colour]": "",
				"[drawing_options]": ""
			},
			"return": "",
			"description": ""
		},
		"Curve": {
			"parameters": {
				"x1": "",
				"y1": "",
				"x2": "",
				"y2": "",
				"radius": "",
				"curviness": "Usually between 0 (like a right angle) and 1 (like half of an ellipse)",
				"[start_angle": "",
				"[end_angle": "",
				"[skew": "Between 0 and 1",
				"[overshoot]]]]": "",
				"[is_right_and_up]": "",
				"[colour(s)]": "",
				"[drawing_options]": ""
			},
			"return": "",
			"description": ""		
		},
		"FillPattern": {
			"parameters": {
				"url": ""
			},
			"return": "",
			"description": ""
		},
		"Ellipse": {
			"parameters": {
				"x": "Centre X-coordinate",
				"y": "Centre Y-coordinate",
				"x_radius": "Ellipse x-axis radius from centre",
				"y_radius": "Ellipse y-axis radius from centre",
				"[fill_colour": "Fill colour for the ellipse on the canvas",
				"[outline_colour]]": "Outline colour of the ellipse on the canvas",
				"[drawing_options]": ""
			},
			"return": "Ellipse object",
			"description": "Creates an ellipse element for display on the canvas"
		},
		"Line": {
			"parameters": {
				"x1": "X-coordinate for start",
				"y1": "Y-coordinate for start",
				"x2": "X-coordinate for end",
				"y2": "Y-coordinate for end",
				"[colour(s)]": "A HTML colour value for the whole line or a list of HTML colour values to create a gradient",
				"[drawing_options]" : ""
			},
			"return": "Line object",
			"description": "Creates a line element for display on the canvas"
		},
		"LinearGradient": {
			"parameters": {
				"x1": "X-coordinate for start",
				"y1": "Y-coordinate for start",
				"x2": "X-coordinate for end",
				"y2": "Y-coordinate for end",
				"[start_colour" : "",
				"end_colour]" : "",
				"[extra_colour_stops]" : "A list of two item lists.  The first element of each is a point along the gradient (0.0-1.0).  The second is the colour."
			},
			"return": "",
			"description": ""
		},
		"LineSequence": {
			"parameters": {
				"points": "List of coordinates in the form Point(x, y) from the top left corner of the canvas",
				"[colour(s)]": "Colour of the line as a HTML colour value, or a list of such colour values",
				"[drawing_options]": ""
			},
			"return": "LineSequences object",
			"description": "Creates sequence of joined lines for display on the canvas"
        },
		"PixelList": {
			"parameters": {
				"pointer_to_rgba_values_list": "",
				"x": "",
				"y": "",
				"width": ""
			},
			"return": "",
			"description": ""
		},
		"GreyPixelList": {
			"parameters": {
				"[name]": "",
				"pointer_to_grayscale_values_list": "",
				"x": "",
				"y": "",
				"width": "",
				"[red_multiply" : "",
				"[green_multiply" : "",
				"[blue_multiply" : "",
				"[red_add" : "",
				"[green_add" : "",
				"[blue_add]]]]]]" : ""
			},
			"return": "",
			"description": ""
		},
		"Rectangle": {
			"parameters": {
				"x": "X-coordinate for top left",
				"y": "Y-coordinate for top left",
				"width": "",
				"height": "",
				"[fill_colour": "",
				"[outline_colour]]": "Colour of the rectangle outline in HTML form",
				"[drawing_options]": ""
			},
			"return": "Rectangle object",
			"description": "Creates a rectangle element for display on the canvas"
		},
		"RoundedRectangle": {
			"parameters": {
				"x": "X-coordinate for top left",
				"y": "Y-coordinate for top left",
				"width": "",
				"height": "",
				"corner_radius": "",
				"[fill_colour": "",
				"[outline_colour]]": "Colour of the rectangle outline in HTML form",
				"[drawing_options]": ""
			},
			"return": "Rectangle object",
			"description": "Creates a rectangle element for display on the canvas"
		},
		"Polygon": {
			"parameters": {
				"points": "List of coordinates in the form {x, y} from the top left corner of the canvas",
				"[fill_colour": "Colour of the polygon (fill) in HTML form",
				"[outline_colour]]": "",
				"[drawing_options]": ""
			},
			"return": "Polygon object",
			"description": "Creates a polygon element for display on the canvas"
        },
		"RegularPolygon": {
			"parameters": {
				"centre_x": "",
				"centre_y": "",
				"radius": "",
				"n_sides": "",
				"[star_factor]": "",
				"[is_interior_outlined]": "",
				"[rotation]": "",
				"[fill_colour": "Colour to fill the interior of the polygon with",
				"[outline_colour]]": "",
				"[drawing_options]": ""
			},
			"return": "RegularPolygon object",
			"description": "Creates a polygon element for display on the canvas"
        },
		"Sector": {
			"parameters": {
				"x": "",
				"y": "",
				"radius": "",
				"start_angle": "",
				"end_angle": "",
				"[fill_colour": "",
				"[outline_colour]]": "",
				"[drawing_options]": ""
			},
			"return": "",
			"description": ""
		},
		"Shadow": {
			"parameters": {
				"[colour]": "",
				"x_offset": "",
				"y_offset": "",
				"length": "",
				"[scales]": "True if the shadow scales in accordance with the canvas's scale observable, or false if the shadow is just cosmetic and shouldn't scale."
			},
			"return": "",
			"description": ""
		},
		"Circle": {
			"parameters": {
				"x": "Centre X-coordinate",
				"y": "Centre Y-coordinate",
				"radius": "Circle radius from centre",
				"[fill_colour": "Fill colour for the circle on the canvas",
				"[outline_colour]]": "Outline colour of the circle on the canvas",
				"[drawing_options]": ""
			},
			"return": "Circle object",
			"description": "Creates a circle element for display on the canvas"
		},
		"Button": {
			"parameters": {
				"label": "Text for the button",
				"x": "X-coordinate",
				"y": "Y-coordinate",
				"[enabled": "Boolean for button enabled",
				"[fill_colour": "Background colour of the button",
				"[text_colour]]]": "Colour of the text written on the button"
			},
			"return": "Button object",
			"description": "Creates a button element for display on the canvas"
		},
		"Checkbox": {
			"parameters": {
				"x": "X-coordinate",
				"y": "Y-coordinate",
				"[tristate": "Allow the user to click to produce an undefined value",
				"[enabled]]": "Boolean for if the checkbox enabled"
			},
			"return": "Checkbox object",
			"description": "Creates a checkbox type input element for display on the canvas"
		},
		"Div": {
			"parameters": {
				"html": "HTML content",
				"x": "X-coordinate",
				"y": "Y-coordinate",
				"[width": "Width in pixels or as a string or undefined",
				"[height]]": "Height in pixels or as a string or undefined",
				"[id]" : "",
				"[css_class_list]" : "",
				"[style]" : "An optional CSS style string"
			},
			"return": "Div object",
			"description": "Creates a html element for display on the canvas"
		},
		"Image": {
			"parameters": {
				"[name]": "",
				"x": "X-coordinate",
				"y": "Y-coordinate",
				"[width": "Width in pixels",
				"[height": "Height in pixels",
				"[clip_left": "",
				"[clip_top": "",
				"[clip_right": "",
				"[clip_bottom": "",
				"[smoothed]]]]]]]": "",
				"url": "Source file for the image"
			},
			"return": "Image object",
			"description": "Creates an image element for display on the canvas together with the geometric shapes.  Taints the canvas if url is located on another domain."
		},
		"imageWithZones": {
			"parameters": {
				"[name]": "Name for click events",
				"[width": "Width in pixels",
				"height]": "Height in pixels",
				"url": "Source file for the image",
				"zones": "List of two element lists. The first element of each is the name of an image area. The second is a Circle, Rectangle or Polygon object.",
				"show_zones": "True to display a visualization of the zones or false to implement the zones without the visualization."
			},
			"return": "A list of canvas objects",
			"description": ""
		},
		"HTMLImage": {
			"parameters": {
				"[name]": "Name for click events",
				"x": "X-coordinate",
				"y": "Y-coordinate",
				"[width": "Width in virtual pixel units",
				"[height": "Height in virtual pixel units",
				"[at_scale]]]": "The value of _view_xxx_scale needed to make 1 virtual pixel equal 1 real pixel",
				"url": "Source file for the image",
				"[zones]": "List of two element lists. The first element of each is the name of an image area. The second is a Circle, Rectangle or Polygon object."
			},
			"return": "Image object",
			"description": "Creates a HTML image element for display on the canvas above the geometric shapes.  Doesn't taint the canvas."
		},
		"RadioButtons": {
			"parameters": {
				"options": "A list of strings providing the options",
				"x": "X-coordinate",
				"y": "Y-coordinate",
				"[enabled": "Boolean to determine if the radio buttons are enabled",
				"[is_horizontal]]": ""
			},
			"return": "",
			"description": ""
		},
		"Slider": {
			"parameters": {
				"min": "",
				"max": "",
				"step": "",
				"x": "",
				"y": "",
				"size_in_pixels": "",
				"[orientation": "",
				"[enabled]]": ""
			},
			"return": "",
			"description": ""
		},
		"Textbox": {
			"parameters": {
				"x": "",
				"y": "",
				"width": "",
				"[height]": "",
				"[placeholder_text]": "",
				"[enabled]": ""
			},
			"return": "",
			"description": ""
		},
		"Combobox": {
			"parameters": {
				"options": "A list of strings providing the options",
				"x": "X-coordinate",
				"y": "Y-coordinate",
				"[enabled]": "Boolean for combobox enabled"
			},
			"return": "Combobox object",
			"description": "Creates a drop-down select box for the canvas"
		},
		"BulletSlide": {
			"parameters": {
				"[title": "",
				"[subtitle]]": "",
				"list_of_bullet_points" : ""
			},
			"return": "",
			"description": ""
		},
		"Video": {
			"parameters": {
				"[preload]": ""
			},
			"return": "",
			"description": ""
		},
		"Slide": {
			"parameters": {
				"html": "",
				"[css_class_or_class_list]": "Adds the CSS class name jspe-<specified-name>-slide to the slide."
			},
			"return": "",
			"description": ""
		},
		"TitledSlide": {
			"parameters": {
				"title": "",
				"[subtitle]" : "",
				"html" : ""
			},
			"return": "",
			"description": ""
		},
		"TitleSlide": {
			"parameters": {
				"title": "",
				"[subtitle]" : ""
			},
			"return": "",
			"description": ""
		},
		"cos": {
			"parameters": {
				"angle": "Angle in radians"
			},
			"return": "Cosine of the angle",
			"description": "Cosine"
		},
		"sin": {
			"parameters": {
				"angle": "Angle in radians"
			},
			"return": "Sine of the angle",
			"description": "Sine"
		},
		"tan": {
			"parameters": {
				"angle": ""
			},
			"return": "",
			"description": ""
		},
		"abs": {
			"parameters": {
				"number": "A number"
			},
			"return": "The absolute magnitude",
			"description": "Removes the sign from a number to return its absolute magnitude"
		},
		"acos": {
			"parameters": {
				"number": "Number between -1 and 1"
			},
			"return": "Arc cosine of value in radians",
			"description": "Arc cosine, inverse of cosine."
		},
		"asin": {
			"parameters": {
				"number": "Number between -1 and 1"
			},
			"return": "Arc sine of value in radians",
			"description": "Arc sine, inverse of sine."
		},
		"atan": {
			"parameters": {
				"number": ""
			},
			"return": "Arc tan in radians",
			"description": "Arc tan, inverse of tan."
		},
		"ceil": {
			"parameters": {
				"number": "Floating point number",
				"[multiple]": "The unit to round to, e.g. 0.1 for the nearest 10th"
			},
			"return": "Nearest value, rounded up",
			"description": "Finds the nearest value that is not less than the number"
		},
		"roundUp": {
			"parameters": {
				"number": "Floating point number",
				"[decimal_places]": ""
			},
			"return": "Nearest value, rounded up",
			"description": "Finds the nearest value that is not less than the number"
		},
		"exp": {
			"parameters": {
				"exponent": "Exponent"
			},
			"return": "e to the power of number",
			"description": "Base-e exponential."
		},
		"floor": {
			"parameters": {
				"number": "Floating point number",
				"[multiple]": "The unit to round to, e.g. 0.1 for the nearest 10th"
			},
			"return": "Nearest value, rounded down",
			"description": "Finds the nearest value by rounding down"
		},
		"roundDown": {
			"parameters": {
				"number": "Floating point number",
				"[decimal_places]": ""
			},
			"return": "Nearest value, rounded down",
			"description": "Finds the nearest value by rounding down"
		},
		"log": {
			"parameters": {
				"number": ""
			},
			"return": "Logarithm of the number",
			"description": "Log function"
		},
		"random": {
			"parameters": {},
			"return": "Random number",
			"description": "Generates a random number between 0 and 1"
		},
		"forget": {
			"parameters": {
				"symbol": "Symbol name"
			},
			"return": "",
			"description": "Removes a symbol from the symbol table"
		},
		"forgetAll": {
			"parameters": {
				"[regular_expression_or_list": "",
				"[case_sensitive": "",
				"[confirm]]]" : ""
			},
			"return": "",
			"description": "Removes from the symbol table all symbols whose names match a given regular expression"
		},
		"shapeOnTopAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : "",
				"[search_all]": ""
			},
			"return": "",
			"description": ""
		},
		"zoneOnTopAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : ""
			},
			"return": "",
			"description": ""
		},
		"observableOnTopAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : "",
				"[search_all]": ""
			},
			"return": "",
			"description": ""
		},
		"shapeOnBottomAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : "",
				"[search_all]": ""
			},
			"return": "",
			"description": ""
		},
		"zoneOnBottomAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : ""
			},
			"return": "",
			"description": ""
		},
		"observableOnBottomAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : "",
				"[search_all]": ""
			},
			"return": "",
			"description": ""
		},
		"shapesAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : "",
				"[search_all]": ""
			},
			"return": "",
			"description": ""
		},
		"zonesAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : ""
			},
			"return": "",
			"description": ""
		},
		"observablesAt": {
			"parameters": {
				"view_name_or_ptr_to_picture": "",
				"point_or_xy_argument_pair" : "",
				"[search_all]": ""
			},
			"return": "",
			"description": ""
		},
		"observableForShape": {
			"parameters": {
				"shape": ""
			},
			"return": "",
			"description": ""
		}
	},
	"procedures": {
		"alias": {
			"parameters": {
				"pointer1": "",
				"pointer2": ""
			}
		},
		"arrangeWindows": {
			"parameters": {
				"[list_of_view_names]": ""
			}
		},
		"attemptMouseCapture": {
			"parameters": { }
		},
		"bindCSSNumericProperty": {
			"parameters": {
				"[id]": "",
				"css_selector": "",
				"css_property_name": "",
				"observable_name": "",
				"css_units": ""
			}
		},
		"bindCSSProperty": {
			"parameters": {
				"[id]": "",
				"css_selector": "",
				"css_property_name": "",
				"observable_name": ""
			}
		},
		"bindCSSRule": {
			"parameters": {
				"[id]": "",
				"css_selector": "",
				"string_or_object_observable_name": ""
			}
		},
		"createCanvas": {
			"parameters": {
				"[view_name]": "",
				"picture_observable": "",
				"[window_title]": ""
			}
		},
		"createHTMLView": {
			"parameters": {
				"[view_name]": "",
				"picture_observable": "",
				"[window_title]": ""
			}
		},
		"createProjectList": {
			"parameters": {
				"[url": "",
				"[[window_title]": "",
				"view_name]]": ""
			}
		},
		"createView": {
			"parameters": {
				"view_name": "",
				"view_type": ""
			}
		},
		"createViews": {
			"parameters": {
			}
		},
		"destroyView": {
			"parameters": {
				"view_name": ""
			}
		},
		"eager": {
			"parameters": { }
		},
		"error": {
			"parameters": {
				"message": ""
			}
		},
		"hideView": {
			"parameters": {
				"view_name": ""
			}
		},
		"highlightView": {
			"parameters": {
				"view_name": ""
			}
		},
		"html": {
			"parameters": {
				"[view_name]": "",
				"html": ""
			}
		},
		"moveView": {
			"parameters": {
				"view_name": "",
				"x": "",
				"y": ""
			}
		},
		"patch": {
			"parameters": {
				"pointer1": "",
				"pointer2": ""
			}
		},
		"removeedenclock": {
			"parameters": {
				"pointer": ""
			}
		},
		"resizeView": {
			"parameters": {
				"view_name": "",
				"width": "",
				"height": ""
			}
		},
		"setedenclock": {
			"parameters": {
				"pointer_to_proc_or_integer": "",
				"milliseconds": ""
			}
		},
		"showObservables": {
			"parameters": {
				"[search_string": "",
				"[view_name]]": ""
			}
		},
		"showView": {
			"parameters": {
				"view_name": ""
			}
		},
		"stopHighlightingView": {
			"parameters": {
				"view_name": ""
			}
		},
		"todo": {
			"parameters": {
				"string_containing_code": ""
			}
		},
		"touch": {
			"parameters": {
				"pointer_1...": ""
			}
		},
		"unbind": {
			"parameters": {
				"observable_name": ""
			}
		},
		"withAppendedItem": {
			"parameters": {
				"pointer_to_list": "",
				"string_containing_expression": ""
			}
		},
		"writeln": {
			"parameters": {
				"message": ""
			}
		}
	}
}
