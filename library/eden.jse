## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

##MISSING FUNCTIONS

proc eager {
	if (autocalc == 0) {
		autocalc = 1;
		autocalc = 0;
	};
};

func time {
  ${{
  var now = new Date();
  return Math.floor(now.getTime() / 1000);
  }}$;
};

proc writeln {
  ${{
  var t = arguments[0];
  console.log(t);
	if (edenUI.plugins.MenuBar) {
		edenUI.plugins.MenuBar.updateStatus("Output: "+t);
	}
  }}$;
};

##A kind of privilege level that the JS-EDEN user is constrained by.
##
##Possible values:
##	"tool development": The user is allowed to write JS-EDEN code that modifies JS-EDEN itself, for
##		example code that modifies the CSS of the user interface.
##	"making construals": The normal mode without the extra privileges conferred by "tool development"
##		mode.
##	"warnings": Puts extra checks in place to warn the user about situations that are normally
##		permissible in "making construals" mode (and reasonable in some exceptional circumstances)
##		but that are likely indicative of mistakes made by the user in most circumstances.  An
##		example is referring to an observable name that hasn't been defined yet.  This mode isn't
##		implemented yet.
_authoringMode = "making construals";

##Raises an error if fewer or greater than two arguments are given.
##Returns undefined if either argument is undefined.
##tkeden returns strange strings beginning with the word "usage" in these situations.
func apply {
	${{
		if (arguments.length != 2) {
			eden.error(new Error("apply: This function requires exactly 2 arguments."), "error");
			return undefined;			
		} else if (typeof(arguments[0]) != "function") {
			eden.error(new Error("apply: The first argument must be of type func or type proc, not " + typeof(arguments[0])), "error");
			return undefined;
		} else if (!Array.isArray(arguments[1])) {
			eden.error(new Error("apply: The second argument must be of type list, not " + typeof(arguments[1])), "error");
			return undefined;
		} else {
			return arguments[0].apply(this, arguments[1]);
		}
	}}$;
}

func forget {
	${{
		if (arguments.length != 1) {
			eden.error(new Error("forget: This function requires exactly 1 argument."), "error");
			return 2;
		}
	
		var nameToDelete, symbolToDelete;
		
		if (typeof(arguments[0]) == "string") {
			nameToDelete = arguments[0];
			symbolToDelete = root.lookup(nameToDelete);
			if (!(nameToDelete in root.symbols)) {
				return 1;
			}
			nameToDelete = "/" + nameToDelete;
		} else if (arguments[0] instanceof Symbol) {
			symbolToDelete = arguments[0];
			nameToDelete = symbolToDelete.name;
		} else {
			eden.error(new Error("forget: The argument must be a string or a pointer, not a " + typeof(arguments[0])), "error");
			return 1;
		}

		for (var dependency in symbolToDelete.subscribers) {
			return 2;
		}
		for (var triggeredProc in symbolToDelete.observers) {
			return 2;
		}

		for (var triggerName in symbolToDelete.observees) {
			var triggerSymbol = root.lookup(triggerName.slice(1));
			delete triggerSymbol.observers[nameToDelete];
		}
		delete root.symbols[nameToDelete.slice(1)];
		return 0;
	}}$;
};

##Forgets all symbols whose names match a given regular expression or that are explicitly provided
##as a list.  The optional second argument determines if the search is case sensitive and the
##optional third parameter determines if system defined symbols matching the regular expression will
##also be deleted.
##
##Returns a list.
## 1st element: The number of symbols successfully forgotten.
## 2nd element: The number of symbols whose names matched the regular expression but that could not
##	be forgotten because they are referenced by a dependency or are a trigger for a triggered procedure.
func forgetAll {
	${{
		/* The third parameter determines whether or not system defined symbols will also be
		 * deleted.  This feature is for the system's own internal use and is not advertised to end
		 * users.
		 */
		var searchStr, caseSensitive, includeSystemSymbols, regExp, symbol;
		var obsToDelete = undefined;
		
		if (arguments.length == 0 || arguments.length > 3) {
			eden.error(new Error("forgetAll: This function requires at lease 1 argument and at most 2 arguments."), "error");
			return undefined;
		}
		
		if (typeof(arguments[0]) == "string") {
			searchStr = arguments[0];
		} else if (Array.isArray(arguments[0])) {
			obsToDelete = arguments[0];
		} else if (arguments[0] === undefined) {
			return [0, 0];
		} else {
			eden.error(new Error("forgetAll: The first argument must be a string, not a " + typeof(arguments[0])), "error");
			return undefined;
		}

		if (arguments.length > 1) {
			if (typeof(arguments[1]) != "boolean") {
				eden.error(new Error("forgetAll: The second argument must be a boolean, not a " + typeof(arguments[1])), "error");
				return undefined;
			}
			caseSensitive = arguments[1];
		} else {
			caseSensitive = true;
		}
		
		if (arguments.length == 2 && obsToDelete !== undefined) {
			eden.error(new Error("forgetAll: Cannot specify case sensitivity when selecting using a list."), "error");
			return undefined;
		}
		
		if (arguments.length > 2) {
			if (typeof(arguments[1]) != "boolean") {
				eden.error(new Error("forgetAll: This function requires at lease 1 argument and at most 2 arguments."), "error");
				return undefined;
			}
			includeSystemSymbols = arguments[2];
		} else {
			includeSystemSymbols = false;
		}
		
		var references = {};

		if (obsToDelete !== undefined) {

			//Observables given as a list.
			for (var i = 0; i < obsToDelete.length; i++) {
				var name;
				if (obsToDelete[i] instanceof Symbol) {
					name = obsToDelete[i].name.slice(1);
					symbol = obsToDelete[i];
				} else if (typeof(obsToDelete[i]) == "string") {
					name = obsToDelete[i];
					symbol = root.symbols[name];
				} else if (obsToDelete === undefined) {
					continue;
				} else {
					eden.error(new Error("forgetAll: All list items must be strings or pointers.  Item " + i + " is a " + typeof(obsToDelete[i])), "error");
					return undefined;
				}

				if (!includeSystemSymbols && Eden.isitSystemSymbol(name)) {
					eden.error(new Error("forgetAll: Cannot forget built-in symbol " + name), "error");
					return undefined;
				}
				
				var referencedBy = [];
				for (var dependency in symbol.subscribers) {
					referencedBy.push(dependency.slice(1));
				}
				for (var triggeredProc in symbol.observers) {
					referencedBy.push(triggeredProc.slice(1));
				}
				references[name] = referencedBy;
			}

		} else {

			//Search for observables by regular expression.
			if (caseSensitive) {
				regExp = new RegExp(searchStr);
			} else {
				regExp = new RegExp(searchStr, "i");
			}
			
			for (var name in root.symbols) {
				if (regExp.test(name)) {
					if (!includeSystemSymbols && Eden.isitSystemSymbol(name)) {
						continue;
					}
					
					symbol = root.symbols[name];
					var referencedBy = [];
					for (var dependency in symbol.subscribers) {
						referencedBy.push(dependency.slice(1));
					}
					for (var triggeredProc in symbol.observers) {
						referencedBy.push(triggeredProc.slice(1));
					}
					references[name] = referencedBy;
				}
			}
		}
		
		var numForgotten = 0;
		var numUnableToForget = 0;
		var canForget = {};

		var forgetRecursive = function (name) {
			if (name in canForget) {
				return canForget[name];
			}
			if (!(name in references)) {
				canForget[name] = false;
				return false;
			}
			var referencedBy = references[name];
			if (referencedBy.length == 0) {
				canForget[name] = true;
				return true;
			} else {
				for (var i = 0; i < referencedBy.length; i++) {
					var success = forgetRecursive(referencedBy[i]);
					if (!success) {
						canForget[name] = false;
						return false;
					}
				}
				canForget[name] = true;
				return true;
			}
		};
		
		for (name in references) {
			if (references.hasOwnProperty(name)) {
				var success = forgetRecursive(name);
				if (success) {
					symbol = root.symbols[name];
					var nameToDelete = "/" + name;
					for (var triggerName in symbol.observees) {
						if (triggerName in root.symbols) {
							var triggerSymbol = root.symbols[triggerName];
							delete triggerSymbol.observers[nameToDelete];
						}
					}
					delete root.symbols[name];
					numForgotten++;
				} else {
					numUnableToForget++;
				}
			}
		}
		
		return [numForgotten, numUnableToForget];
	}}$;
}

proc error {
	${{
		if (arguments.length > 1) {
			eden.error(new Error("error: This procedure requires at most 1 argument"), "error");
		}
		if (arguments.length == 0) {
			eden.error(new Error("Runtime error"), "error");
		} else {
			eden.error(new Error(arguments[0]), "error");
		}
	}}$;
}

func nameof {
	${{
		if (arguments.length != 1) {
			eden.error(new Error("nameof: This function requires exactly 1 argument."), "error");
			return undefined;
		}

		var pointer = arguments[0];
		
		if (pointer instanceof Symbol) {	
			return pointer.name.slice(1);
		} else if (
			pointer !== null &&
			typeof(pointer) == "object" &&
			"keys" in pointer &&
			Array.isArray(pointer.keys) &&
			pointer.keys.length > 0 &&
			typeof(pointer.keys[0]) == "number" &&
			"parent" in pointer &&
			pointer.parent instanceof Symbol
		) {
			return pointer.parent.name.slice(1) + "[" + pointer.keys[0] + "]";
		} else {
			eden.error(new Error("nameof: The argument must be a pointer, not a " + typeof(pointer)), "error");
			return undefined;
		}
	}}$;
}

proc todo {
	auto code;
	if ($# != 1) {
		error("todo: This proc requires exactly 1 argument.");
		return;
	}
	
	code = $[1];
	
	if (code == @) {
		return;
	} else if (!isString(code)) {
		error("todo: The argument must be of type string, not " // type(code));
		return;
	}
	
	code = code // ";";
	
	after (0) {
		execute(code);
	}
}

##A new JS-EDEN specific function.
func doDefault {
	para value, defaultValue;
	if ($# != 2) {
		error("doDefault: This function requires exactly 2 arguments.");
	}
	if (value == @) {
		if (defaultValue == @) {
			error("doDefault: The default value cannot be undefined.");
		} else {
			return defaultValue;
		}
	} else {
		return value;
	}
}

##Autocalc compatibility
autocalc = 1;

##Include the rest of the library

require("MenuBar");

include("library/types.js-e");
include("library/core.js-e");
include("library/lists.js-e");
include("library/maths.jse");
include("library/strings.js-e");
include("library/algebra.jse");
include("library/include_js.js-e");
include("library/dynamic.js-e");
include("library/html.js-e");
include("library/objects.js-e");
include("library/declarevar.js-e");

require("InputWindow");
require("PluginListing");
require("ProjectList");
require("CanvasHTML5");
require("SymbolViewer");
require("HTMLViews");
require("SLT");
require("SG");
require("DM");
require("ST");
createCanvas("picture");
createView("projects", "ProjectList");
createView("inputwindow", "InputWindow");

_menubar_status = "JS-Eden done loading";

proc arrange {
  auto i;
  auto name;
  auto curr_x;

  curr_x = 0;
  for (i = 1; i <= _view_list#; ++i) {
    name = _view_list[i];
    if (`"_view_"//name//"_position"` != @) {
      continue;
    }
    `"_view_"//name//"_x"` = curr_x;
    `"_view_"//name//"_y"` = 100;
    curr_x += `"_view_"//name//"_width"` + 10;
  }
}

arrange();
