## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

##MISSING FUNCTIONS

func eager {};

func time {
  ${{
  var now = new Date();
  return Math.floor(now.getTime() / 1000);
  }}$;
};

proc writeln {
  ${{
  var t = arguments[0];
  console.log(t);
	if (edenUI.plugins.MenuBar) {
		edenUI.plugins.MenuBar.updateStatus("Output: "+t);
	}
  }}$;
};

func rand {
  ${{
	return Math.floor(Math.random()*32767);
  }}$;
};

func random { return ${{ Math.random(); }}$; };

func srand {

};

##Raises an error if fewer or greater than two arguments are given.
##Returns undefined if either argument is undefined.
##tkeden returns strange strings beginning with the word "usage" in these situations.
func apply {
	${{
		if (arguments.length != 2) {
			eden.error(new Error("apply: This function requires exactly 2 arguments."), "error");
			return undefined;			
		} else if (typeof(arguments[0]) != "function") {
			eden.error(new Error("apply: The first argument must be of type func or type proc, not " + typeof(arguments[0])), "error");
			return undefined;
		} else if (!Array.isArray(arguments[1])) {
			eden.error(new Error("apply: The second argument must be of type list, not " + typeof(arguments[1])), "error");
			return undefined;
		} else {
			return arguments[0].apply(this, arguments[1]);
		}
	}}$;
}

func forget {
	${{
	var o = arguments[0];
	delete root.symbols[o];
	}}$;
};

proc error {
	${{
		if (arguments.length > 1) {
			eden.error(new Error("error: This procedure requires at most 1 argument"), "error");
		}
		if (arguments.length == 0) {
			eden.error(new Error("Runtime error"), "error");
		} else {
			eden.error(new Error(arguments[0]), "error");
		}
	}}$;
}

func nameof {
	${{
		if (arguments.length != 1) {
			eden.error(new Error("nameof: This function requires exactly 1 argument."), "error");
			return undefined;
		}

		var pointer = arguments[0];
		
		if (pointer instanceof Symbol) {	
			return pointer.name.slice(1);
		} else if (
			pointer !== null &&
			typeof(pointer) == "object" &&
			"keys" in pointer &&
			Array.isArray(pointer.keys) &&
			pointer.keys.length > 0 &&
			typeof(pointer.keys[0]) == "number" &&
			"parent" in pointer &&
			pointer.parent instanceof Symbol
		) {
			return pointer.parent.name.slice(1) + "[" + pointer.keys[0].toString() + "]";
		} else {
			eden.error(new Error("nameof: The argument must be a pointer, not a " + typeof(pointer)), "error");
			return undefined;
		}
	}}$;
}

proc todo {
	auto code;
	if ($# != 1) {
		error("todo: This proc requires exactly 1 argument.");
		return;
	}
	
	code = $[1];
	
	if (code == @) {
		return;
	} else if (!isString(code)) {
		error("todo: The argument must be of type string, not " // type(code));
		return;
	}
	
	code = code // ";";
	
	after (0) {
		execute(code);
	}
}

##A new JS-EDEN specific function.
func doDefault {
	para value, defaultValue;
	if ($# != 2) {
		error("doDefault: This function requires exactly 2 arguments.");
	}
	if (value == @) {
		if (defaultValue == @) {
			error("doDefault: The default value cannot be undefined.");
		} else {
			return defaultValue;
		}
	} else {
		return value;
	}
}

##Autocalc compatibility
autocalc = 1;

##Include the rest of the library

include("library/types.js-e");
include("library/core.js-e");
include("library/lists.js-e");
include("library/maths.jse");
include("library/strings.js-e");
include("library/algebra.jse");
include("library/include_js.js-e");
include("library/dynamic.js-e");
include("library/html.js-e");
include("library/objects.js-e");