## Copyright (c) 2014, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt
##
## Functions for constructing colour values.  Useful in conjunction with both canvas shapes and
## CSS binding procedures.

##Converts three numbers representing the red, green and blue values of a colour
##(range 0-255) into a string that can be used as a colour value for canvas
##drawables or for appropriate CSS properties.  If four arguments are supplied
##then the forth value determines the opacity (range 0.0 to 1.0).
func rgbColour {
	auto r, g, b, a;
	if ($# < 3 || $# > 4) {
		error("rgb: This function requires at least 3 arguments and at most 4 arguments.");
		return "black";
	}
	
	r = $[1]; g = $[2]; b = $[3]; a = @;
	
	if (r == @) {
		r = 0;
	} else if (!isNumber(r)) {
		error("rgb: The first argument must be a number, not a " // type(r));
		return "black";
	} else {
		r = round(r);
	}
	
	if (g == @) {
		g = 0;
	} else if (!isNumber(g)) {
		error("rgb: The second argument must be a number, not a " // type(g));
		return "black";
	} else {
		g = round(g);
	}
	
	if (b == @) {
		b = 0;
	} else if (!isNumber(b)) {
		error("rgb: The third argument must be a number, not a " // type(b));
		return "black";
	} else {
		b = round(b);
	}

	if ($# == 4) {
		a = $[4];
		if (isNumber(a)) {
			if (a < 0) {
				a = 0;
			} else if (a > 1) {
				a = 1;
			}
		} else if (a != @) {
			error("rgb: The forth argument must be a number, not a " // type(a));
			return "black";
		}
	}

	if (a == @) {
		return "rgb(" // str(r) // "," // str(g) // "," // str(b) // ")";
	} else {
		return "rgba(" // str(r) // "," // str(g) // "," // str(b) // "," // str(a) // ")";
	}
}

##Converts three numbers representing the hue, saturation and lightness values
## of a colour (ranges 0-360, 0-100 and 0-100 respectively) into a string that
##can be used as a colour value for canvas drawables or for appropriate CSS
##properties.  If four arguments are supplied then the forth value determines
##the opacity (range 0.0 to 1.0).
func hslColour {
	auto h, s, l, a;
	if ($# < 3 || $# > 4) {
		error("hsl: This function requires at least 3 arguments and at most 4 arguments.");
		return "black";
	}
	
	h = $[1]; s = $[2]; l = $[3]; a = @;
	
	if (h == @) {
		h = 0;
	} else if (!isNumber(h)) {
		error("hsl: The first argument must be a number, not a " // type(h));
		return "black";
	} else if (h < 0) {
		h = 0;
	} else if (h > 360) {
		h = 360;
	}
	
	if (s == @) {
		s = 0;
	} else if (!isNumber(s)) {
		error("hsl: The second argument must be a number, not a " // type(s));
		return "black";
	} else if (s < 0) {
		s = 0;
	} else if (s > 100) {
		s = 100;
	}
	
	if (l == @) {
		l = 0;
	} else if (!isNumber(l)) {
		error("hsl: The third argument must be a number, not a " // type(l));
		return "black";
	} else if (l < 0) {
		l = 0;
	} else if (l > 100) {
		l = 100;
	}

	if ($# == 4) {
		a = $[4];
		if (isNumber(a)) {
			if (a < 0) {
				a = 0;
			} else if (a > 1) {
				a = 1;
			}
		} else if (a != @) {
			error("hsl: The forth argument must be a number, not a " // type(a));
			return "black";
		}
	}

	if (a == @) {
		return "hsl(" // str(h) // "," // str(s) // "%," // str(l) // "%)";
	} else {
		return "hsla(" // str(h) // "," // str(s) // "%," // str(l) // "%," // str(a) // ")";
	}
}
