## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

func execute {
	${{ eden.execute(arguments[0], "execute", "", {name: "/execute"}, function () { } ) }}$;
}

proc createView {
	${{
	var name = arguments[0];
	var type = arguments[1];
	var initData = arguments[2];
	edenUI.createView(name, type, initData);
	}}$;
};

proc showView {
	${{
	var name = arguments[0];
	edenUI.showView(name);
	}}$;
};

proc hideView {
	${{
	var name = arguments[0];
	edenUI.minimizeView(name);
	}}$;
};

proc destroyView {
	${{
	var name = arguments[0];
	edenUI.destroyView(name);
	}}$;
};

proc moveView {
	para name, x, y;
	auto autocalcEnabledOnEntry;
	autocalcEnabledOnEntry = autocalc;
	if (autocalcEnabledOnEntry) {
		autocalc = 0;
	}
	`"_view_" // name // "_x"` = x;
	`"_view_" // name // "_y"` = y;
	if (autocalcEnabledOnEntry) {
		autocalc = 1;
	}
};

proc resizeView {
	para name, width, height;
	auto autocalcEnabledOnEntry;
	autocalcEnabledOnEntry = autocalc;
	if (autocalcEnabledOnEntry) {
		autocalc = 0;
	}
	`"_view_" // name // "_width"` = width;
	`"_view_" // name // "_height"` = height;
	if (autocalcEnabledOnEntry) {
		autocalc = 1;
	}
};

proc showObservables { ${{
    if (arguments.length > 2) {
		eden.error(new Error("showObservables: This procedure requires at most 2 parameters."), "error");
		return;
	}
	
	var searchStr, viewName;
	
	if (arguments.length == 0) {
		searchStr = "";
	} else {
		searchStr = arguments[0];
		if (searchStr === undefined) {
			searchStr = "";
		}
		if (typeof(searchStr) != "string") {
			eden.error(new Error("showObservables: The first argument must be a string, not a " + typeof(searchStr)), "error");
			return;
		}
	}
	
	viewName = arguments[1];
	if (viewName === undefined) {
		viewName = "showObservables";
	} else if (typeof(viewName) != "string") {
		eden.error(new Error("showObservables: The second argument must be a string, not a " + typeof(viewName)), "error");
		return;
	}
	
	var inputBox = $('#' + viewName + '-dialog .symbollist-search');
	if (inputBox.length == 0) {
		edenUI.createView(viewName, "SymbolList");
		root.lookup("_view_" + viewName + "_title").assign("Symbol List [showObservables]", this);
		inputBox = $('#' + viewName + '-dialog .symbollist-search');
	}
	inputBox.val(searchStr);
    inputBox.keyup();
}}$; }
