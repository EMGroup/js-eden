## Copyright (c) 2013, Empirical Modelling Group
## All rights reserved.
##
## See LICENSE.txt

func execute {
	${{
		eden.execute(arguments[0], "execute", "", {name: "/execute"}, function () { } );
	}}$;
}

func Point {
	${{
		var x = arguments[0];
		var y = arguments[1];
		return new Point(x, y);
	}}$;
}

proc createView {
	${{
		var name = arguments[0];
		var type = arguments[1];
		var initData = arguments[2];
		edenUI.createView(name, type, initData);
	}}$;
}

proc showView {
	${{
		var name = arguments[0];
		edenUI.showView(name);
		edenUI.brieflyHighlightView(name);
	}}$;
}

proc highlightView {
	${{
		var name = arguments[0];
		edenUI.highlightView(name, false);
	}}$;
}

proc stopHighlightingView {
	${{
		var name = arguments[0];
		edenUI.stopHighlightingView(name, false, false);
	}}$;
}

proc hideView {
	${{
		var name = arguments[0];
		edenUI.minimizeView(name);
	}}$;
}

proc destroyView {
	${{
		var name = arguments[0];
		edenUI.destroyView(name);
	}}$;
}

proc moveView {
	para name, x, y;
	together {
		`"_view_" // name // "_x"` = x;
		`"_view_" // name // "_y"` = y;
	}
}

proc resizeView {
	para name, width, height;
	together {
		`"_view_" // name // "_width"` = width;
		`"_view_" // name // "_height"` = height;
	}
}

##The summed dimensions of all window borders, title bars, scroll bars and any other parts that are
##not part of a view's content.  _view_xxx_width + _views_frame_width gives the first x position where
##another view can be placed without overlapping with xxx.
_views_frame_width = ${{ edenUI.dialogFrameWidth }}$;
_views_frame_height = ${{ edenUI.dialogFrameHeight }}$;
##The size of the grid squares that windows snap to.
_views_unit_x = ${{ edenUI.gridSizeX }}$;
_views_unit_y = ${{ edenUI.gridSizeY }}$;

##The maximum width a view can be if it fits within the browser window without scrolling.
screenWidth = ${{ window.innerWidth }}$ - _views_frame_width;
##The maximum height a view can be if it fits within the browser window without scrolling.
screenHeight = ${{ window.innerHeight - edenUI.menuBarHeight - edenUI.dialogFrameHeight - edenUI.scrollBarSize2 - (edenUI.getOptionValue("optHideOnMinimize") != "true"? edenUI.bottomBarHeight : 0)}}$;
${{
	window.addEventListener("resize", function (event) {
		root.beginAutocalcOff();
		root.lookup("screenWidth").assign(window.innerWidth - edenUI.dialogFrameWidth, Symbol.hciAgent);
		root.lookup("screenHeight").assign(window.innerHeight - edenUI.menuBarHeight - edenUI.dialogFrameHeight - edenUI.scrollBarSize2 - (edenUI.getOptionValue("optHideOnMinimize") != "true"? edenUI.bottomBarHeight : 0), Symbol.hciAgent);
		root.endAutocalcOff();
	});
}}$;

proc showObservables { ${{
    if (arguments.length > 2) {
		eden.error(new Error("showObservables: This procedure requires at most 2 parameters."), "error");
		return;
	}
	
	var searchStr, viewName;
	
	searchStr = arguments[0];
	if (searchStr === undefined) {
		searchStr = "";
	}
	if (typeof(searchStr) != "string") {
		eden.error(new Error("showObservables: The first argument must be a string, not a " + typeof(searchStr)), "error");
		return;
	}
	
	viewName = arguments[1];
	if (viewName === undefined) {
		viewName = "showObservables";
	} else if (typeof(viewName) != "string") {
		eden.error(new Error("showObservables: The second argument must be a string, not a " + typeof(viewName)), "error");
		return;
	}
	
	var inputBox = $('#' + viewName + '-dialog .symbollist-search');
	if (inputBox.length == 0) {
		edenUI.createView(viewName, "SymbolList");
		root.lookup("_view_" + viewName + "_title").assign("Symbol List (" + viewName + ")", this);
		inputBox = $('#' + viewName + '-dialog .symbollist-search');
	} else {
		edenUI.showView(viewName);
	}
	edenUI.brieflyHighlightView(viewName);
	inputBox.val(searchStr);
    inputBox.keyup();
}}$; }
