${{
Line = function(x1, y1, x2, y2, colour) {
  this.x1 = x1;
  this.y1 = y1;
  this.x2 = x2;
  this.y2 = y2;
  this.colour = colour;
}
}}$;

${{
Rectangle = function(x1, y1, x2, y2, colour) {
  this.x1 = x1;
  this.y1 = y1;
  this.x2 = x2;
  this.y2 = y2;
  this.colour = colour;
}
}}$;

${{
Circle = function(x, y, radius, fillcolour, outlinecolour) {
  this.x = x;
  this.y = y;
  this.radius = radius;
  this.fillcolour = fillcolour;
  this.outlinecolour = outlinecolour;
}
}}$;

${{
Text = function(txt, x, y, colour) {
  this.x = x;
  this.y = y;
  this.text = txt;
  this.colour = colour;
}
}}$;

func Text { ${{
  var x = arguments[1];
  var y = arguments[2];
  var text = arguments[0];
  var colour = arguments[3];
  if (colour == null) { colour = "black"; }
  return new Text(text, x, y, colour);
}}$; }

func Line { ${{
  var x1 = arguments[0];
  var y1 = arguments[1];
  var x2 = arguments[2];
  var y2 = arguments[3];
  var colour = arguments[4];
  if (colour == null) { colour = "black"; }
  return new Line(x1, y1, x2, y2, colour);
}}$; }

func Rectangle { ${{
  var x1 = arguments[0];
  var y1 = arguments[1];
  var x2 = arguments[2];
  var y2 = arguments[3];
  var colour = arguments[4];
  if (colour == null) { colour = "black"; }
  return new Rectangle(x1, y1, x2, y2, colour);
}}$; }

func Circle { ${{
  var x = arguments[0];
  var y = arguments[1];
  var radius = arguments[2];
  var fillcolour = arguments[3];
  var outlinecolour = arguments[4];
  if (fillcolour == null) { fillcolour = "black"; }
  if (outlinecolour == null) { outlinecolour = "black"; }
  return new Circle(x, y, radius, fillcolour, outlinecolour);
}}$; }


${{
Line.prototype.draw = function(context) {
  context.beginPath();
  context.strokeStyle = this.colour;
  context.moveTo(this.x1, this.y1);
  context.lineTo(this.x2, this.y2);
  context.stroke();
};
}}$;

${{
Rectangle.prototype.draw = function(context) {
  context.fillStyle = this.colour;
  context.fillRect(this.x1,this.y1,this.x2,this.y2);
};
}}$;

${{
Circle.prototype.draw = function(context) {
  context.beginPath();
  context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
 
  context.fillStyle = this.fillcolour;
  context.fill();
  context.lineWidth = 2;
  context.strokeStyle = this.outlinecolour;
  context.stroke();
  context.closePath();

};
}}$;

${{
Text.prototype.draw = function(context) {
  context.strokeStyle = this.colour;
  context.strokeText(this.text,this.x, this.y);
};
}}$;

proc clearCanvas { ${{
  var canvas = document.getElementById("d1canvas");
  canvas.width = canvas.width;
}}$; }

proc drawPicture : picture { 
  clearCanvas();
  ${{
  var picture = context.lookup('picture').value();
  var canvas = document.getElementById("d1canvas").getContext('2d');

  for (var i = 0; i < picture.length; ++i) {
    picture[i].draw(canvas);
  }
  }}$; 
}


##Buttons

${{
Button = function (name, label, x, y, enabled) {
	this.name = name;
	this.label = label;
	this.x = x;
	this.y = y;
	this.enabled = enabled;
}
}}$;

func Button { ${{
  var name = arguments[0];
  var label = arguments[1];
  var x = arguments[2];
  var y = arguments[3];
  var enabled = arguments[4];
  return new Button(name, label, x, y, enabled);
}}$; }

${{
Button.prototype.draw = function(context) {
  var me = "canvas_" + this.name;
  var me2 = this.name;
  var but = $(me).get(0);
  if (but === undefined) {
	var dis = "";
	if (this.enabled == true) { dis = ""; }
	else { dis = "disabled=\"true\""; }

	var can = $("#eden-content");
	var buthtml = $("<input type=\"button\" id=\"" + me + "\" value=\"" + this.label + "\" " + dis + " style=\"position: absolute; left: " + this.x + "px; top: " + this.y + "px;\"></input").click(function() {
		root.lookup(me2 + "_clicked").assign(true); root.lookup(me2 + "_clicked").assign(false);
	}).appendTo(can);

	//Initialise
	root.lookup(me2 + "_clicked").assign(false);
  } else {
	but.value = this.label;
	if (this.enabled == true) { but.disabled = false; }
	else { but.disabled = true; }
	but.style.left = "" + this.x + "px";
	but.style.top = "" + this.y + "px";
  }
};
}}$;


##Combobox

${{
Combobox = function (name, options, x, y, enabled) {
	this.name = name;
	this.options = options;
	this.x = x;
	this.y = y;
	this.enabled = enabled;
}

function makeoptionshtml(opts) {
	var html = "";
	for (x in opts) {
		html = html + "\n<option value=\""+ opts[x] + "\">"+ opts[x] + "</option>";
	}
	return html;
}
}}$;

func Combobox { ${{
  var name = arguments[0];
  var options = arguments[1];
  var x = arguments[2];
  var y = arguments[3];
  var enabled = arguments[4];
  return new Combobox(name, options, x, y, enabled);
}}$; }

${{
Combobox.prototype.draw = function(context) {
  var me = "canvas_" + this.name;
  var me2 = this.name;
  var box = $(me).get(0);
  if (box === undefined) {
	var dis = "";
	if (this.enabled == true) { dis = ""; }
	else { dis = "disabled=\"true\""; }

	var can = $("#eden-content");
	var boxhtml = $("<select id=\"" + me + "\" " + dis + " style=\"position: absolute; left: " + this.x + "px; top: " + this.y + "px;\"></select>");

	boxhtml.html(makeoptionshtml(this.options));

	boxhtml.change(function() {
		root.lookup(me2 + "_value").assign(boxhtml.get(0).value);
	}).appendTo(can);

	//Initialise
	root.lookup(me2 + "_value").assign(this.options[0]);
  } else {
	box.html(makeoptionshtml(this.options));
	if (this.enabled == true) { box.disabled = false; }
	else { box.disabled = true; }
	box.style.left = "" + this.x + "px";
	box.style.top = "" + this.y + "px";
  }
};
}}$;

##line2 = Line(0, 0, 50, 30, "red");
##line2.x1 = 30;

##picture is [line2];

##drawPicture();
