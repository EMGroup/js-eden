##Shim construal tkeden1.75
##
##Run to make built-in funcs and procs strictly compatible with their tkeden
##equivalents of the same name where there are minor differences between the
##normal JS-EDEN implementations and the tkeden versions.

##Trigonometric functions in tkeden work in radians instead of degrees.
radiansPerUnit = 1;

func listcat {
	auto result, i;
	result = [];
	for (i = 1; i <= $#; i++) {
		if ($[i] == @) {
			return @;
		} else if (isList($[i])) {
			result = result // $[i];
		} else {
			error("listcat: Argument " // str(i) // " must be a list, not a " // type($[i]));
			return @;
		}
	}
	return result;
}

func pow {
  return ${{ Math.pow(arguments[0],arguments[1]); }}$;
}

func rand {
  ${{
	return Math.floor(Math.random()*32767);
  }}$;
};

func oldSort {
	para newSort, params;
	if (params[2] == 1) {
		return newSort(params[1], "ascending");
	} else if (params[2] == 2) {
		return newSort(params[1], "descending");
	} else {
		return newSort(params[1], params[2]);
	}
}
patch(&oldSort, &sort);

proc srand {
	para seed;
	randomSeed = seed;
}

func strcat {
	auto result, i;
	result = "";
	for (i = 1; i <= $#; i++) {
		if ($[i] == @) {
			return @;
		} else if (isString($[i])) {
			result = result // $[i];
		} else {
			error("strcat: Argument " // str(i) // " must be a string, not a " // type($[i]));
			return @;
		}
	}
	return result;
}

##JS-EDEN tail func returns @ for an undefined argument, refuses the empty list
##or a non-list argument, and refuses if more than one argument is provided.
func oldTail {
	para newTail, params;
	if (params# == 0 || !isList(params[1]) || params[1]# == 0) {
		return [];
	} else {
		return newTail(params[1]);
	}
}

patch(&oldTail, &tail);
