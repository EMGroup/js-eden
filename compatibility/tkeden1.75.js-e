##Shim construal tkeden1.75
##
##Run to make built-in funcs and procs strictly compatible with their tkeden
##equivalents of the same name where there are minor differences between the
##normal JS-EDEN implementations and the tkeden versions.

##Trigonometric functions in tkeden work in radians instead of degrees.
semicircleAngle = PI;

func listcat {
	auto result, i;
	result = [];
	for (i = 1; i <= $#; i++) {
		if ($[i] == @) {
			return @;
		} else if (isList($[i])) {
			result = result // $[i];
		} else {
			error("listcat: Argument " // str(i) // " must be a list, not a " // type($[i]));
			return @;
		}
	}
	return result;
}

##Default to base e instead of base 10.
func log {
	${{
		var number = arguments[0];
		var base = arguments[1];
		if (arguments.length == 0 || arguments.length > 2) {
			eden.error(new Error("log: The function requires at least one argument and at most two arguments."), "error");
			return undefined;
		}

		if (number === undefined || (arguments.length == 2 && base === undefined)) {
			return undefined;
		} else if (typeof(number) != "number") {
			eden.error(new Error("log: The first argument must be a number, not a " + typeof(number)), "error");
		} else if (base !== undefined && typeof(base) != "number") {
			eden.error(new Error("log: The second argument must be a number, not a " + typeof(base)), "error");
		}

		if (base === undefined) {
			return Math.log(number);
		} else {
			return Math.log(number) / Math.log(base);
		}
	}}$;
}

proc pauseedenclocks {
	edenclocks_paused = true;
}

proc unpauseedenclocks {
	auto temp;
	temp = edenclocks;
	edenclocks = [];
	edenclocks = temp;
	edenclocks_paused = false;
}

func rand {
  ${{
	return Math.floor(Math.random()*32767);
  }}$;
};

rgb2colour is rgbColour;
rgb2color is rgbColour;

func oldSort {
	para newSort, params;
	if (params[2] == 1) {
		return newSort(params[1], "ascending");
	} else if (params[2] == 2) {
		return newSort(params[1], "descending");
	} else {
		return newSort(params[1], params[2]);
	}
}
patch(&oldSort, &sort);

proc srand {
	para seed;
	randomSeed = seed;
}

func strcat {
	auto result, i;
	result = "";
	for (i = 1; i <= $#; i++) {
		if ($[i] == @) {
			return @;
		} else if (isString($[i])) {
			result = result // $[i];
		} else {
			error("strcat: Argument " // str(i) // " must be a string, not a " // type($[i]));
			return @;
		}
	}
	return result;
}

symboldefinition is definitionOf;

func symboltext {
	return definitionRHS($[1]) // ";";
}


##JS-EDEN tail func returns @ for an undefined argument, refuses the empty list
##or a non-list argument, and refuses if more than one argument is provided.
func oldTail {
	para newTail, params;
	if (params# == 0 || !isList(params[1]) || params[1]# == 0) {
		return [];
	} else {
		return newTail(params[1]);
	}
}

patch(&oldTail, &tail);

${{
	Eden.systemAgentNames["srand"] = true;
	Eden.systemAgentNames["pauseedenclocks"] = true;
	Eden.systemAgentNames["unpauseedenclocks"] = true;

	Eden.systemFunctionNames["listcat"] = true;
	Eden.systemFunctionNames["rand"] = true;
	Eden.systemFunctionNames["rgb2color"] = true;
	Eden.systemFunctionNames["strcat"] = true;
	Eden.systemFunctionNames["symboldefinition"] = true;
	Eden.systemFunctionNames["symboltext"] = true;
}}$;
