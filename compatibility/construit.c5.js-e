##Shim construal construit.c5
##
##Run on the later versions of JS-EDEN to temporarily reverse incompatible
##changes made to the environment subsequent to the CONSTRUIT! C5 meeting
##(11-16 December 2014) but before the next major JS-EDEN release.

alias("_View_default_position", "_View_picture_position");
alias("_View_default_size", "_View_picture_size");
alias("_view_default_width", "_view_picture_width");
alias("_view_default_height", "_view_picture_height");
alias("_view_default_x", "_view_picture_x");
alias("_view_default_y", "_view_picture_y");

proc CanvasHTML5_DrawPicture {
	${{
	var canvas = arguments[0];
	var picture = arguments[1];
	edenUI.plugins.CanvasHTML5.drawPicture(canvas,picture);
	}}$;
};

proc drawPicture : picture { 
  CanvasHTML5_DrawPicture("picture", "picture");
};

mouseClickX is mouseUp.x;
mouseClickY is mouseUp.y;
mouseX is mousePosition.x;
mouseY is mousePosition.y;

func oldArc {
	para newArc, params;
	auto direction;
	if (params[6]) {
		direction = "anticlockwise";
	} else {
		direction = "clockwise";
	}
	return newArc(params[1], params[2], params[3], -params[4] / radiansPerUnit, -params[5] / radiansPerUnit, params[7], {direction: direction});
}
patch(&oldArc, &Arc);

func oldCeil {
	para newCeil, params;
	if (params# < 2) {
		return newCeil(params[1], 1);
	} else {
		return newCeil(params[1], params[2]);
	}
}
patch(&oldCeil, &ceil);

func oldCircle {
	para newCircle, params;
	auto fillColour, outlineColour;
	fillColour = params[4] == @? "black" : params[4];
	outlineColour = params[5] == @? "black" : params[5];
	return newCircle(params[1], params[2], params[3], fillColour, outlineColour, {lineWidth: 2});
}
patch(&oldCircle, &Circle);

func Div { ${{
	var name = arguments[0];
	var x = arguments[1];
	var y = arguments[2];
	var width = arguments[3];
	var height = arguments[4];
	var html = arguments[5];
	var style = arguments[6];
	return new Div(html, x, y, width, height, name, style);
}}$; }

func oldFloor {
	para newFloor, params;
	if (params# < 2) {
		return newFloor(params[1], 1);
	} else {
		return newFloor(params[1], params[2]);
	}
}
patch(&oldFloor, &floor);

func Inputbox { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var enabled = arguments[3];
  var width = arguments[4];
  var value = arguments[5];
  root.lookup(name + "_value").assign(value, root.lookup("Inputbox"));
  return new Textbox(name, x, y, width, 1, enabled);
}}$; }

func Polygon {
	${{
		var points = arguments[0];
		var colour = arguments[1];
		var newPoints = [];
		for (var i = 0; i < points.length - 1; i = i + 2) {
			newPoints.push(new Point(points[i], points[i + 1]));
		}
		return new Polygon(newPoints, colour, colour);
	}}$;
}

func pow {
  return ${{ Math.pow(arguments[0],arguments[1]); }}$;
}

func rand {
  ${{
	return Math.floor(Math.random()*32767);
  }}$;
};

func Slider { ${{
  var name = arguments[0];
  var min = arguments[1];
  var max = arguments[2];
  var step = arguments[3];
  var value = arguments[4];
  var orientation = arguments[5];
  var x = arguments[6];
  var y = arguments[7];
  root.lookup(name + "_value").assign(value, root.lookup("Slider"));
  return new Slider(name, min, max, step, x, y, 130, orientation, true);
}}$; }

func Text {
	${{
		var text = arguments[0];
		var x = arguments[1];
		var y = arguments[2];
		var fillcolour = arguments[3];
		var size = arguments[4];

		if (size === undefined) {
			size = "1em";
		} else if (typeof(size) == "number") {
			size = size + "px";
		}
		if (fillcolour === undefined) {
			fillcolour = "black";
		}
		
		return new Text(text, x, y, size, fillcolour, undefined, {valign: "alphabetic"});
	}}$;
}

func Textbox { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var enabled = arguments[3];
  return new Textbox(name, x, y, 130, 2, enabled);
}}$; }
