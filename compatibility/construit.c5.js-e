##Shim construal construit.c5
##
##Run on the later versions of JS-EDEN to temporarily reverse incompatible
##changes made to the environment subsequent to the CONSTRUIT! C5 meeting
##(11-16 December 2014) but before the next major JS-EDEN release (SciFest event, 21-27 April 2015).

##Reverse changes made by all later versions.
include("compatibility/scifest2015.js-e");

include_css("compatibility/construit.c5.css");

destroyView("picture");
createCanvas("default", "picture", "Canvas Picture");

proc CanvasHTML5_DrawPicture {
	${{
		var viewName = arguments[0];
		var obsName = arguments[1];
		var contentSym = root.lookup("_view_" + viewName + "_content");
		var content = root.lookup(obsName).value();
		var agent = root.lookup("CanvasHTML5_DrawPicture");
		contentSym.assign(content, root.scope, agent);
		edenUI.plugins.Canvas2D.drawPicture(viewName);
	}}$;
};

proc drawPicture { 
  CanvasHTML5_DrawPicture("default", "picture");
};

mouseClickX is mouseUp.x;
mouseClickY is mouseUp.y;

func oldArc {
	para newArc, params;
	auto direction;
	if (params[6]) {
		direction = "anticlockwise";
	} else {
		direction = "clockwise";
	}
	return newArc(params[1], params[2], params[3], -params[4] / radiansPerUnit, -params[5] / radiansPerUnit, params[7], {direction: direction});
}
patch(&oldArc, &Arc);

centre = centroid;

func oldCircle {
	para newCircle, params;
	auto fillColour, outlineColour;
	fillColour = params[4] == @? "black" : params[4];
	outlineColour = params[5] == @? "black" : params[5];
	return newCircle(params[1], params[2], params[3], fillColour, outlineColour, {lineWidth: 2});
}
patch(&oldCircle, &Circle);

proc createView {
	${{
		var name = arguments[0];
		var oldType = arguments[1];
		
		var typeMapping = {
			CanvasHTML5: "Canvas2D",
			DM: "DependencyMap",
			PlainHTML: "HTMLContent",
			PluginListing: "PluginManager",
			SG: "ScriptGenerator",
			InputWindow: "ScriptInput",
			ST: "StateTimeLine",
			SL: "StateListener",
			SLT: "SymbolLookUpTable"
		};
		
		var newType;
		if (oldType in typeMapping) {
			newType = typeMapping[oldType];
		} else {
			newType = oldType;
		}
		
		edenUI.createView(name, newType, this);
	}}$;
};

func Div { ${{
	var name = arguments[0];
	var x = arguments[1];
	var y = arguments[2];
	var width = arguments[3];
	var height = arguments[4];
	var html = arguments[5];
	var style = arguments[6];
	return new Div(html, x + "px", y + "px", width + "px", height + "px", name, undefined, style);
}}$; }

func oldIndexOf {
	para newIndexOf, params;
	return apply(newIndexOf, [params[2], params[1]] // sublist(params, 3));
}
patch(&oldIndexOf, &indexOf);

func Image { ${{
  var x = arguments[1];
  var y = arguments[2];
  var width = arguments[3];
  var height = arguments[4];
  var file = arguments[5];
  return new CanvasImage(undefined, x, y, width, height, 0, 0, undefined, undefined, true, file);
}}$; }

func Inputbox { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var enabled = arguments[3];
  var width = arguments[4];
  var value = arguments[5];
  root.lookup(name + "_value").assign(value, root.scope, root.lookup("Inputbox"));
  return new Textbox(name, x, y, width, 1, enabled);
}}$; }

func listcat {
	auto result, i;
	result = [];
	for (i = 1; i <= $#; i++) {
		if ($[i] == @) {
			return @;
		} else if (isList($[i])) {
			result = result // $[i];
		} else {
			error("listcat: Argument " // str(i) // " must be a list, not a " // type($[i]));
			return @;
		}
	}
	return result;
}

func Polygon {
	${{
		var points = arguments[0];
		var colour = arguments[1];
		var newPoints = [];
		for (var i = 0; i < points.length - 1; i = i + 2) {
			newPoints.push(new Point(points[i], points[i + 1]));
		}
		return new Polygon(newPoints, colour, colour);
	}}$;
}

func rand {
  ${{
	return Math.floor(Math.random()*32767);
  }}$;
};

func oldRectangle {
	para newRectangle, params, result;
	auto fillColour, outlineColour;
	fillColour = params[5] == @? "black" : params[5];
	outlineColour = params[6] == @? "black" : params[6];
	result = newRectangle(params[1], params[2], params[3], params[4], fillColour, outlineColour, params[7]);
	result.x1 = result.x;
	result.y1 = result.y;
	result.x2 = result.width;
	result.y2 = result.height;
	return result;
}
patch(&oldRectangle, &Rectangle);

func oldSearch {
	para newSearch, params;
	return apply(newSearch, [params[2], params[1]] // sublist(params, 3));
}
patch(&oldSearch, &search);

func Slider { ${{
  var name = arguments[0];
  var min = arguments[1];
  var max = arguments[2];
  var step = arguments[3];
  var value = arguments[4];
  var orientation = arguments[5];
  var x = arguments[6];
  var y = arguments[7];
  root.lookup(name + "_value").assign(value, root.scope, root.lookup("Slider"));
  return new Slider(name, min, max, step, undefined, undefined, undefined, x, y, 130, orientation, true);
}}$; }

func strcat {
	auto result, i;
	result = "";
	for (i = 1; i <= $#; i++) {
		if ($[i] == @) {
			return @;
		} else if (isString($[i])) {
			result = result // $[i];
		} else {
			error("strcat: Argument " // str(i) // " must be a string, not a " // type($[i]));
			return @;
		}
	}
	return result;
}

func Text {
	${{
		var text = arguments[0];
		var x = arguments[1];
		var y = arguments[2];
		var fillcolour = arguments[3];
		var size = arguments[4];

		if (size === undefined) {
			size = "1em";
		} else if (typeof(size) == "number") {
			size = size + "px";
		}
		if (fillcolour === undefined) {
			fillcolour = "black";
		}
		
		return new Text(text, x, y, size, fillcolour, undefined, {valign: "alphabetic"});
	}}$;
}

func Textbox { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var enabled = arguments[3];
  return new Textbox(name, x, y, 130, 2, enabled);
}}$; }

${{
	Eden.systemObservableNames["mouseClickX"] = true;
	Eden.systemObservableNames["mouseClickY"] = true;

	Eden.systemAgentNames["CanvasHTML5_DrawPicture"] = true;
	Eden.systemAgentNames["drawPicture"] = true;

	Eden.systemFunctionNames["centre"] = true;
	Eden.systemFunctionNames["Inputbox"] = true;
	Eden.systemFunctionNames["listcat"] = true;
	Eden.systemFunctionNames["rand"] = true;
	Eden.systemFunctionNames["strcat"] = true;
}}$;
