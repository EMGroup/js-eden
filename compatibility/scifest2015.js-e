##Shim construal scifest2015
##
##Run on the later versions of JS-EDEN to temporarily reverse incompatible
##changes made to the environment subsequent to the SciFest 2015 event at Joensuu (21-27 April 2015)
##but before the next major JS-EDEN release.

##Default to base e instead of base 10.
func log {
	${{
		var number = arguments[0];
		var base = arguments[1];
		if (arguments.length == 0 || arguments.length > 2) {
			eden.error(new Error("log: The function requires at least one argument and at most two arguments."), "error");
			return undefined;
		}

		if (number === undefined || (arguments.length == 2 && base === undefined)) {
			return undefined;
		} else if (typeof(number) != "number") {
			eden.error(new Error("log: The first argument must be a number, not a " + typeof(number)), "error");
		} else if (base !== undefined && typeof(base) != "number") {
			eden.error(new Error("log: The second argument must be a number, not a " + typeof(base)), "error");
		}

		if (base === undefined) {
			return Math.log(number);
		} else {
			return Math.log(number) / Math.log(base);
		}
	}}$;
}

##Linear algebra stuff

func centroid {
  para points;
  auto i, x, y;

  x = 0;
  y = 0;
  i = 0;

  for(i = 1; i < points#; i = i + 2) {
    x = x + points[i];
    y = y + points[i+1];
  }

  x = x / (points# / 2);
  y = y / (points# / 2);
  
  return [x,y];
}

func rotate {
  para points, origin, degrees;
  auto i, c, s, x, y, rpoints;

  ##Translate to origin.
  rpoints = translate(points, [-origin[1],-origin[2]]);

  c = cos(degrees);
  s = sin(degrees);

  /* Rotate clockwise about origin */
  for(i = 1; i < points#; i = i + 2) {
    x = rpoints[i];
    y = rpoints[i+1];
    rpoints[i] = x*c - y*s;
    rpoints[i+1] = x*s + y*c;
  }

  /* Tranlate to original location */
  rpoints = translate(rpoints, [origin[1],origin[2]]);

  return rpoints;
}

func scale {
	para scaleFactor, vector;
	auto result, i;
	if ((scaleFactor == @ || vector == @) && $# == 2) {
		return @;
	}
	if (!isNumber(scaleFactor)) {
		error("scale: The first argument must be a number, not a " // type(scaleFactor));
		return @;
	} else if (!isList(vector)) {
		error("scale: The second argument must be a list, not a " // type(vector));
		return @;
	}
	result = array(vector#);
	for (i = 1; i <= vector#; i++) {
		result[i] = scaleFactor * vector[i];
	}
	return result;
}

func translate {
  para points, vector;
  auto i, tpoints;

  i = 0;
  tpoints = [];

  for(i = 1; i < points#; i = i + 2) {
    append tpoints, points[i] + vector[1];
    append tpoints, points[i+1] + vector[2];
  }

  return tpoints;
}

${{
	Eden.systemFunctionNames["rotate"] = true;
	Eden.systemFunctionNames["scale"] = true;
	Eden.systemFunctionNames["translate"] = true;
}}$;