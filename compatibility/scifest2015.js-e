##Shim construal scifest2015
##
##Run on the later versions of JS-EDEN to temporarily reverse incompatible
##changes made to the environment subsequent to the SciFest 2015 event at Joensuu (21-27 April 2015)
##but before 14th November 2015 (build up to the CONSTRUIT! C6 meeting).

mouseWindow is mouseView;
mouseDownWindow is mouseDownView;
hsl2colour is hslColour;
rgb2colour is rgbColour;
_view_list is _views_list;

##Buttons now support images on them.
func Button {
${{
	var argsProcessed, arg, argType;
	var name, label, imageURL;

	if (typeof(arguments[1]) == "string") {
		name = arguments[0];
		label = arguments[1];
		argsProcessed = 2;
		arg = arguments[2];
		argType = typeof(arg);
		if (argType == "string") {
			imageURL = arg;
			argsProcessed++;
			arg = arguments[3];
		}
	} else {
		name = root.currentObservableName();
		if (name === undefined) {
			eden.error(new Error("Button: Every button must have a name."), "error");
			return undefined;
		}
		label = arguments[0];
		argsProcessed = 1;
		arg = arguments[1];
	}

	var x = arg;
	argsProcessed++;
	var y = arguments[argsProcessed];
	argsProcessed++;
	arg = arguments[argsProcessed];
	argType = typeof(arg);

	var width, minHeight, enabled;

	if (argType == "number") {
		width = arg;
		argsProcessed++;
		arg = arguments[argsProcessed];
		argType = typeof(arg);

		if (argType == "number") {
			minHeight = arg;
			argsProcessed++;
			arg = arguments[argsProcessed];
			argType = typeof(arg);
		}
	}

	if (argType == "boolean") {
		enabled = arg;
		argsProcessed++;
		arg = arguments[argsProcessed];
		argType = typeof(arg);	
	} else {
		enabled = true;
	}

	if (argsProcessed < arguments.length - 2) {
		argsProcessed = arguments.length - 2;
	}

	var fillcolour = arguments[argsProcessed];
	var textcolour = arguments[argsProcessed + 1];
	return new Button(name, label, imageURL, x, y, width, minHeight, enabled, fillcolour, textcolour);
}}$;
}

##Checkboxes now have an optional label argument.
func Checkbox { ${{
  var name = arguments[0];
  var x = arguments[1];
  var y = arguments[2];
  var tristate = arguments[3];
  if (tristate === undefined) tristate = false;
  var enabled = arguments[4];
  if (enabled === undefined) enabled = true;
  return new Checkbox(name, undefined, x, y, tristate, enabled);
}}$; }

##Combobox now produces comoboboxes, not pure drop down lists anymore.
##Drop down lists now have separate values and labels.
func Combobox { ${{
  var name = arguments[0];
  var values = arguments[1];
  var x = arguments[2];
  var y = arguments[3];
  var enabled = arguments[4];
  return new DropDownList(name, values, values, x, y, enabled);
}}$; }

##Radio button groups now have separate values and labels.
func RadioButtons { ${{
	var name = arguments[0];
	var values = arguments[1];
	var x = arguments[2];
	var y = arguments[3];
	var enabled = arguments[4];
	var horizontal = arguments[5];
	return new RadioButtons(name, values, values, x, y, undefined, horizontal, enabled);
}}$; }

func indexOf {
	para searchValue, target, start, isSorted;
	if (isString(target)) {
		return substringPosition(searchValue, target, start);
	} else {
		return positionInList(searchValue, target, start, isSorted);
	}
}

indexOfRE is positionOfRE;

##Default to base e instead of base 10.
func log {
	${{
		var number = arguments[0];
		var base = arguments[1];
		if (arguments.length == 0 || arguments.length > 2) {
			eden.error(new Error("log: The function requires at least one argument and at most two arguments."), "error");
			return undefined;
		}

		if (number === undefined || (arguments.length == 2 && base === undefined)) {
			return undefined;
		} else if (typeof(number) != "number") {
			eden.error(new Error("log: The first argument must be a number, not a " + typeof(number)), "error");
		} else if (base !== undefined && typeof(base) != "number") {
			eden.error(new Error("log: The second argument must be a number, not a " + typeof(base)), "error");
		}

		if (base === undefined) {
			return Math.log(number);
		} else {
			return Math.log(number) / Math.log(base);
		}
	}}$;
}

##Linear algebra stuff

func centroid {
  para points;
  auto i, x, y;

  x = 0;
  y = 0;
  i = 0;

  for(i = 1; i < points#; i = i + 2) {
    x = x + points[i];
    y = y + points[i+1];
  }

  x = x / (points# / 2);
  y = y / (points# / 2);
  
  return [x,y];
}

func rotate {
  para points, origin, degrees;
  auto i, c, s, x, y, rpoints;

  ##Translate to origin.
  rpoints = translate(points, [-origin[1],-origin[2]]);

  c = cos(degrees);
  s = sin(degrees);

  /* Rotate clockwise about origin */
  for(i = 1; i < points#; i = i + 2) {
    x = rpoints[i];
    y = rpoints[i+1];
    rpoints[i] = x*c - y*s;
    rpoints[i+1] = x*s + y*c;
  }

  /* Tranlate to original location */
  rpoints = translate(rpoints, [origin[1],origin[2]]);

  return rpoints;
}

func scale {
	para scaleFactor, vector;
	auto result, i;
	if ((scaleFactor == @ || vector == @) && $# == 2) {
		return @;
	}
	if (!isNumber(scaleFactor)) {
		error("scale: The first argument must be a number, not a " // type(scaleFactor));
		return @;
	} else if (!isList(vector)) {
		error("scale: The second argument must be a list, not a " // type(vector));
		return @;
	}
	result = array(vector#);
	for (i = 1; i <= vector#; i++) {
		result[i] = scaleFactor * vector[i];
	}
	return result;
}

func translate {
  para points, vector;
  auto i, tpoints;

  i = 0;
  tpoints = [];

  for(i = 1; i < points#; i = i + 2) {
    append tpoints, points[i] + vector[1];
    append tpoints, points[i+1] + vector[2];
  }

  return tpoints;
}

${{
	Eden.systemObservableNames["mouseWindow"] = true;
	Eden.systemObservableNames["mouseDownWindow"] = true;
	Eden.systemObservableNames["_view_list"] = true;
	Eden.systemFunctionNames["indexOf"] = true;
	Eden.systemFunctionNames["indexOfRE"] = true;
	Eden.systemFunctionNames["hsl2colour"] = true;
	Eden.systemFunctionNames["rgb2colour"] = true;
	Eden.systemFunctionNames["rotate"] = true;
	Eden.systemFunctionNames["scale"] = true;
	Eden.systemFunctionNames["translate"] = true;
}}$;